##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V3.20C/W32             04/Aug/2006  13:21:50 #
# Copyright 1996-2004 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  D:\temp\sys_msap01mk_dev0103\crc.c                      #
#    Command line =  --cpu=m128 -ms -o D:\temp\sys_msap01mk_dev0103\Release\ #
#                    Obj\ -lCN D:\temp\sys_msap01mk_dev0103\Release\List\    #
#                    -y --initializers_in_flash -s9                          #
#                    -DENABLE_BIT_DEFINITIONS -e -I "F:\Program Files\IAR    #
#                    Systems\Embedded Workbench 3.2\avr\INC\" -I             #
#                    "F:\Program Files\IAR Systems\Embedded Workbench        #
#                    3.2\avr\INC\CLIB\" --eeprom_size 4096                   #
#                    D:\temp\sys_msap01mk_dev0103\crc.c                      #
#    List file    =  D:\temp\sys_msap01mk_dev0103\Release\List\crc.lst       #
#    Object file  =  D:\temp\sys_msap01mk_dev0103\Release\Obj\crc.r90        #
#                                                                            #
#                                                                            #
##############################################################################

D:\temp\sys_msap01mk_dev0103\crc.c
      1          typedef unsigned char UCHAR;
      2          typedef unsigned int UINT;
      3          
      4          /* Table Of CRC Values for high-order byte */

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_I>`
      5          const UCHAR auchCRCHi[] = {
   \                     auchCRCHi:
   \   00000000                              DS 256
   \   00000100                              REQUIRE `?<Initializer for auchCRCHi>`
      6          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
      7          0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
      8          0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
      9          0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     10          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
     11          0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
     12          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
     13          0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     14          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
     15          0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
     16          0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
     17          0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     18          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
     19          0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
     20          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
     21          0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     22          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
     23          0x40
     24          };
     25          
     26           /* Table of CRC values for low-order byte    */
     27          

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_I>`
     28          const char auchCRCLo[] = {
   \                     auchCRCLo:
   \   00000000                              DS 256
   \   00000100                              REQUIRE `?<Initializer for auchCRCLo>`
     29          0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
     30          0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
     31          0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
     32          0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
     33          0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
     34          0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
     35          0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
     36          0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
     37          0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
     38          0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
     39          0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
     40          0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
     41          0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
     42          0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
     43          0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
     44          0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
     45          0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
     46          0x40
     47          };
     48          

   \                                 In segment CODE, align 2, keep-with-next
     49          UINT getcrc(UCHAR *puchMsg, UINT usDataLen)
   \                     getcrc:
     50          {
   \   00000000   2F5B                       MOV     R21,R27
   \   00000002   2E0A                       MOV     R0,R26
   \   00000004   01F8                       MOVW    R31 : R30,R17 : R16
     51              
     52          	UCHAR uchCRCHi = 0xFF ; /* high byte of CRC initialized      */
   \   00000006   EF6F                       LDI     R22,255
     53          	UCHAR uchCRCLo = 0xFF ; /* low byte of CRC initialized       */
   \   00000008   EF4F                       LDI     R20,255
   \   0000000A   C00C                       RJMP    ??getcrc_0
     54          	UINT uIndex  ;              /* will index into CRC lookup table  */
     55          
     56          	while (usDataLen--)             /* Pass through message buffer       */
     57          	{
     58          		uIndex = uchCRCHi ^ *puchMsg++ ; /* calculate the CRC          */
   \                     ??getcrc_1:
   \   0000000C   9101                       LD      R16,Z+
   \   0000000E   E010                       LDI     R17,0
   \   00000010   2706                       EOR     R16,R22
     59          		uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ;
   \   00000012   01D8                       MOVW    R27 : R26,R17 : R16
   \   00000014   ....                       SUBI    R26,LOW((-(auchCRCHi) & 0xFFFF))
   \   00000016   ....                       SBCI    R27,(-(auchCRCHi) & 0xFFFF) >> 8
   \   00000018   916C                       LD      R22,X
   \   0000001A   2764                       EOR     R22,R20
     60          		uchCRCLo = auchCRCLo[uIndex] ;
   \   0000001C   01D8                       MOVW    R27 : R26,R17 : R16
   \   0000001E   ....                       SUBI    R26,LOW((-(auchCRCLo) & 0xFFFF))
   \   00000020   ....                       SBCI    R27,(-(auchCRCLo) & 0xFFFF) >> 8
   \   00000022   914C                       LD      R20,X
     61          	}
   \                     ??getcrc_0:
   \   00000024   0189                       MOVW    R17 : R16,R19 : R18
   \   00000026   5021                       SUBI    R18,1
   \   00000028   4030                       SBCI    R19,0
   \   0000002A   2B01                       OR      R16,R17
   \   0000002C   F779                       BRNE    ??getcrc_1
     62          	return (uchCRCHi << 8 | uchCRCLo) ;
   \   0000002E   2F04                       MOV     R16,R20
   \   00000030   2F16                       MOV     R17,R22
   \   00000032   2DA0                       MOV     R26,R0
   \   00000034   2FB5                       MOV     R27,R21
   \   00000036   9508                       RET
     63          }//fmbcrc
     64          

   \                                 In segment CODE, align 2, keep-with-next
     65          UINT getcrc_ini(UCHAR *puchMsg, UINT usDataLen, UINT iniCRC)
   \                     getcrc_ini:
     66          {
   \   00000000   2F7B                       MOV     R23,R27
   \   00000002   2E0A                       MOV     R0,R26
   \   00000004   01F8                       MOVW    R31 : R30,R17 : R16
     67              
     68          	UCHAR uchCRCHi = (UCHAR)((iniCRC & 0xFF00)>>8) ; /* high byte of CRC initialized      */
   \   00000006   2F65                       MOV     R22,R21
     69          	UCHAR uchCRCLo = (UCHAR) iniCRC & 0xFF ; /* low byte of CRC initialized       */
   \   00000008   C00C                       RJMP    ??getcrc_ini_0
     70          	UINT uIndex  ;              /* will index into CRC lookup table  */
     71          
     72          	while (usDataLen--)             /* Pass through message buffer       */
     73          	{
     74          		uIndex = uchCRCHi ^ *puchMsg++ ; /* calculate the CRC          */
   \                     ??getcrc_ini_1:
   \   0000000A   9101                       LD      R16,Z+
   \   0000000C   E010                       LDI     R17,0
   \   0000000E   2706                       EOR     R16,R22
     75          		uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ;
   \   00000010   01D8                       MOVW    R27 : R26,R17 : R16
   \   00000012   ....                       SUBI    R26,LOW((-(auchCRCHi) & 0xFFFF))
   \   00000014   ....                       SBCI    R27,(-(auchCRCHi) & 0xFFFF) >> 8
   \   00000016   916C                       LD      R22,X
   \   00000018   2764                       EOR     R22,R20
     76          		uchCRCLo = auchCRCLo[uIndex] ;
   \   0000001A   01D8                       MOVW    R27 : R26,R17 : R16
   \   0000001C   ....                       SUBI    R26,LOW((-(auchCRCLo) & 0xFFFF))
   \   0000001E   ....                       SBCI    R27,(-(auchCRCLo) & 0xFFFF) >> 8
   \   00000020   914C                       LD      R20,X
     77          	}
   \                     ??getcrc_ini_0:
   \   00000022   0189                       MOVW    R17 : R16,R19 : R18
   \   00000024   5021                       SUBI    R18,1
   \   00000026   4030                       SBCI    R19,0
   \   00000028   2B01                       OR      R16,R17
   \   0000002A   F779                       BRNE    ??getcrc_ini_1
     78          	return (uchCRCHi << 8 | uchCRCLo) ;
   \   0000002C   2F04                       MOV     R16,R20
   \   0000002E   2F16                       MOV     R17,R22
   \   00000030   2DA0                       MOV     R26,R0
   \   00000032   2FB7                       MOV     R27,R23
   \   00000034   9508                       RET
     79          }//fmbcrc

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for auchCRCHi>`:
   \   00000000   C1004081C001               DB 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              4180C0014180
   \              C1004081    
   \   00000010   C0014180C100               DB 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              4081C1004081
   \              C0014180    
   \   00000020   C0014180C100               DB 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              4081C1004081
   \              C0014180    
   \   00000030   C1004081C001               DB 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              4180C0014180
   \              C1004081    
   \   00000040   C0014180C100               DB 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              4081C1004081
   \              C0014180    
   \   00000050   C1004081C001               DB 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              4180C0014180
   \              C1004081    
   \   00000060   C1004081C001               DB 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              4180C0014180
   \              C1004081    
   \   00000070   C0014180C100               DB 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              4081C1004081
   \              C0014180    
   \   00000080   C0014180C100               DB 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              4081C1004081
   \              C0014180    
   \   00000090   C1004081C001               DB 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              4180C0014180
   \              C1004081    
   \   000000A0   C1004081C001               DB 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              4180C0014180
   \              C1004081    
   \   000000B0   C0014180C100               DB 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              4081C1004081
   \              C0014180    
   \   000000C0   C1004081C001               DB 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              4180C0014180
   \              C1004081    
   \   000000D0   C0014180C100               DB 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              4081C1004081
   \              C0014180    
   \   000000E0   C0014180C100               DB 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              4081C1004081
   \              C0014180    
   \   000000F0   C1004081C001               DB 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              4180C0014180
   \              C1004081    

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for auchCRCLo>`:
   \   00000000   C00001C103C3               DB 0, 192, 193, 1, 195, 3, 2, 194, 198, 6, 7, 199, 5, 197, 196, 4, 204
   \              C20206C6C707
   \              C50504C4CC  
   \   00000011   0D0C0FCDCECF               DB 12, 13, 205, 15, 207, 206, 14, 10, 202, 203, 11, 201, 9, 8, 200, 216
   \              0A0ECBCAC90B
   \              0809D8C8    
   \   00000021   19181BD9DADB               DB 24, 25, 217, 27, 219, 218, 26, 30, 222, 223, 31, 221, 29, 28, 220
   \              1E1ADFDEDD1F
   \              1C1DDC      
   \   00000030   D41415D517D7               DB 20, 212, 213, 21, 215, 23, 22, 214, 210, 18, 19, 211, 17, 209, 208
   \              D61612D2D313
   \              D111D0      
   \   0000003F   F010313033F1               DB 16, 240, 48, 49, 241, 51, 243, 242, 50, 54, 246, 247, 55, 245, 53
   \              F2F33632F7F6
   \              F53735      
   \   0000004E   F434FC3C3DFD               DB 52, 244, 60, 252, 253, 61, 255, 63, 62, 254, 250, 58, 59, 251, 57
   \              3FFFFE3E3AFA
   \              FB3B39      
   \   0000005D   F8F92838E9E8               DB 249, 248, 56, 40, 232, 233, 41, 235, 43, 42, 234, 238, 46, 47, 239
   \              EB292A2BEEEA
   \              2F2EEF      
   \   0000006C   ED2D2CEC24E4               DB 45, 237, 236, 44, 228, 36, 37, 229, 39, 231, 230, 38, 34, 226, 227
   \              E525E72726E6
   \              E222E3      
   \   0000007B   E1232021A0E0               DB 35, 225, 33, 32, 224, 160, 96, 97, 161, 99, 163, 162, 98, 102, 166
   \              616063A1A2A3
   \              6662A6      
   \   0000008A   67A765A5A464               DB 167, 103, 165, 101, 100, 164, 108, 172, 173, 109, 175, 111, 110, 174
   \              AC6C6DAD6FAF
   \              AE6E        
   \   00000098   6AAAAB6BA969               DB 170, 106, 107, 171, 105, 169, 168, 104, 120, 184, 185, 121, 187, 123
   \              68A8B87879B9
   \              7BBB        
   \   000000A6   BA7A7EBEBF7F               DB 122, 186, 190, 126, 127, 191, 125, 189, 188, 124, 180, 116, 117, 181
   \              BD7D7CBC74B4
   \              B575        
   \   000000B4   B77776B6B272               DB 119, 183, 182, 118, 114, 178, 179, 115, 177, 113, 112, 176, 80, 144
   \              73B371B1B070
   \              9050        
   \   000000C2   519153939252               DB 145, 81, 147, 83, 82, 146, 150, 86, 87, 151, 85, 149, 148, 84, 156
   \              569697579555
   \              54949C      
   \   000000D1   5D5C5F9D9E9F               DB 92, 93, 157, 95, 159, 158, 94, 90, 154, 155, 91, 153, 89, 88, 152
   \              5A5E9B9A995B
   \              585998      
   \   000000E0   488889498B4B               DB 136, 72, 73, 137, 75, 139, 138, 74, 78, 142, 143, 79, 141, 77, 76
   \              4A8A8E4E4F8F
   \              4D8D4C      
   \   000000EF   448C85848745               DB 140, 68, 132, 133, 69, 135, 71, 70, 134, 130, 66, 67, 131, 65, 129
   \              464782864342
   \              418381      
   \   000000FE   4080                       DB 128, 64
     80          

   Maximum stack usage in bytes:

     Function   CSTACK RSTACK
     --------   ------ ------
     getcrc         0      2
     getcrc_ini     0      2


   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     auchCRCHi                     256
     auchCRCLo                     256
     getcrc                         56
     getcrc_ini                     54
     ?<Initializer for auchCRCHi>  256
     ?<Initializer for auchCRCLo>  256
      Others                         7

 
 110 bytes in segment CODE
   7 bytes in segment INITTAB
 512 bytes in segment NEAR_I
 512 bytes in segment NEAR_ID
 
 622 bytes of CODE memory (+ 7 bytes shared)
 512 bytes of DATA memory

Errors: none
Warnings: none
