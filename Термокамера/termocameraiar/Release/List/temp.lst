##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V3.20C/W32             07/Aug/2006  16:02:27 #
# Copyright 1996-2004 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  D:\temp\sys_msap01mk_dev0103\OneWire\temp.c             #
#    Command line =  --cpu=m128 -ms -o D:\temp\sys_msap01mk_dev0103\Release\ #
#                    Obj\ -lCN D:\temp\sys_msap01mk_dev0103\Release\List\    #
#                    -y --initializers_in_flash -s9                          #
#                    -DENABLE_BIT_DEFINITIONS -e -I "F:\Program Files\IAR    #
#                    Systems\Embedded Workbench 3.2\avr\INC\" -I             #
#                    "F:\Program Files\IAR Systems\Embedded Workbench        #
#                    3.2\avr\INC\CLIB\" --eeprom_size 4096                   #
#                    D:\temp\sys_msap01mk_dev0103\OneWire\temp.c             #
#    List file    =  D:\temp\sys_msap01mk_dev0103\Release\List\temp.lst      #
#    Object file  =  D:\temp\sys_msap01mk_dev0103\Release\Obj\temp.r90       #
#                                                                            #
#                                                                            #
##############################################################################

D:\temp\sys_msap01mk_dev0103\OneWire\temp.c
      1          #include <iom128.h>
      2          #include <inavr.h>
      3          //#include <stdio.h>
      4          #define NULL 0
      5          
      6          #include "1wire.h"
      7          #include "1wire_cmd.h"
      8          #include "ow_crc.h"
      9          //#include "LED.h"
     10          #include "delay.h"
     11          
     12          #include "..\types.h"
     13          #include "..\led.h"
     14          #include "..\base.h"
     15          #include "..\timeservice.h"
     16          //#include "..\hist.h"
     17          //#define Var_1
     18          int dtime;
     19          char chmaskout;

   \                                 In segment CODE, align 2, keep-with-next
     20          void set_time(){ // функция фиксации текущего времени и вычисления дельты от предидущей фиксации (в переменной dtime);
   \                     set_time:
   \   00000000   2F79                       MOV     R23,R25
     21          
     22          static unsigned int oldtime=0;
     23          int newt;
     24            __disable_interrupt();
   \   00000002   94F8                       CLI
     25             newt=time;  
   \   00000004   ....                       LDI     R30,LOW(time)
   \   00000006   ....                       LDI     R31,(time) >> 8
   \   00000008   8100                       LD      R16,Z
   \   0000000A   8111                       LDD     R17,Z+1
     26            __enable_interrupt();
   \   0000000C   9478                       SEI
     27            dtime=newt-oldtime;
   \   0000000E   ....                       LDI     R30,LOW(??count)
   \   00000010   ....                       LDI     R31,(??count) >> 8
   \   00000012   8126                       LDD     R18,Z+6
   \   00000014   8137                       LDD     R19,Z+7
   \   00000016   01A8                       MOVW    R21 : R20,R17 : R16
   \   00000018   1B42                       SUB     R20,R18
   \   0000001A   0B53                       SBC     R21,R19
   \   0000001C   8344                       STD     Z+4,R20
   \   0000001E   8355                       STD     Z+5,R21
     28            if (dtime<=0){dtime +=0x8000;}
   \   00000020   2F95                       MOV     R25,R21
   \   00000022   3041                       CPI     R20,1
   \   00000024   4090                       SBCI    R25,0
   \   00000026   F424                       BRGE    ??set_time_0
   \   00000028   2F35                       MOV     R19,R21
   \   0000002A   5830                       SUBI    R19,128
   \   0000002C   8344                       STD     Z+4,R20
   \   0000002E   8335                       STD     Z+5,R19
     29            oldtime=newt;
   \                     ??set_time_0:
   \   00000030   8306                       STD     Z+6,R16
   \   00000032   8317                       STD     Z+7,R17
     30            return;
   \   00000034   2F97                       MOV     R25,R23
   \   00000036   9508                       RET
     31          }
     32          
     33          extern unsigned char dowcrc;
     34          extern unsigned char flag0;
     35          extern unsigned char flag;
     36          

   \                                 In segment CODE, align 2, keep-with-next
     37          unsigned char start_meas( void )
   \                     start_meas:
     38          {
   \   00000000   938A                       ST      -Y,R24
   \   00000002   9724                       SBIW    R29 : R28,4
     39            unsigned char com[4] = {CONVERT_T,CONVERT_T,CONVERT_T,CONVERT_T};
   \   00000004   ....                       LDI     R30,LOW(`?<Constant {(unsigned char)'D', (unsigned char`)
   \   00000006   ....                       LDI     R31,HIGH(`?<Constant {(unsigned char)'D', (unsigned char`)
   \   00000008   ....                       LDI     R19,(`?<Constant {(unsigned char)'D', (unsigned char`) >> 16
   \   0000000A   018E                       MOVW    R17 : R16,R29 : R28
   \   0000000C   E044                       LDI     R20,4
   \   0000000E   E050                       LDI     R21,0
   \   00000010   ........                   CALL    ?ML_FLASH_SRAM_24EC_16_L07
     40            unsigned char tmp =0;
   \   00000014   E080                       LDI     R24,0
     41            if (ch1_in) 
   \   00000016   9B0F                       SBIS    0x01,0x07
   \   00000018   C003                       RJMP    ??start_meas_0
     42              {
     43                tmp =1;
   \   0000001A   E081                       LDI     R24,1
     44                com[0] = CONVERT_T;
   \   0000001C   E404                       LDI     R16,68
   \   0000001E   8308                       ST      Y,R16
     45              }
     46            if (ch2_in) 
   \                     ??start_meas_0:
   \   00000020   9B0E                       SBIS    0x01,0x06
   \   00000022   C003                       RJMP    ??start_meas_1
     47              {
     48                tmp |= 2;
   \   00000024   6082                       ORI     R24,0x02
     49                com[1] = CONVERT_T;
   \   00000026   E404                       LDI     R16,68
   \   00000028   8309                       STD     Y+1,R16
     50              }
     51            if (ch3_in) 
   \                     ??start_meas_1:
   \   0000002A   9B0D                       SBIS    0x01,0x05
   \   0000002C   C003                       RJMP    ??start_meas_2
     52              {
     53                tmp |= 4;
   \   0000002E   6084                       ORI     R24,0x04
     54                com[2] = CONVERT_T;
   \   00000030   E404                       LDI     R16,68
   \   00000032   830A                       STD     Y+2,R16
     55              }
     56            if (ch4_in) 
   \                     ??start_meas_2:
   \   00000034   9B0C                       SBIS    0x01,0x04
   \   00000036   C003                       RJMP    ??start_meas_3
     57              {
     58                tmp |= 8;
   \   00000038   6088                       ORI     R24,0x08
     59                com[3] = CONVERT_T;
   \   0000003A   E404                       LDI     R16,68
   \   0000003C   830B                       STD     Y+3,R16
     60              };
     61            if (tmp)
   \                     ??start_meas_3:
   \   0000003E   2388                       TST     R24
   \   00000040   F0A1                       BREQ    ??start_meas_4
     62            { 
     63              //подтяжка должна быть включена не позднее чем через 10 мкс после команды
     64              //****************?? после окончания записи 0 ?
     65          //    pwrf=1;
     66              w1_command( com, NULL );
   \   00000042   E020                       LDI     R18,0
   \   00000044   E030                       LDI     R19,0
   \   00000046   018E                       MOVW    R17 : R16,R29 : R28
   \   00000048   ........                   CALL    w1_command
     67          //    if (tmp & 0x01) pwr1_on; 
     68          //    if (tmp & 0x02) pwr2_on; 
     69          //    if (tmp & 0x04) pwr3_on; 
     70          //    if (tmp & 0x08) pwr4_on;// parasite power on
     71              set_time();// засечем время преобразования 
   \   0000004C   ....                       RCALL   set_time
     72              
     73          //    delay__(15*800000); !!!!!!!!!!!!!
     74              if (flag) return 0;
   \   0000004E   9100....                   LDS     R16,flag
   \   00000052   2300                       TST     R16
   \   00000054   F011                       BREQ    ??start_meas_5
   \   00000056   E000                       LDI     R16,0
   \   00000058   C009                       RJMP    ??start_meas_6
     75              pwr1_off; pwr2_off; pwr3_off; pwr4_off;// parasite power off
   \                     ??start_meas_5:
   \   0000005A   9ADF                       SBI     0x1B,0x07
   \   0000005C   9ADD                       SBI     0x1B,0x05
   \   0000005E   9AD9                       SBI     0x1B,0x01
   \   00000060   91000062                   LDS     R16,98
   \   00000064   6001                       ORI     R16,0x01
   \   00000066   93000062                   STS     98,R16
     76            }
     77            else
     78            {
     79              //uputsnl( "Short Circuit !" );
     80              
     81            }
     82            return tmp;
   \                     ??start_meas_4:
   \   0000006A   2F08                       MOV     R16,R24
   \                     ??start_meas_6:
   \   0000006C   9624                       ADIW    R29 : R28,4
   \   0000006E   9189                       LD      R24,Y+
   \   00000070   9508                       RET
     83          }
     84          
     85          
     86          extern unsigned char f_read;

   \                                 In segment CODE, align 2, keep-with-next
     87          void read_meas( void )
   \                     read_meas:
     88          {
   \   00000000   92FA                       ST      -Y,R15
   \   00000002   92EA                       ST      -Y,R14
   \   00000004   92DA                       ST      -Y,R13
   \   00000006   92CA                       ST      -Y,R12
   \   00000008   92BA                       ST      -Y,R11
   \   0000000A   92AA                       ST      -Y,R10
   \   0000000C   929A                       ST      -Y,R9
   \   0000000E   928A                       ST      -Y,R8
   \   00000010   927A                       ST      -Y,R7
   \   00000012   926A                       ST      -Y,R6
   \   00000014   925A                       ST      -Y,R5
   \   00000016   924A                       ST      -Y,R4
   \   00000018   93BA                       ST      -Y,R27
   \   0000001A   93AA                       ST      -Y,R26
   \   0000001C   939A                       ST      -Y,R25
   \   0000001E   938A                       ST      -Y,R24
   \   00000020                              REQUIRE ?Register_R4_is_cg_reg
   \   00000020                              REQUIRE ?Register_R5_is_cg_reg
   \   00000020                              REQUIRE ?Register_R6_is_cg_reg
   \   00000020                              REQUIRE ?Register_R7_is_cg_reg
   \   00000020                              REQUIRE ?Register_R8_is_cg_reg
   \   00000020                              REQUIRE ?Register_R9_is_cg_reg
   \   00000020                              REQUIRE ?Register_R10_is_cg_reg
   \   00000020                              REQUIRE ?Register_R11_is_cg_reg
   \   00000020                              REQUIRE ?Register_R12_is_cg_reg
   \   00000020                              REQUIRE ?Register_R13_is_cg_reg
   \   00000020                              REQUIRE ?Register_R14_is_cg_reg
   \   00000020                              REQUIRE ?Register_R15_is_cg_reg
   \   00000020   9768                       SBIW    R29 : R28,24
     89            unsigned char sbyte[4];
     90            static unsigned char  scratchpad[4][9];//???
     91            static unsigned char n_read[4] = {0, 0, 0, 0};//счетчик числа запросов от датчика
     92            static unsigned char count[4] ={0,0,0,0};//номера текущего датчика к обработке. 32 - все считаны
     93            static chmask=0;
     94            unsigned char i, j;
     95            unsigned int  tmp;
     96            int temp;
     97          
     98            
     99          while ((count[0]<33) || (count[1]<32) || (count[2]<32) || (count[3]<32))
   \   00000022   ....                       LDI     R26,LOW(??count)
   \   00000024   ....                       LDI     R27,(??count) >> 8
   \   00000026   910C                       LD      R16,X
   \   00000028   3201                       CPI     R16,33
   \   0000002A   F158                       BRCS    ??read_meas_0
   \   0000002C   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000002E   8101                       LDD     R16,Z+1
   \   00000030   3200                       CPI     R16,32
   \   00000032   F138                       BRCS    ??read_meas_0
   \   00000034   8102                       LDD     R16,Z+2
   \   00000036   3200                       CPI     R16,32
   \   00000038   F120                       BRCS    ??read_meas_0
   \   0000003A   8103                       LDD     R16,Z+3
   \   0000003C   3200                       CPI     R16,32
   \   0000003E   F108                       BRCS    ??read_meas_0
    100          {
    101             while(count[0]<32)
    102             { 
    103                   if (isempty(0x180+4*count[0])==0) break;
    104                   count[0]++;
    105             };
    106             if((dev_ver_heat==0)&(count[0]==32)){//считываем температуру внутреннего датчика
    107                count[0]=33;//идентифицирует состояние считывания температуры внутреннего датчика
    108             }
    109             
    110             while(count[1]<32)
    111             { 
    112                   if (isempty(0x200+4*count[1])==0) break;
    113                   count[1]++;
    114             }
    115             while(count[2]<32)
    116             { 
    117                   if (isempty(0x280+4*count[2])==0) break;
    118                   count[2]++;
    119             }
    120             while(count[3]<32)
    121             { 
    122                   if (isempty(0x300+4*count[3])==0) break;
    123                   count[3]++;
    124             }
    125             
    126              //tmp = 0;  обработка ошибок типа кз или отсутствия датчика
    127              w1_reset(0x0f);
    128              
    129          
    130              
    131              sbyte[0] = sbyte[1] = sbyte[2] = sbyte[3] = MATCH_ROM;
    132              w1_byte_wr( sbyte,0 );
    133              
    134              for (i = 0; i < 4; i ++)
    135                {
    136                  sbyte[0] = hrem[0x180 + 4*count[0] +i];
    137                  sbyte[1] = hrem[0x200 + 4*count[1] +i];
    138                  sbyte[2] = hrem[0x280 + 4*count[2] +i];
    139                  sbyte[3] = hrem[0x300 + 4*count[3] +i];
    140                  if (count[0]==33)sbyte[0]=hrem[0x170+i];  //считываем внутренний датчик
    141                  w1_byte_wr( sbyte,0 );
    142                  
    143                  sbyte[0] = hrem[0x180 + 4*count[0] +i]>>8;
    144                  sbyte[1] = hrem[0x200 + 4*count[1] +i]>>8;
    145                  sbyte[2] = hrem[0x280 + 4*count[2] +i]>>8;
    146                  sbyte[3] = hrem[0x300 + 4*count[3] +i]>>8;
    147                  if (count[0]==33)sbyte[0]=hrem[0x170+i]>>8;  //считываем внутренний датчик
    148                  w1_byte_wr( sbyte,0 );
    149                  
    150                }
    151              
    152                sbyte[0] = sbyte[1] = sbyte[2] = sbyte[3] = READ; 
    153                w1_byte_wr( sbyte,0);			// read command
    154                
    155                for (i= 0; i < 9; i ++)
    156                  {
    157                    w1_byte_rd(sbyte);
    158                    scratchpad[0][i] = sbyte[0];
    159                    scratchpad[1][i] = sbyte[1];
    160                    scratchpad[2][i] = sbyte[2];
    161                    scratchpad[3][i] = sbyte[3];
    162                  }
    163             if(count[0]==33){ //считываем внутренний датчик температуры
    164                       dowcrc = 0;
    165                       for (i = 0; i < 9; i ++) { CRC(scratchpad[0][i]); }
    166                       if (!(dowcrc)&&(scratchpad[0][7]!=0)){//crc сошлось,(+проверка на нулевые данные ) обработаем внутреннюю температуру
    167                          count[0]=34; //состояние - внутреннюю температуру тоже обработали
    168                          hrem[0x175]= scratchpad[0][0]+(scratchpad[0][1] << 8);
    169                          ramb[dev_status] &=~(1<<eheat); 
    170                          if ((int)hrem[0x175]<(int)hrem[0x174]) {heaton }
    171                          else goto errheat;
    172                       }else {
    173          errheat:
    174                          ramb[dev_status] |=1<<eheat; 
    175                          heatoff; 
    176                       } 
    177             }
    178             for (j=0;j<4;j++)
    179             { 
    180                if (count[j]<32)
    181                {char stad; //переменная для адреса регистра статуса, содержащего бит с этим датчиком
    182                 int alad;
    183          //         stad=0x10+j*2+(count[j]>>1);
    184                     stad=0x10+j*2+(count[j]>>4); //вычислили адрес регистра статуса
    185          //         if((tmp&(1<<j))==0)
    186                   if((dev_status&(1<<j))==0) // идем дальше, если статус шлейфа в норме
    187                   {
    188          //             addh(0x321);
    189          //             addh(j);
    190          //             addh(count[j]);
    191                       temp = scratchpad[j][0];
    192                       temp |= (unsigned int) scratchpad[j][1] << 8;
    193          
    194          /*
    195                       temp = scratchpad[j][2];
    196                       temp |= (unsigned int) scratchpad[j][3] << 8;             
    197          */             
    198                       dowcrc = 0;
    199                       for (i = 0; i < 9; i ++) { CRC(scratchpad[j][i]); }
    200                       if ((!(dowcrc))&&(scratchpad[j][7]!=0) ) 
    201                       {int intt,dtemp;
    202          //                 addh(0x322);
    203                          
    204                           if (temp==0xaa)
    205                           {  //температура 85град возможен сбой
    206          //                    addh(j);
    207            //                  addh(count[j]);
    208              //                addh(0xaa01);
    209                //              addh(ramb[4]);
    210                  //            addh(ramb[0x14]);
    211                              if ( scratchpad[j][6]==0x0c){ //было КЗ или обрыв 
    212                                goto to_first_convert;
    213                              }
    214                              if ( (ramb[stad]&(1<<(count[j] & 0x0f)))==0) 
    215                              {  //addh(0xaa02);
    216                                 if ((ramb[stad-0x10]&(1<<(count[j] & 0x0f)))!=0) { goto temp_ok;}
    217                                 else {ramb[stad-0x10] |=1<<(count[j] & 0x0f); }//установили флаг - датчик уже был 1 раз опрошен
    218                                 goto to_first_convert;
    219                              }   
    220                           }
    221          temp_ok:          
    222          //                addh(0x9999);
    223          //                addh(temp);         
    224          //                addh(stad);
    225                          dtemp= temp-ramb[0x20 + count[j]+ 32*j];//вычисляем прирост температуры
    226                          ramb[0x20 + count[j]+ 32*j] = temp;
    227          //                if (count[j] < 16) ramb[0x10+j*2] |= (unsigned int)(1<<count[j]);
    228          //                else ramb[0x11+j*2] |= (unsigned int) (1<<(count[j] & 0x0f));
    229          
    230                          
    231                          tmp=hrem[0x380+count[j]+j*32];
    232                          if ( (temp/2)>=(signed char)(tmp&0xff) )
    233                          {  
    234                              if (count[j] < 16) 
    235                              {  intt = hrem[0x160+j*2]|(1<<count[j]);
    236                                 if (intt!=hrem[0x160+j*2]) setrg(0x160+j*2,intt);
    237                              }else 
    238                              {  intt = hrem[0x161+j*2]|(1<<(count[j]& 0x0f));
    239                                  if (intt!=hrem[0x161+j*2]) setrg(0x161+j*2,intt);
    240                              };
    241                          }else
    242                          {  
    243                             if (count[j] < 16) 
    244                             {  intt = hrem[0x160+j*2]&~(1<<count[j]);
    245                                if ((intt!=hrem[0x160+j*2])&&((hrem[0x17f]&(1<<j))==0))          
    246                                                           setrg(0x160+j*2,intt); //отключение аларма если не 
    247                                                                                 //включен режим защелки
    248                             }else
    249                             {  intt = hrem[0x161+j*2]&~(1<<(count[j]& 0x0f));
    250                                    if ((intt!=hrem[0x161+j*2])&&((hrem[0x17f]&(1<<j))==0)) setrg(0x161+j*2,intt);
    251                             };
    252                          };      
    253                          if( (ramb[stad] &(1<< (count[j] & 0x0f) ))==0 ) goto after_speed;//связи с датчиком не было, измерения пропускаем 
    254                          alad=0x168+j*2+(count[j]>>4); // адрес сигналов превышения тмпературы
    255                          if (dtemp>0){ 
    256                             //вычисляем скорость изменения температуры
    257          //                   dtime=dtime>>2;
    258                             {int vtemp;
    259                                vtemp=(dtemp*255)/(dtime>>2);
    260          //                      ramb[0x0e]=vtemp;
    261          //                      addh(0x1111);
    262          //                      addh(vtemp);
    263          //                      addh(dtime);
    264          //                      addh(dtemp);
    265                                if ((vtemp>>1)>=(tmp>>8))//сработал сигнал превышения порога по скорости нарастания
    266                                {  int intt; 
    267          //                           addh(0x2222);
    268                                     
    269                                     intt = hrem[alad]|(1<<(count[j]&0x0f));
    270          //                           addh(alad);
    271          //                           addh(intt);
    272                                     if (intt!=hrem[alad]) setrg(alad,intt);
    273                                }else goto lowspeed;
    274                              }  
    275                          }else{
    276          lowspeed:
    277                             intt = hrem[alad]&~(1<<(count[j]&0x0f));
    278                             if ( (intt!=hrem[alad])&&((hrem[0x17f]&(1<<(j+8)))==0) )          
    279                                                           setrg(alad,intt); //отключение аларма если не 
    280                                                                                 //включен режим защелки                 
    281                          }
    282          after_speed:                  
    283                          ramb[stad] |=1<<(count[j] & 0x0f);// установили флаг - связь с датчиком установлена
    284                       }else
    285                       { //crc не сошлось;
    286                         n_read[j]++;
    287                         if (n_read[j] > hrem[0x104])
    288                         {    // число попыток истекло
    289                                chmask|=1<<j;
    290          //                    if (count[j] < 16) ramb[0x10+j*2] &= ~((unsigned int)(1<<count[j]));
    291          //                    else ramb[0x11+j*2] &= ~((unsigned int) (1<<(count[j] & 0x0f)));
    292                                ramb[stad] &= ~((unsigned int) (1<<(count[j] & 0x0f)));
    293                                ramb[stad-0x10] &= ~((unsigned int) (1<<(count[j] & 0x0f))); //!!!! обнулили статус - было первое включение
    294                              n_read[j] = 0;
    295                         }else
    296                         {
    297                           count[j] --;
    298                         }
    299                       }  
    300                   }else 
    301                   { 
    302          //               if (count[j] < 16) ramb[0x10+j*2] &= ~((unsigned int)(1<<count[j]));
    303          //               else ramb[0x11+j*2] &= ~((unsigned int) (1<<(count[j] & 0x0f)));
    304          
    305                         ramb[stad] &= ~((unsigned int) (1<<(count[j] & 0x0f)));               
    306                         ramb[stad-0x10] &= ~((unsigned int) (1<<(count[j] & 0x0f)));  //обнуляем также бит проверки на 1-е включение.             
    307                          n_read[j] = 0;
    308                   }     
    309                }     
    310          to_first_convert: 
    311                  
    312             count[j]++;
    313             } //end for
    314              __watchdog_reset();
    315              return;
    316          }//end while
    317            count[0] = 0;
   \   00000040   E000                       LDI     R16,0
   \   00000042   930C                       ST      X,R16
    318            count[1] = 0;
   \   00000044   8301                       STD     Z+1,R16
    319            count[2] = 0;
   \   00000046   8302                       STD     Z+2,R16
    320            count[3] = 0;
   \   00000048   8303                       STD     Z+3,R16
    321            f_read = 0;
   \   0000004A   9300....                   STS     f_read,R16
    322            chmaskout=chmask;
   \   0000004E   8500                       LDD     R16,Z+8
   \   00000050   8702                       STD     Z+10,R16
    323          
    324            chmask=0;
   \   00000052   E000                       LDI     R16,0
   \   00000054   8700                       STD     Z+8,R16
   \   00000056   8701                       STD     Z+9,R16
    325          };
   \                     ??read_meas_1:
   \   00000058   9668                       ADIW    R29 : R28,24
   \   0000005A   9189                       LD      R24,Y+
   \   0000005C   9199                       LD      R25,Y+
   \   0000005E   91A9                       LD      R26,Y+
   \   00000060   91B9                       LD      R27,Y+
   \   00000062   9049                       LD      R4,Y+
   \   00000064   9059                       LD      R5,Y+
   \   00000066   9069                       LD      R6,Y+
   \   00000068   9079                       LD      R7,Y+
   \   0000006A   9089                       LD      R8,Y+
   \   0000006C   9099                       LD      R9,Y+
   \   0000006E   90A9                       LD      R10,Y+
   \   00000070   90B9                       LD      R11,Y+
   \   00000072   90C9                       LD      R12,Y+
   \   00000074   90D9                       LD      R13,Y+
   \   00000076   90E9                       LD      R14,Y+
   \   00000078   90F9                       LD      R15,Y+
   \   0000007A   9508                       RET
   \                     ??read_meas_2:
   \   0000007C   910C                       LD      R16,X
   \   0000007E   9503                       INC     R16
   \   00000080   930C                       ST      X,R16
   \                     ??read_meas_0:
   \   00000082   910C                       LD      R16,X
   \   00000084   3200                       CPI     R16,32
   \   00000086   F448                       BRCC    ??read_meas_3
   \   00000088   E014                       LDI     R17,4
   \   0000008A   9F01                       MUL     R16,R17
   \   0000008C   0180                       MOVW    R17 : R16,R1 : R0
   \   0000008E   5800                       SUBI    R16,128
   \   00000090   4F1E                       SBCI    R17,254
   \   00000092   ........                   CALL    isempty
   \   00000096   2300                       TST     R16
   \   00000098   F789                       BRNE    ??read_meas_2
   \                     ??read_meas_3:
   \   0000009A   9986                       SBIC    0x10,0x06
   \   0000009C   C00A                       RJMP    ??read_meas_4
   \   0000009E   910C                       LD      R16,X
   \   000000A0   3200                       CPI     R16,32
   \   000000A2   F439                       BRNE    ??read_meas_4
   \   000000A4   E201                       LDI     R16,33
   \   000000A6   930C                       ST      X,R16
   \   000000A8   C004                       RJMP    ??read_meas_4
   \                     ??read_meas_5:
   \   000000AA   01FD                       MOVW    R31 : R30,R27 : R26
   \   000000AC   8101                       LDD     R16,Z+1
   \   000000AE   9503                       INC     R16
   \   000000B0   8301                       STD     Z+1,R16
   \                     ??read_meas_4:
   \   000000B2   01FD                       MOVW    R31 : R30,R27 : R26
   \   000000B4   8101                       LDD     R16,Z+1
   \   000000B6   3200                       CPI     R16,32
   \   000000B8   F448                       BRCC    ??read_meas_6
   \   000000BA   E014                       LDI     R17,4
   \   000000BC   9F01                       MUL     R16,R17
   \   000000BE   E002                       LDI     R16,2
   \   000000C0   1E10                       ADC     R1,R16
   \   000000C2   0180                       MOVW    R17 : R16,R1 : R0
   \   000000C4   ........                   CALL    isempty
   \   000000C8   2300                       TST     R16
   \   000000CA   F779                       BRNE    ??read_meas_5
   \                     ??read_meas_6:
   \   000000CC   01FD                       MOVW    R31 : R30,R27 : R26
   \   000000CE   8102                       LDD     R16,Z+2
   \   000000D0   3200                       CPI     R16,32
   \   000000D2   F4A0                       BRCC    ??read_meas_7
   \   000000D4   E014                       LDI     R17,4
   \   000000D6   9F01                       MUL     R16,R17
   \   000000D8   E800                       LDI     R16,128
   \   000000DA   0E00                       ADD     R0,R16
   \   000000DC   E002                       LDI     R16,2
   \   000000DE   1E10                       ADC     R1,R16
   \   000000E0   0180                       MOVW    R17 : R16,R1 : R0
   \   000000E2   ........                   CALL    isempty
   \   000000E6   2300                       TST     R16
   \   000000E8   F049                       BREQ    ??read_meas_7
   \   000000EA   01FD                       MOVW    R31 : R30,R27 : R26
   \   000000EC   8102                       LDD     R16,Z+2
   \   000000EE   9503                       INC     R16
   \   000000F0   8302                       STD     Z+2,R16
   \   000000F2   CFEC                       RJMP    ??read_meas_6
   \                     ??read_meas_8:
   \   000000F4   01FD                       MOVW    R31 : R30,R27 : R26
   \   000000F6   8103                       LDD     R16,Z+3
   \   000000F8   9503                       INC     R16
   \   000000FA   8303                       STD     Z+3,R16
   \                     ??read_meas_7:
   \   000000FC   01FD                       MOVW    R31 : R30,R27 : R26
   \   000000FE   8103                       LDD     R16,Z+3
   \   00000100   3200                       CPI     R16,32
   \   00000102   F448                       BRCC    ??read_meas_9
   \   00000104   E014                       LDI     R17,4
   \   00000106   9F01                       MUL     R16,R17
   \   00000108   E003                       LDI     R16,3
   \   0000010A   1E10                       ADC     R1,R16
   \   0000010C   0180                       MOVW    R17 : R16,R1 : R0
   \   0000010E   ........                   CALL    isempty
   \   00000112   2300                       TST     R16
   \   00000114   F779                       BRNE    ??read_meas_8
   \                     ??read_meas_9:
   \   00000116   E00F                       LDI     R16,15
   \   00000118   ........                   CALL    w1_reset
   \   0000011C   E505                       LDI     R16,85
   \   0000011E   830B                       STD     Y+3,R16
   \   00000120   830A                       STD     Y+2,R16
   \   00000122   8309                       STD     Y+1,R16
   \   00000124   8308                       ST      Y,R16
   \   00000126   E020                       LDI     R18,0
   \   00000128   018E                       MOVW    R17 : R16,R29 : R28
   \   0000012A   ........                   CALL    w1_byte_wr
   \   0000012E   E800                       LDI     R16,128
   \   00000130   2EA0                       MOV     R10,R16
   \   00000132   E001                       LDI     R16,1
   \   00000134   2EB0                       MOV     R11,R16
   \   00000136   ....                       LDI     R24,LOW((hrem + 736))
   \   00000138   ....                       LDI     R25,(hrem + 736) >> 8
   \   0000013A   E004                       LDI     R16,4
   \   0000013C   2EC0                       MOV     R12,R16
   \   0000013E   014E                       MOVW    R9 : R8,R29 : R28
   \   00000140   0C8B                       ADD     R8,R11
   \   00000142   E000                       LDI     R16,0
   \   00000144   1E90                       ADC     R9,R16
   \   00000146   013E                       MOVW    R7 : R6,R29 : R28
   \   00000148   E002                       LDI     R16,2
   \   0000014A   0E60                       ADD     R6,R16
   \   0000014C   E000                       LDI     R16,0
   \   0000014E   1E70                       ADC     R7,R16
   \   00000150   012E                       MOVW    R5 : R4,R29 : R28
   \   00000152   E003                       LDI     R16,3
   \   00000154   0E40                       ADD     R4,R16
   \   00000156   E000                       LDI     R16,0
   \   00000158   1E50                       ADC     R5,R16
   \                     ??read_meas_10:
   \   0000015A   911C                       LD      R17,X
   \   0000015C   E004                       LDI     R16,4
   \   0000015E   9F10                       MUL     R17,R16
   \   00000160   0C0A                       ADD     R0,R10
   \   00000162   1C1B                       ADC     R1,R11
   \   00000164   0C00                       LSL     R0
   \   00000166   1C11                       ROL     R1
   \   00000168   01F0                       MOVW    R31 : R30,R1 : R0
   \   0000016A   ....                       SUBI    R30,LOW((-(hrem) & 0xFFFF))
   \   0000016C   ....                       SBCI    R31,(-(hrem) & 0xFFFF) >> 8
   \   0000016E   8100                       LD      R16,Z
   \   00000170   8308                       ST      Y,R16
   \   00000172   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000174   8111                       LDD     R17,Z+1
   \   00000176   E004                       LDI     R16,4
   \   00000178   9F10                       MUL     R17,R16
   \   0000017A   0C0A                       ADD     R0,R10
   \   0000017C   1C1B                       ADC     R1,R11
   \   0000017E   E800                       LDI     R16,128
   \   00000180   0E00                       ADD     R0,R16
   \   00000182   E000                       LDI     R16,0
   \   00000184   1E10                       ADC     R1,R16
   \   00000186   0C00                       LSL     R0
   \   00000188   1C11                       ROL     R1
   \   0000018A   01F0                       MOVW    R31 : R30,R1 : R0
   \   0000018C   ....                       SUBI    R30,LOW((-(hrem) & 0xFFFF))
   \   0000018E   ....                       SBCI    R31,(-(hrem) & 0xFFFF) >> 8
   \   00000190   8100                       LD      R16,Z
   \   00000192   01F4                       MOVW    R31 : R30,R9 : R8
   \   00000194   8300                       ST      Z,R16
   \   00000196   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000198   8112                       LDD     R17,Z+2
   \   0000019A   E004                       LDI     R16,4
   \   0000019C   9F10                       MUL     R17,R16
   \   0000019E   0C0A                       ADD     R0,R10
   \   000001A0   1C1B                       ADC     R1,R11
   \   000001A2   E000                       LDI     R16,0
   \   000001A4   0E00                       ADD     R0,R16
   \   000001A6   E001                       LDI     R16,1
   \   000001A8   1E10                       ADC     R1,R16
   \   000001AA   0C00                       LSL     R0
   \   000001AC   1C11                       ROL     R1
   \   000001AE   01F0                       MOVW    R31 : R30,R1 : R0
   \   000001B0   ....                       SUBI    R30,LOW((-(hrem) & 0xFFFF))
   \   000001B2   ....                       SBCI    R31,(-(hrem) & 0xFFFF) >> 8
   \   000001B4   8100                       LD      R16,Z
   \   000001B6   01F3                       MOVW    R31 : R30,R7 : R6
   \   000001B8   8300                       ST      Z,R16
   \   000001BA   01FD                       MOVW    R31 : R30,R27 : R26
   \   000001BC   8113                       LDD     R17,Z+3
   \   000001BE   E004                       LDI     R16,4
   \   000001C0   9F10                       MUL     R17,R16
   \   000001C2   0C0A                       ADD     R0,R10
   \   000001C4   1C1B                       ADC     R1,R11
   \   000001C6   E800                       LDI     R16,128
   \   000001C8   0E00                       ADD     R0,R16
   \   000001CA   E001                       LDI     R16,1
   \   000001CC   1E10                       ADC     R1,R16
   \   000001CE   0C00                       LSL     R0
   \   000001D0   1C11                       ROL     R1
   \   000001D2   01F0                       MOVW    R31 : R30,R1 : R0
   \   000001D4   ....                       SUBI    R30,LOW((-(hrem) & 0xFFFF))
   \   000001D6   ....                       SBCI    R31,(-(hrem) & 0xFFFF) >> 8
   \   000001D8   8100                       LD      R16,Z
   \   000001DA   01F2                       MOVW    R31 : R30,R5 : R4
   \   000001DC   8300                       ST      Z,R16
   \   000001DE   910C                       LD      R16,X
   \   000001E0   3201                       CPI     R16,33
   \   000001E2   F419                       BRNE    ??read_meas_11
   \   000001E4   01FC                       MOVW    R31 : R30,R25 : R24
   \   000001E6   8100                       LD      R16,Z
   \   000001E8   8308                       ST      Y,R16
   \                     ??read_meas_11:
   \   000001EA   E020                       LDI     R18,0
   \   000001EC   018E                       MOVW    R17 : R16,R29 : R28
   \   000001EE   ........                   CALL    w1_byte_wr
   \   000001F2   911C                       LD      R17,X
   \   000001F4   E004                       LDI     R16,4
   \   000001F6   9F10                       MUL     R17,R16
   \   000001F8   0C0A                       ADD     R0,R10
   \   000001FA   1C1B                       ADC     R1,R11
   \   000001FC   0C00                       LSL     R0
   \   000001FE   1C11                       ROL     R1
   \   00000200   01F0                       MOVW    R31 : R30,R1 : R0
   \   00000202   ....                       SUBI    R30,LOW((-(hrem) & 0xFFFF))
   \   00000204   ....                       SBCI    R31,(-(hrem) & 0xFFFF) >> 8
   \   00000206   8111                       LDD     R17,Z+1
   \   00000208   8318                       ST      Y,R17
   \   0000020A   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000020C   8111                       LDD     R17,Z+1
   \   0000020E   9F10                       MUL     R17,R16
   \   00000210   0C0A                       ADD     R0,R10
   \   00000212   1C1B                       ADC     R1,R11
   \   00000214   E800                       LDI     R16,128
   \   00000216   0E00                       ADD     R0,R16
   \   00000218   E000                       LDI     R16,0
   \   0000021A   1E10                       ADC     R1,R16
   \   0000021C   0C00                       LSL     R0
   \   0000021E   1C11                       ROL     R1
   \   00000220   01F0                       MOVW    R31 : R30,R1 : R0
   \   00000222   ....                       SUBI    R30,LOW((-(hrem) & 0xFFFF))
   \   00000224   ....                       SBCI    R31,(-(hrem) & 0xFFFF) >> 8
   \   00000226   8111                       LDD     R17,Z+1
   \   00000228   01F4                       MOVW    R31 : R30,R9 : R8
   \   0000022A   8310                       ST      Z,R17
   \   0000022C   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000022E   8112                       LDD     R17,Z+2
   \   00000230   E004                       LDI     R16,4
   \   00000232   9F10                       MUL     R17,R16
   \   00000234   0C0A                       ADD     R0,R10
   \   00000236   1C1B                       ADC     R1,R11
   \   00000238   E000                       LDI     R16,0
   \   0000023A   0E00                       ADD     R0,R16
   \   0000023C   E001                       LDI     R16,1
   \   0000023E   1E10                       ADC     R1,R16
   \   00000240   0C00                       LSL     R0
   \   00000242   1C11                       ROL     R1
   \   00000244   01F0                       MOVW    R31 : R30,R1 : R0
   \   00000246   ....                       SUBI    R30,LOW((-(hrem) & 0xFFFF))
   \   00000248   ....                       SBCI    R31,(-(hrem) & 0xFFFF) >> 8
   \   0000024A   8111                       LDD     R17,Z+1
   \   0000024C   01F3                       MOVW    R31 : R30,R7 : R6
   \   0000024E   8310                       ST      Z,R17
   \   00000250   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000252   8113                       LDD     R17,Z+3
   \   00000254   E004                       LDI     R16,4
   \   00000256   9F10                       MUL     R17,R16
   \   00000258   0C0A                       ADD     R0,R10
   \   0000025A   1C1B                       ADC     R1,R11
   \   0000025C   E800                       LDI     R16,128
   \   0000025E   0E00                       ADD     R0,R16
   \   00000260   E001                       LDI     R16,1
   \   00000262   1E10                       ADC     R1,R16
   \   00000264   0C00                       LSL     R0
   \   00000266   1C11                       ROL     R1
   \   00000268   01F0                       MOVW    R31 : R30,R1 : R0
   \   0000026A   ....                       SUBI    R30,LOW((-(hrem) & 0xFFFF))
   \   0000026C   ....                       SBCI    R31,(-(hrem) & 0xFFFF) >> 8
   \   0000026E   8111                       LDD     R17,Z+1
   \   00000270   01F2                       MOVW    R31 : R30,R5 : R4
   \   00000272   8310                       ST      Z,R17
   \   00000274   910C                       LD      R16,X
   \   00000276   3201                       CPI     R16,33
   \   00000278   F419                       BRNE    ??read_meas_12
   \   0000027A   01FC                       MOVW    R31 : R30,R25 : R24
   \   0000027C   8111                       LDD     R17,Z+1
   \   0000027E   8318                       ST      Y,R17
   \                     ??read_meas_12:
   \   00000280   E020                       LDI     R18,0
   \   00000282   018E                       MOVW    R17 : R16,R29 : R28
   \   00000284   ........                   CALL    w1_byte_wr
   \   00000288   9602                       ADIW    R25 : R24,2
   \   0000028A   E001                       LDI     R16,1
   \   0000028C   0EA0                       ADD     R10,R16
   \   0000028E   E000                       LDI     R16,0
   \   00000290   1EB0                       ADC     R11,R16
   \   00000292   94CA                       DEC     R12
   \   00000294   F009                       BREQ    $+2+2
   \   00000296   CF61                       RJMP    ??read_meas_10
   \   00000298   EB0E                       LDI     R16,190
   \   0000029A   830B                       STD     Y+3,R16
   \   0000029C   830A                       STD     Y+2,R16
   \   0000029E   8309                       STD     Y+1,R16
   \   000002A0   8308                       ST      Y,R16
   \   000002A2   E020                       LDI     R18,0
   \   000002A4   018E                       MOVW    R17 : R16,R29 : R28
   \   000002A6   ........                   CALL    w1_byte_wr
   \   000002AA   ....                       LDI     R24,LOW(??scratchpad)
   \   000002AC   ....                       LDI     R25,(??scratchpad) >> 8
   \   000002AE   013C                       MOVW    R7 : R6,R25 : R24
   \   000002B0   E009                       LDI     R16,9
   \   000002B2   2E40                       MOV     R4,R16
   \                     ??read_meas_13:
   \   000002B4   018E                       MOVW    R17 : R16,R29 : R28
   \   000002B6   ........                   CALL    w1_byte_rd
   \   000002BA   8108                       LD      R16,Y
   \   000002BC   01F3                       MOVW    R31 : R30,R7 : R6
   \   000002BE   8300                       ST      Z,R16
   \   000002C0   8109                       LDD     R16,Y+1
   \   000002C2   8701                       STD     Z+9,R16
   \   000002C4   810A                       LDD     R16,Y+2
   \   000002C6   8B02                       STD     Z+18,R16
   \   000002C8   810B                       LDD     R16,Y+3
   \   000002CA   8F03                       STD     Z+27,R16
   \   000002CC   E001                       LDI     R16,1
   \   000002CE   0E60                       ADD     R6,R16
   \   000002D0   E000                       LDI     R16,0
   \   000002D2   1E70                       ADC     R7,R16
   \   000002D4   944A                       DEC     R4
   \   000002D6   F771                       BRNE    ??read_meas_13
   \   000002D8   ....                       LDI     R16,LOW(ramb)
   \   000002DA   2E80                       MOV     R8,R16
   \   000002DC   ....                       LDI     R16,(ramb) >> 8
   \   000002DE   2E90                       MOV     R9,R16
   \   000002E0   910C                       LD      R16,X
   \   000002E2   3201                       CPI     R16,33
   \   000002E4   F5F9                       BRNE    ??read_meas_14
   \   000002E6   E000                       LDI     R16,0
   \   000002E8   9300....                   STS     dowcrc,R16
   \   000002EC   012C                       MOVW    R5 : R4,R25 : R24
   \   000002EE   E009                       LDI     R16,9
   \   000002F0   2E60                       MOV     R6,R16
   \                     ??read_meas_15:
   \   000002F2   01F2                       MOVW    R31 : R30,R5 : R4
   \   000002F4   9101                       LD      R16,Z+
   \   000002F6   012F                       MOVW    R5 : R4,R31 : R30
   \   000002F8   ........                   CALL    CRC
   \   000002FC   946A                       DEC     R6
   \   000002FE   F7C9                       BRNE    ??read_meas_15
   \   00000300   9100....                   LDS     R16,dowcrc
   \   00000304   2300                       TST     R16
   \   00000306   F519                       BRNE    ??read_meas_16
   \   00000308   01FC                       MOVW    R31 : R30,R25 : R24
   \   0000030A   8107                       LDD     R16,Z+7
   \   0000030C   2300                       TST     R16
   \   0000030E   F0F9                       BREQ    ??read_meas_16
   \   00000310   E202                       LDI     R16,34
   \   00000312   930C                       ST      X,R16
   \   00000314   8120                       LD      R18,Z
   \   00000316   8111                       LDD     R17,Z+1
   \   00000318   ....                       LDI     R30,LOW((hrem + 746))
   \   0000031A   ....                       LDI     R31,(hrem + 746) >> 8
   \   0000031C   8320                       ST      Z,R18
   \   0000031E   8311                       STD     Z+1,R17
   \   00000320   01F4                       MOVW    R31 : R30,R9 : R8
   \   00000322   A900                       LDD     R16,Z+48
   \   00000324   A911                       LDD     R17,Z+49
   \   00000326   0F00                       LSL     R16
   \   00000328   1F11                       ROL     R17
   \   0000032A   0FE0                       ADD     R30,R16
   \   0000032C   1FF1                       ADC     R31,R17
   \   0000032E   8101                       LDD     R16,Z+1
   \   00000330   7F0B                       ANDI    R16,0xFB
   \   00000332   8301                       STD     Z+1,R16
   \   00000334   ....                       LDI     R30,LOW((hrem + 746))
   \   00000336   ....                       LDI     R31,(hrem + 746) >> 8
   \   00000338   8100                       LD      R16,Z
   \   0000033A   8111                       LDD     R17,Z+1
   \   0000033C   ....                       LDI     R30,LOW((hrem + 744))
   \   0000033E   ....                       LDI     R31,(hrem + 744) >> 8
   \   00000340   8120                       LD      R18,Z
   \   00000342   8131                       LDD     R19,Z+1
   \   00000344   1702                       CP      R16,R18
   \   00000346   0713                       CPC     R17,R19
   \   00000348   F414                       BRGE    ??read_meas_16
   \   0000034A   9A1A                       SBI     0x03,0x02
   \   0000034C   C00B                       RJMP    ??read_meas_14
   \                     ??read_meas_16:
   \   0000034E   01F4                       MOVW    R31 : R30,R9 : R8
   \   00000350   A900                       LDD     R16,Z+48
   \   00000352   A911                       LDD     R17,Z+49
   \   00000354   0F00                       LSL     R16
   \   00000356   1F11                       ROL     R17
   \   00000358   0FE0                       ADD     R30,R16
   \   0000035A   1FF1                       ADC     R31,R17
   \   0000035C   8101                       LDD     R16,Z+1
   \   0000035E   6004                       ORI     R16,0x04
   \   00000360   8301                       STD     Z+1,R16
   \   00000362   981A                       CBI     0x03,0x02
   \                     ??read_meas_14:
   \   00000364   24BB                       CLR     R11
   \   00000366   017D                       MOVW    R15 : R14,R27 : R26
   \   00000368   018D                       MOVW    R17 : R16,R27 : R26
   \   0000036A   5F05                       SUBI    R16,245
   \   0000036C   4F1F                       SBCI    R17,255
   \   0000036E   870A                       STD     Y+10,R16
   \   00000370   871B                       STD     Y+11,R17
   \   00000372   82BE                       STD     Y+6,R11
   \   00000374   82BF                       STD     Y+7,R11
   \   00000376   ....                       LDI     R16,LOW((hrem + 704))
   \   00000378   ....                       LDI     R17,(hrem + 704) >> 8
   \   0000037A   830C                       STD     Y+4,R16
   \   0000037C   831D                       STD     Y+5,R17
   \   0000037E   8788                       STD     Y+8,R24
   \   00000380   8799                       STD     Y+9,R25
   \   00000382   E200                       LDI     R16,32
   \   00000384   870C                       STD     Y+12,R16
   \   00000386   86BD                       STD     Y+13,R11
   \                     ??read_meas_17:
   \   00000388   01F7                       MOVW    R31 : R30,R15 : R14
   \   0000038A   8120                       LD      R18,Z
   \   0000038C   3220                       CPI     R18,32
   \   0000038E   F008                       BRCS    $+2+2
   \   00000390   C1D6                       RJMP    ??read_meas_18
   \   00000392   2F02                       MOV     R16,R18
   \   00000394   9502                       SWAP    R16
   \   00000396   700F                       ANDI    R16,0x0F
   \   00000398   2D8B                       MOV     R24,R11
   \   0000039A   0F88                       LSL     R24
   \   0000039C   0F80                       ADD     R24,R16
   \   0000039E   5F80                       SUBI    R24,240
   \   000003A0   E001                       LDI     R16,1
   \   000003A2   E010                       LDI     R17,0
   \   000003A4   2D4B                       MOV     R20,R11
   \   000003A6   ........                   CALL    ?S_SHL_L02
   \   000003AA   870E                       STD     Y+14,R16
   \   000003AC   871F                       STD     Y+15,R17
   \   000003AE   01F4                       MOVW    R31 : R30,R9 : R8
   \   000003B0   A900                       LDD     R16,Z+48
   \   000003B2   A911                       LDD     R17,Z+49
   \   000003B4   854E                       LDD     R20,Y+14
   \   000003B6   855F                       LDD     R21,Y+15
   \   000003B8   2340                       AND     R20,R16
   \   000003BA   2351                       AND     R21,R17
   \   000003BC   2B45                       OR      R20,R21
   \   000003BE   F009                       BREQ    $+2+2
   \   000003C0   C191                       RJMP    ??read_meas_19
   \   000003C2   85E8                       LDD     R30,Y+8
   \   000003C4   85F9                       LDD     R31,Y+9
   \   000003C6   80C0                       LD      R12,Z
   \   000003C8   80D1                       LDD     R13,Z+1
   \   000003CA   E000                       LDI     R16,0
   \   000003CC   9300....                   STS     dowcrc,R16
   \   000003D0   012F                       MOVW    R5 : R4,R31 : R30
   \   000003D2   E099                       LDI     R25,9
   \                     ??read_meas_20:
   \   000003D4   01F2                       MOVW    R31 : R30,R5 : R4
   \   000003D6   9101                       LD      R16,Z+
   \   000003D8   012F                       MOVW    R5 : R4,R31 : R30
   \   000003DA   ........                   CALL    CRC
   \   000003DE   959A                       DEC     R25
   \   000003E0   F7C9                       BRNE    ??read_meas_20
   \   000003E2   E090                       LDI     R25,0
   \   000003E4   018C                       MOVW    R17 : R16,R25 : R24
   \   000003E6   5100                       SUBI    R16,16
   \   000003E8   4010                       SBCI    R17,0
   \   000003EA   0F00                       LSL     R16
   \   000003EC   1F11                       ROL     R17
   \   000003EE   0194                       MOVW    R19 : R18,R9 : R8
   \   000003F0   0F20                       ADD     R18,R16
   \   000003F2   1F31                       ADC     R19,R17
   \   000003F4   0F88                       LSL     R24
   \   000003F6   1F99                       ROL     R25
   \   000003F8   0184                       MOVW    R17 : R16,R9 : R8
   \   000003FA   0F08                       ADD     R16,R24
   \   000003FC   1F19                       ADC     R17,R25
   \   000003FE   8B08                       STD     Y+16,R16
   \   00000400   8B19                       STD     Y+17,R17
   \   00000402   9100....                   LDS     R16,dowcrc
   \   00000406   2300                       TST     R16
   \   00000408   F009                       BREQ    $+2+2
   \   0000040A   C133                       RJMP    ??read_meas_21
   \   0000040C   85E8                       LDD     R30,Y+8
   \   0000040E   85F9                       LDD     R31,Y+9
   \   00000410   8107                       LDD     R16,Z+7
   \   00000412   2300                       TST     R16
   \   00000414   F409                       BRNE    $+2+2
   \   00000416   C12D                       RJMP    ??read_meas_21
   \   00000418   EA0A                       LDI     R16,170
   \   0000041A   16C0                       CP      R12,R16
   \   0000041C   E000                       LDI     R16,0
   \   0000041E   06D0                       CPC     R13,R16
   \   00000420   F509                       BRNE    ??read_meas_22
   \   00000422   8106                       LDD     R16,Z+6
   \   00000424   300C                       CPI     R16,12
   \   00000426   F409                       BRNE    $+2+2
   \   00000428   C18A                       RJMP    ??read_meas_18
   \   0000042A   E001                       LDI     R16,1
   \   0000042C   E010                       LDI     R17,0
   \   0000042E   01F7                       MOVW    R31 : R30,R15 : R14
   \   00000430   8140                       LD      R20,Z
   \   00000432   704F                       ANDI    R20,0x0F
   \   00000434   ........                   CALL    ?S_SHL_L02
   \   00000438   89E8                       LDD     R30,Y+16
   \   0000043A   89F9                       LDD     R31,Y+17
   \   0000043C   8140                       LD      R20,Z
   \   0000043E   8151                       LDD     R21,Z+1
   \   00000440   2340                       AND     R20,R16
   \   00000442   2351                       AND     R21,R17
   \   00000444   2B45                       OR      R20,R21
   \   00000446   F471                       BRNE    ??read_meas_22
   \   00000448   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000044A   8140                       LD      R20,Z
   \   0000044C   8151                       LDD     R21,Z+1
   \   0000044E   2340                       AND     R20,R16
   \   00000450   2351                       AND     R21,R17
   \   00000452   2B45                       OR      R20,R21
   \   00000454   F439                       BRNE    ??read_meas_22
   \                     ??read_meas_23:
   \   00000456   8120                       LD      R18,Z
   \   00000458   8131                       LDD     R19,Z+1
   \   0000045A   2B20                       OR      R18,R16
   \   0000045C   2B31                       OR      R19,R17
   \   0000045E   8320                       ST      Z,R18
   \   00000460   8331                       STD     Z+1,R19
   \   00000462   C16D                       RJMP    ??read_meas_18
   \                     ??read_meas_22:
   \   00000464   852C                       LDD     R18,Y+12
   \   00000466   853D                       LDD     R19,Y+13
   \   00000468   01F7                       MOVW    R31 : R30,R15 : R14
   \   0000046A   8100                       LD      R16,Z
   \   0000046C   E010                       LDI     R17,0
   \   0000046E   0F02                       ADD     R16,R18
   \   00000470   1F13                       ADC     R17,R19
   \   00000472   0F00                       LSL     R16
   \   00000474   1F11                       ROL     R17
   \   00000476   01F4                       MOVW    R31 : R30,R9 : R8
   \   00000478   0FE0                       ADD     R30,R16
   \   0000047A   1FF1                       ADC     R31,R17
   \   0000047C   8100                       LD      R16,Z
   \   0000047E   8111                       LDD     R17,Z+1
   \   00000480   0196                       MOVW    R19 : R18,R13 : R12
   \   00000482   1B20                       SUB     R18,R16
   \   00000484   0B31                       SBC     R19,R17
   \   00000486   8B2C                       STD     Y+20,R18
   \   00000488   8B3D                       STD     Y+21,R19
   \   0000048A   82C0                       ST      Z,R12
   \   0000048C   82D1                       STD     Z+1,R13
   \   0000048E   01F7                       MOVW    R31 : R30,R15 : R14
   \   00000490   80A0                       LD      R10,Z
   \   00000492   852C                       LDD     R18,Y+12
   \   00000494   853D                       LDD     R19,Y+13
   \   00000496   2D0A                       MOV     R16,R10
   \   00000498   E010                       LDI     R17,0
   \   0000049A   0F02                       ADD     R16,R18
   \   0000049C   1F13                       ADC     R17,R19
   \   0000049E   5A00                       SUBI    R16,160
   \   000004A0   4F1C                       SBCI    R17,252
   \   000004A2   0F00                       LSL     R16
   \   000004A4   1F11                       ROL     R17
   \   000004A6   01F8                       MOVW    R31 : R30,R17 : R16
   \   000004A8   ....                       SUBI    R30,LOW((-(hrem) & 0xFFFF))
   \   000004AA   ....                       SBCI    R31,(-(hrem) & 0xFFFF) >> 8
   \   000004AC   8100                       LD      R16,Z
   \   000004AE   8111                       LDD     R17,Z+1
   \   000004B0   8B0E                       STD     Y+22,R16
   \   000004B2   8B1F                       STD     Y+23,R17
   \   000004B4   E001                       LDI     R16,1
   \   000004B6   E010                       LDI     R17,0
   \   000004B8   2D4A                       MOV     R20,R10
   \   000004BA   704F                       ANDI    R20,0x0F
   \   000004BC   ........                   CALL    ?S_SHL_L02
   \   000004C0   0128                       MOVW    R5 : R4,R17 : R16
   \   000004C2   E001                       LDI     R16,1
   \   000004C4   E010                       LDI     R17,0
   \   000004C6   2D4A                       MOV     R20,R10
   \   000004C8   ........                   CALL    ?S_SHL_L02
   \   000004CC   0138                       MOVW    R7 : R6,R17 : R16
   \   000004CE   810E                       LDD     R16,Y+6
   \   000004D0   811F                       LDD     R17,Y+7
   \   000004D2   590F                       SUBI    R16,159
   \   000004D4   4F1E                       SBCI    R17,254
   \   000004D6   8B0A                       STD     Y+18,R16
   \   000004D8   8B1B                       STD     Y+19,R17
   \   000004DA   818E                       LDD     R24,Y+6
   \   000004DC   819F                       LDD     R25,Y+7
   \   000004DE   5A80                       SUBI    R24,160
   \   000004E0   4F9E                       SBCI    R25,254
   \   000004E2   0186                       MOVW    R17 : R16,R13 : R12
   \   000004E4   E042                       LDI     R20,2
   \   000004E6   E050                       LDI     R21,0
   \   000004E8   ........                   CALL    ?SS_DIVMOD_L02
   \   000004EC   892E                       LDD     R18,Y+22
   \   000004EE   2F32                       MOV     R19,R18
   \   000004F0   0F33                       LSL     R19
   \   000004F2   0B33                       SBC     R19,R19
   \   000004F4   1702                       CP      R16,R18
   \   000004F6   0713                       CPC     R17,R19
   \   000004F8   E100                       LDI     R16,16
   \   000004FA   F0BC                       BRLT    ??read_meas_24
   \   000004FC   16A0                       CP      R10,R16
   \   000004FE   81EC                       LDD     R30,Y+4
   \   00000500   81FD                       LDD     R31,Y+5
   \   00000502   F450                       BRCC    ??read_meas_25
   \   00000504   8100                       LD      R16,Z
   \   00000506   8111                       LDD     R17,Z+1
   \   00000508   2A60                       OR      R6,R16
   \   0000050A   2A71                       OR      R7,R17
   \   0000050C   0193                       MOVW    R19 : R18,R7 : R6
   \   0000050E   1720                       CP      R18,R16
   \   00000510   0731                       CPC     R19,R17
   \   00000512   F1E1                       BREQ    ??read_meas_26
   \                     ??read_meas_27:
   \   00000514   018C                       MOVW    R17 : R16,R25 : R24
   \   00000516   C038                       RJMP    ??read_meas_28
   \                     ??read_meas_25:
   \   00000518   8102                       LDD     R16,Z+2
   \   0000051A   8113                       LDD     R17,Z+3
   \   0000051C   2A40                       OR      R4,R16
   \   0000051E   2A51                       OR      R5,R17
   \   00000520   0192                       MOVW    R19 : R18,R5 : R4
   \   00000522   1720                       CP      R18,R16
   \   00000524   0731                       CPC     R19,R17
   \   00000526   F191                       BREQ    ??read_meas_26
   \   00000528   C02D                       RJMP    ??read_meas_29
   \                     ??read_meas_24:
   \   0000052A   16A0                       CP      R10,R16
   \   0000052C   81EC                       LDD     R30,Y+4
   \   0000052E   81FD                       LDD     R31,Y+5
   \   00000530   F4A8                       BRCC    ??read_meas_30
   \   00000532   8100                       LD      R16,Z
   \   00000534   8111                       LDD     R17,Z+1
   \   00000536   9460                       COM     R6
   \   00000538   9470                       COM     R7
   \   0000053A   2260                       AND     R6,R16
   \   0000053C   2271                       AND     R7,R17
   \   0000053E   0193                       MOVW    R19 : R18,R7 : R6
   \   00000540   1720                       CP      R18,R16
   \   00000542   0731                       CPC     R19,R17
   \   00000544   F119                       BREQ    ??read_meas_26
   \   00000546   ....                       LDI     R30,LOW((hrem + 766))
   \   00000548   ....                       LDI     R31,(hrem + 766) >> 8
   \   0000054A   8100                       LD      R16,Z
   \   0000054C   8111                       LDD     R17,Z+1
   \   0000054E   854E                       LDD     R20,Y+14
   \   00000550   855F                       LDD     R21,Y+15
   \   00000552   2340                       AND     R20,R16
   \   00000554   2351                       AND     R21,R17
   \   00000556   2B45                       OR      R20,R21
   \   00000558   F4C9                       BRNE    ??read_meas_26
   \   0000055A   CFDC                       RJMP    ??read_meas_27
   \                     ??read_meas_30:
   \   0000055C   8102                       LDD     R16,Z+2
   \   0000055E   8113                       LDD     R17,Z+3
   \   00000560   9440                       COM     R4
   \   00000562   9450                       COM     R5
   \   00000564   2240                       AND     R4,R16
   \   00000566   2251                       AND     R5,R17
   \   00000568   0192                       MOVW    R19 : R18,R5 : R4
   \   0000056A   1720                       CP      R18,R16
   \   0000056C   0731                       CPC     R19,R17
   \   0000056E   F071                       BREQ    ??read_meas_26
   \   00000570   ....                       LDI     R30,LOW((hrem + 766))
   \   00000572   ....                       LDI     R31,(hrem + 766) >> 8
   \   00000574   8100                       LD      R16,Z
   \   00000576   8111                       LDD     R17,Z+1
   \   00000578   854E                       LDD     R20,Y+14
   \   0000057A   855F                       LDD     R21,Y+15
   \   0000057C   2340                       AND     R20,R16
   \   0000057E   2351                       AND     R21,R17
   \   00000580   2B45                       OR      R20,R21
   \   00000582   F421                       BRNE    ??read_meas_26
   \                     ??read_meas_29:
   \   00000584   890A                       LDD     R16,Y+18
   \   00000586   891B                       LDD     R17,Y+19
   \                     ??read_meas_28:
   \   00000588   ........                   CALL    setrg
   \                     ??read_meas_26:
   \   0000058C   01F7                       MOVW    R31 : R30,R15 : R14
   \   0000058E   8120                       LD      R18,Z
   \   00000590   E001                       LDI     R16,1
   \   00000592   E010                       LDI     R17,0
   \   00000594   2F42                       MOV     R20,R18
   \   00000596   704F                       ANDI    R20,0x0F
   \   00000598   ........                   CALL    ?S_SHL_L02
   \   0000059C   0128                       MOVW    R5 : R4,R17 : R16
   \   0000059E   89E8                       LDD     R30,Y+16
   \   000005A0   89F9                       LDD     R31,Y+17
   \   000005A2   8100                       LD      R16,Z
   \   000005A4   8111                       LDD     R17,Z+1
   \   000005A6   2104                       AND     R16,R4
   \   000005A8   2115                       AND     R17,R5
   \   000005AA   2B01                       OR      R16,R17
   \   000005AC   F409                       BRNE    $+2+2
   \   000005AE   C057                       RJMP    ??read_meas_31
   \   000005B0   9522                       SWAP    R18
   \   000005B2   702F                       ANDI    R18,0x0F
   \   000005B4   E030                       LDI     R19,0
   \   000005B6   818E                       LDD     R24,Y+6
   \   000005B8   819F                       LDD     R25,Y+7
   \   000005BA   0F82                       ADD     R24,R18
   \   000005BC   1F93                       ADC     R25,R19
   \   000005BE   5988                       SUBI    R24,152
   \   000005C0   4F9E                       SBCI    R25,254
   \   000005C2   890C                       LDD     R16,Y+20
   \   000005C4   891D                       LDD     R17,Y+21
   \   000005C6   3001                       CPI     R16,1
   \   000005C8   4010                       SBCI    R17,0
   \   000005CA   F13C                       BRLT    ??read_meas_32
   \   000005CC   2F20                       MOV     R18,R16
   \   000005CE   893D                       LDD     R19,Y+21
   \   000005D0   EF0F                       LDI     R16,255
   \   000005D2   9F03                       MUL     R16,R19
   \   000005D4   2D10                       MOV     R17,R0
   \   000005D6   9F02                       MUL     R16,R18
   \   000005D8   2D00                       MOV     R16,R0
   \   000005DA   0D11                       ADD     R17,R1
   \   000005DC   01FD                       MOVW    R31 : R30,R27 : R26
   \   000005DE   8144                       LDD     R20,Z+4
   \   000005E0   8155                       LDD     R21,Z+5
   \   000005E2   9555                       ASR     R21
   \   000005E4   9547                       ROR     R20
   \   000005E6   9555                       ASR     R21
   \   000005E8   9547                       ROR     R20
   \   000005EA   ........                   CALL    ?SS_DIVMOD_L02
   \   000005EE   9515                       ASR     R17
   \   000005F0   9507                       ROR     R16
   \   000005F2   892F                       LDD     R18,Y+23
   \   000005F4   1702                       CP      R16,R18
   \   000005F6   4010                       SBCI    R17,0
   \   000005F8   F080                       BRCS    ??read_meas_32
   \   000005FA   ....                       LDI     R30,LOW(hrem)
   \   000005FC   ....                       LDI     R31,(hrem) >> 8
   \   000005FE   018C                       MOVW    R17 : R16,R25 : R24
   \   00000600   0F00                       LSL     R16
   \   00000602   1F11                       ROL     R17
   \   00000604   0FE0                       ADD     R30,R16
   \   00000606   1FF1                       ADC     R31,R17
   \   00000608   8100                       LD      R16,Z
   \   0000060A   8111                       LDD     R17,Z+1
   \   0000060C   2A40                       OR      R4,R16
   \   0000060E   2A51                       OR      R5,R17
   \   00000610   0192                       MOVW    R19 : R18,R5 : R4
   \   00000612   1720                       CP      R18,R16
   \   00000614   0731                       CPC     R19,R17
   \   00000616   F119                       BREQ    ??read_meas_31
   \   00000618   C01F                       RJMP    ??read_meas_33
   \                     ??read_meas_32:
   \   0000061A   ....                       LDI     R30,LOW(hrem)
   \   0000061C   ....                       LDI     R31,(hrem) >> 8
   \   0000061E   018C                       MOVW    R17 : R16,R25 : R24
   \   00000620   0F00                       LSL     R16
   \   00000622   1F11                       ROL     R17
   \   00000624   0FE0                       ADD     R30,R16
   \   00000626   1FF1                       ADC     R31,R17
   \   00000628   8100                       LD      R16,Z
   \   0000062A   8111                       LDD     R17,Z+1
   \   0000062C   0192                       MOVW    R19 : R18,R5 : R4
   \   0000062E   9520                       COM     R18
   \   00000630   9530                       COM     R19
   \   00000632   2320                       AND     R18,R16
   \   00000634   2331                       AND     R19,R17
   \   00000636   1720                       CP      R18,R16
   \   00000638   0731                       CPC     R19,R17
   \   0000063A   F089                       BREQ    ??read_meas_31
   \   0000063C   ....                       LDI     R30,LOW((hrem + 766))
   \   0000063E   ....                       LDI     R31,(hrem + 766) >> 8
   \   00000640   8160                       LD      R22,Z
   \   00000642   8171                       LDD     R23,Z+1
   \   00000644   E001                       LDI     R16,1
   \   00000646   E010                       LDI     R17,0
   \   00000648   2D4B                       MOV     R20,R11
   \   0000064A   5F48                       SUBI    R20,248
   \   0000064C   ........                   CALL    ?S_SHL_L02
   \   00000650   2306                       AND     R16,R22
   \   00000652   2317                       AND     R17,R23
   \   00000654   2B01                       OR      R16,R17
   \   00000656   F419                       BRNE    ??read_meas_31
   \                     ??read_meas_33:
   \   00000658   018C                       MOVW    R17 : R16,R25 : R24
   \   0000065A   ........                   CALL    setrg
   \                     ??read_meas_31:
   \   0000065E   E001                       LDI     R16,1
   \   00000660   E010                       LDI     R17,0
   \   00000662   01F7                       MOVW    R31 : R30,R15 : R14
   \   00000664   8140                       LD      R20,Z
   \   00000666   704F                       ANDI    R20,0x0F
   \   00000668   ........                   CALL    ?S_SHL_L02
   \   0000066C   89E8                       LDD     R30,Y+16
   \   0000066E   89F9                       LDD     R31,Y+17
   \   00000670   CEF2                       RJMP    ??read_meas_23
   \                     ??read_meas_21:
   \   00000672   85EA                       LDD     R30,Y+10
   \   00000674   85FB                       LDD     R31,Y+11
   \   00000676   8100                       LD      R16,Z
   \   00000678   9503                       INC     R16
   \   0000067A   8300                       ST      Z,R16
   \   0000067C   ....                       LDI     R30,LOW((hrem + 520))
   \   0000067E   ....                       LDI     R31,(hrem + 520) >> 8
   \   00000680   8140                       LD      R20,Z
   \   00000682   8151                       LDD     R21,Z+1
   \   00000684   85EA                       LDD     R30,Y+10
   \   00000686   85FB                       LDD     R31,Y+11
   \   00000688   8100                       LD      R16,Z
   \   0000068A   1740                       CP      R20,R16
   \   0000068C   4050                       SBCI    R21,0
   \   0000068E   F528                       BRCC    ??read_meas_34
   \   00000690   850E                       LDD     R16,Y+14
   \   00000692   851F                       LDD     R17,Y+15
   \   00000694   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000696   8540                       LDD     R20,Z+8
   \   00000698   8551                       LDD     R21,Z+9
   \   0000069A   2B40                       OR      R20,R16
   \   0000069C   2B51                       OR      R21,R17
   \   0000069E   8740                       STD     Z+8,R20
   \   000006A0   8751                       STD     Z+9,R21
   \   000006A2   E001                       LDI     R16,1
   \   000006A4   E010                       LDI     R17,0
   \   000006A6   01F7                       MOVW    R31 : R30,R15 : R14
   \   000006A8   8140                       LD      R20,Z
   \   000006AA   704F                       ANDI    R20,0x0F
   \   000006AC   ........                   CALL    ?S_SHL_L02
   \   000006B0   9500                       COM     R16
   \   000006B2   9510                       COM     R17
   \   000006B4   89E8                       LDD     R30,Y+16
   \   000006B6   89F9                       LDD     R31,Y+17
   \   000006B8   8140                       LD      R20,Z
   \   000006BA   8151                       LDD     R21,Z+1
   \   000006BC   2340                       AND     R20,R16
   \   000006BE   2351                       AND     R21,R17
   \   000006C0   8340                       ST      Z,R20
   \   000006C2   8351                       STD     Z+1,R21
   \   000006C4   E001                       LDI     R16,1
   \   000006C6   E010                       LDI     R17,0
   \   000006C8   01F7                       MOVW    R31 : R30,R15 : R14
   \   000006CA   8140                       LD      R20,Z
   \   000006CC   704F                       ANDI    R20,0x0F
   \   000006CE   ........                   CALL    ?S_SHL_L02
   \   000006D2   9500                       COM     R16
   \   000006D4   9510                       COM     R17
   \   000006D6   01F9                       MOVW    R31 : R30,R19 : R18
   \   000006D8   C028                       RJMP    ??read_meas_35
   \                     ??read_meas_34:
   \   000006DA   01F7                       MOVW    R31 : R30,R15 : R14
   \   000006DC   8100                       LD      R16,Z
   \   000006DE   950A                       DEC     R16
   \   000006E0   8300                       ST      Z,R16
   \   000006E2   C02D                       RJMP    ??read_meas_18
   \                     ??read_meas_19:
   \   000006E4   E090                       LDI     R25,0
   \   000006E6   E001                       LDI     R16,1
   \   000006E8   E010                       LDI     R17,0
   \   000006EA   702F                       ANDI    R18,0x0F
   \   000006EC   2F42                       MOV     R20,R18
   \   000006EE   ........                   CALL    ?S_SHL_L02
   \   000006F2   9500                       COM     R16
   \   000006F4   9510                       COM     R17
   \   000006F6   019C                       MOVW    R19 : R18,R25 : R24
   \   000006F8   0F22                       LSL     R18
   \   000006FA   1F33                       ROL     R19
   \   000006FC   0FE2                       ADD     R30,R18
   \   000006FE   1FF3                       ADC     R31,R19
   \   00000700   8120                       LD      R18,Z
   \   00000702   8131                       LDD     R19,Z+1
   \   00000704   2320                       AND     R18,R16
   \   00000706   2331                       AND     R19,R17
   \   00000708   8320                       ST      Z,R18
   \   0000070A   8331                       STD     Z+1,R19
   \   0000070C   E001                       LDI     R16,1
   \   0000070E   E010                       LDI     R17,0
   \   00000710   01F7                       MOVW    R31 : R30,R15 : R14
   \   00000712   8140                       LD      R20,Z
   \   00000714   704F                       ANDI    R20,0x0F
   \   00000716   ........                   CALL    ?S_SHL_L02
   \   0000071A   9500                       COM     R16
   \   0000071C   9510                       COM     R17
   \   0000071E   9740                       SBIW    R25 : R24,16
   \   00000720   0F88                       LSL     R24
   \   00000722   1F99                       ROL     R25
   \   00000724   01F4                       MOVW    R31 : R30,R9 : R8
   \   00000726   0FE8                       ADD     R30,R24
   \   00000728   1FF9                       ADC     R31,R25
   \                     ??read_meas_35:
   \   0000072A   8120                       LD      R18,Z
   \   0000072C   8131                       LDD     R19,Z+1
   \   0000072E   2320                       AND     R18,R16
   \   00000730   2331                       AND     R19,R17
   \   00000732   8320                       ST      Z,R18
   \   00000734   8331                       STD     Z+1,R19
   \   00000736   E020                       LDI     R18,0
   \   00000738   85EA                       LDD     R30,Y+10
   \   0000073A   85FB                       LDD     R31,Y+11
   \   0000073C   8320                       ST      Z,R18
   \                     ??read_meas_18:
   \   0000073E   01F7                       MOVW    R31 : R30,R15 : R14
   \   00000740   8100                       LD      R16,Z
   \   00000742   9503                       INC     R16
   \   00000744   8300                       ST      Z,R16
   \   00000746   94B3                       INC     R11
   \   00000748   850C                       LDD     R16,Y+12
   \   0000074A   851D                       LDD     R17,Y+13
   \   0000074C   5E00                       SUBI    R16,224
   \   0000074E   4F1F                       SBCI    R17,255
   \   00000750   870C                       STD     Y+12,R16
   \   00000752   871D                       STD     Y+13,R17
   \   00000754   8508                       LDD     R16,Y+8
   \   00000756   8519                       LDD     R17,Y+9
   \   00000758   5F07                       SUBI    R16,247
   \   0000075A   4F1F                       SBCI    R17,255
   \   0000075C   8708                       STD     Y+8,R16
   \   0000075E   8719                       STD     Y+9,R17
   \   00000760   810C                       LDD     R16,Y+4
   \   00000762   811D                       LDD     R17,Y+5
   \   00000764   5F0C                       SUBI    R16,252
   \   00000766   4F1F                       SBCI    R17,255
   \   00000768   830C                       STD     Y+4,R16
   \   0000076A   831D                       STD     Y+5,R17
   \   0000076C   810E                       LDD     R16,Y+6
   \   0000076E   811F                       LDD     R17,Y+7
   \   00000770   5F0E                       SUBI    R16,254
   \   00000772   4F1F                       SBCI    R17,255
   \   00000774   830E                       STD     Y+6,R16
   \   00000776   831F                       STD     Y+7,R17
   \   00000778   850A                       LDD     R16,Y+10
   \   0000077A   851B                       LDD     R17,Y+11
   \   0000077C   5F0F                       SUBI    R16,255
   \   0000077E   4F1F                       SBCI    R17,255
   \   00000780   870A                       STD     Y+10,R16
   \   00000782   871B                       STD     Y+11,R17
   \   00000784   E001                       LDI     R16,1
   \   00000786   0EE0                       ADD     R14,R16
   \   00000788   E000                       LDI     R16,0
   \   0000078A   1EF0                       ADC     R15,R16
   \   0000078C   E004                       LDI     R16,4
   \   0000078E   16B0                       CP      R11,R16
   \   00000790   F408                       BRCC    $+2+2
   \   00000792   CDFA                       RJMP    ??read_meas_17
   \   00000794   95A8                       WDR
   \   00000796   CC60                       RJMP    ??read_meas_1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??count:
   \   00000000                              DS 4
   \                     dtime:
   \   00000004                              DS 2
   \   00000006                              DS 2
   \   00000008                              DS 2
   \                     chmaskout:
   \   0000000A                              DS 1
   \   0000000B                              DS 4

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??scratchpad:
   \   00000000                              DS 36
    326          
    327          
    328          
    329          
    330          
    331          
    332          
    333          

   \                                 In segment CODE, align 2, keep-with-next
    334          void search(unsigned char *line_mask, unsigned char id[8])
   \                     search:
    335          {
   \   00000000   925A                       ST      -Y,R5
   \   00000002   924A                       ST      -Y,R4
   \   00000004   93BA                       ST      -Y,R27
   \   00000006   93AA                       ST      -Y,R26
   \   00000008   939A                       ST      -Y,R25
   \   0000000A   938A                       ST      -Y,R24
   \   0000000C                              REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                              REQUIRE ?Register_R5_is_cg_reg
   \   0000000C   0128                       MOVW    R5 : R4,R17 : R16
   \   0000000E   01C9                       MOVW    R25 : R24,R19 : R18
    336            unsigned char i;
    337            static unsigned char diff;
    338            if (*line_mask & 0x80) //запустить новый поиск если установлен флаг
   \   00000010   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000012   8100                       LD      R16,Z
   \   00000014   FF07                       SBRS    R16,7
   \   00000016   C006                       RJMP    ??search_0
    339              {
    340                diff = SEARCH_FIRST;
   \   00000018   EF0F                       LDI     R16,255
   \   0000001A   9300....                   STS     ??diff,R16
    341                *line_mask &= ~(0x80);
   \   0000001E   8100                       LD      R16,Z
   \   00000020   770F                       ANDI    R16,0x7F
   \   00000022   8300                       ST      Z,R16
    342              }
    343          
    344            //for( diff = SEARCH_FIRST; diff != LAST_DEVICE; )
    345            if (diff != LAST_DEVICE)
   \                     ??search_0:
   \   00000024   9100....                   LDS     R16,??diff
   \   00000028   2300                       TST     R16
   \   0000002A   F119                       BREQ    ??search_1
    346            {
    347              diff = w1_rom_search( diff, id , *line_mask & 0x0f);
   \   0000002C   8110                       LD      R17,Z
   \   0000002E   701F                       ANDI    R17,0x0F
   \   00000030   ........                   CALL    w1_rom_search
   \   00000034   9300....                   STS     ??diff,R16
    348              if( diff == PRESENCE_ERR )
   \   00000038   3F0F                       CPI     R16,255
   \   0000003A   F419                       BRNE    ??search_2
    349              {
    350                //uputsnl( "No Sensor found" );
    351                //ramb[0x30] = 0;
    352                *line_mask = 0xa0;//0b10100000
   \   0000003C   EA00                       LDI     R16,160
   \   0000003E   01F2                       MOVW    R31 : R30,R5 : R4
   \   00000040   8300                       ST      Z,R16
    353              }
    354              if( diff == DATA_ERR )
   \                     ??search_2:
   \   00000042   9100....                   LDS     R16,??diff
   \   00000046   3F0E                       CPI     R16,254
   \   00000048   F419                       BRNE    ??search_3
    355              {
    356                //uputsnl( "Bus Error" );
    357                //ramb[0x30] = 0xf0f0;
    358                *line_mask = 0x90;//0b10010000
   \   0000004A   E900                       LDI     R16,144
   \   0000004C   01F2                       MOVW    R31 : R30,R5 : R4
   \   0000004E   8300                       ST      Z,R16
    359              }
    360               dowcrc = 0;
   \                     ??search_3:
   \   00000050   E000                       LDI     R16,0
   \   00000052   9300....                   STS     dowcrc,R16
    361                for( i = 0; i < 8; i++ )
   \   00000056   01DC                       MOVW    R27 : R26,R25 : R24
   \   00000058   E088                       LDI     R24,8
    362                {
    363          	CRC(id[i]);
   \                     ??search_4:
   \   0000005A   910D                       LD      R16,X+
   \   0000005C   ........                   CALL    CRC
    364          	//view(dowcrc, 40, 5);
    365                }
   \   00000060   958A                       DEC     R24
   \   00000062   F7D9                       BRNE    ??search_4
    366                if (dowcrc) *line_mask = 0xc0;//
   \   00000064   9100....                   LDS     R16,dowcrc
   \   00000068   2300                       TST     R16
   \   0000006A   F0A9                       BREQ    ??search_5
   \                     ??search_6:
   \   0000006C   EC00                       LDI     R16,192
   \   0000006E   01F2                       MOVW    R31 : R30,R5 : R4
   \   00000070   C011                       RJMP    ??search_7
    367                
    368              
    369            }
    370            else {
    371                dowcrc = 0;
   \                     ??search_1:
   \   00000072   E000                       LDI     R16,0
   \   00000074   9300....                   STS     dowcrc,R16
    372                for( i = 0; i < 8; i++ )
   \   00000078   01D9                       MOVW    R27 : R26,R19 : R18
   \   0000007A   E088                       LDI     R24,8
    373                {
    374          	CRC(id[i]);
   \                     ??search_8:
   \   0000007C   910D                       LD      R16,X+
   \   0000007E   ........                   CALL    CRC
    375          	//view(dowcrc, 40, 5);
    376                }
   \   00000082   958A                       DEC     R24
   \   00000084   F7D9                       BRNE    ??search_8
    377                if (dowcrc) *line_mask = 0xc0;//
   \   00000086   9100....                   LDS     R16,dowcrc
   \   0000008A   2300                       TST     R16
   \   0000008C   F779                       BRNE    ??search_6
    378                else *line_mask |= 0x80;//поиск завершен
   \   0000008E   01F2                       MOVW    R31 : R30,R5 : R4
   \   00000090   8100                       LD      R16,Z
   \   00000092   6800                       ORI     R16,0x80
   \                     ??search_7:
   \   00000094   8300                       ST      Z,R16
    379             }
    380          }
   \                     ??search_5:
   \   00000096   9189                       LD      R24,Y+
   \   00000098   9199                       LD      R25,Y+
   \   0000009A   91A9                       LD      R26,Y+
   \   0000009C   91B9                       LD      R27,Y+
   \   0000009E   9049                       LD      R4,Y+
   \   000000A0   9059                       LD      R5,Y+
   \   000000A2   9508                       RET

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??diff:
   \   00000000                              DS 1
    381          
    382          /*************************************************
    383          поиск адреса свободной ячейки памяти для записи
    384          данных нового датчика
    385          возвращает адрес свободной ячейки ID или 0 если все ячейки на шлейфе заполнены
    386          *************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    387          unsigned int search_free(unsigned char line_mask)
   \                     search_free:
    388          {
   \   00000000   2F59                       MOV     R21,R25
   \   00000002   2F48                       MOV     R20,R24
   \   00000004   2F20                       MOV     R18,R16
    389            unsigned int adr, adr_end;
    390            switch (line_mask)
   \   00000006   952A                       DEC     R18
   \   00000008   F039                       BREQ    ??search_free_0
   \   0000000A   952A                       DEC     R18
   \   0000000C   F051                       BREQ    ??search_free_1
   \   0000000E   5022                       SUBI    R18,2
   \   00000010   F061                       BREQ    ??search_free_2
   \   00000012   5024                       SUBI    R18,4
   \   00000014   F071                       BREQ    ??search_free_3
   \   00000016   C046                       RJMP    ??search_free_4
    391              {
    392                case 1 : adr = 0x180; adr_end = 0x200; break;
   \                     ??search_free_0:
   \   00000018   E880                       LDI     R24,128
   \   0000001A   E091                       LDI     R25,1
   \   0000001C   E000                       LDI     R16,0
   \                     ??search_free_5:
   \   0000001E   E012                       LDI     R17,2
   \   00000020   C00C                       RJMP    ??search_free_6
    393                case 2 : adr = 0x200; adr_end = 0x280; break;
   \                     ??search_free_1:
   \   00000022   E080                       LDI     R24,0
   \   00000024   E092                       LDI     R25,2
   \   00000026   E800                       LDI     R16,128
   \   00000028   CFFA                       RJMP    ??search_free_5
    394                case 4 : adr = 0x280; adr_end = 0x300; break;
   \                     ??search_free_2:
   \   0000002A   E880                       LDI     R24,128
   \   0000002C   E092                       LDI     R25,2
   \   0000002E   E000                       LDI     R16,0
   \   00000030   C003                       RJMP    ??search_free_7
    395                case 8 : adr = 0x300; adr_end = 0x380; break;      
   \                     ??search_free_3:
   \   00000032   E080                       LDI     R24,0
   \   00000034   E093                       LDI     R25,3
   \   00000036   E800                       LDI     R16,128
   \                     ??search_free_7:
   \   00000038   E013                       LDI     R17,3
    396              }
    397          //  addh(0x1111);  
    398            while (adr < adr_end)
    399              {
    400          //      if ((hrem[adr] >> 8) != 0x10) return adr;
    401          //        addh(0x2222);
    402          //        addh(adr);
    403                  if((hrem[adr]==0xffff)&&(hrem[adr+1]==0xffff)&&(hrem[adr+2]==0xffff)
    404                      &&(hrem[adr+3]==0xffff)) return adr;
   \                     ??search_free_6:
   \   0000003A   019C                       MOVW    R19 : R18,R25 : R24
   \   0000003C   0F22                       LSL     R18
   \   0000003E   1F33                       ROL     R19
   \   00000040   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000042   ....                       SUBI    R30,LOW((-(hrem) & 0xFFFF))
   \   00000044   ....                       SBCI    R31,(-(hrem) & 0xFFFF) >> 8
   \   00000046   8120                       LD      R18,Z
   \   00000048   8131                       LDD     R19,Z+1
   \   0000004A   3F2F                       CPI     R18,255
   \   0000004C   4F3F                       SBCI    R19,255
   \   0000004E   F549                       BRNE    ??search_free_8
   \   00000050   019C                       MOVW    R19 : R18,R25 : R24
   \   00000052   5F2F                       SUBI    R18,255
   \   00000054   4F3F                       SBCI    R19,255
   \   00000056   0F22                       LSL     R18
   \   00000058   1F33                       ROL     R19
   \   0000005A   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000005C   ....                       SUBI    R30,LOW((-(hrem) & 0xFFFF))
   \   0000005E   ....                       SBCI    R31,(-(hrem) & 0xFFFF) >> 8
   \   00000060   8120                       LD      R18,Z
   \   00000062   8131                       LDD     R19,Z+1
   \   00000064   3F2F                       CPI     R18,255
   \   00000066   4F3F                       SBCI    R19,255
   \   00000068   F4E1                       BRNE    ??search_free_8
   \   0000006A   019C                       MOVW    R19 : R18,R25 : R24
   \   0000006C   5F2E                       SUBI    R18,254
   \   0000006E   4F3F                       SBCI    R19,255
   \   00000070   0F22                       LSL     R18
   \   00000072   1F33                       ROL     R19
   \   00000074   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000076   ....                       SUBI    R30,LOW((-(hrem) & 0xFFFF))
   \   00000078   ....                       SBCI    R31,(-(hrem) & 0xFFFF) >> 8
   \   0000007A   8120                       LD      R18,Z
   \   0000007C   8131                       LDD     R19,Z+1
   \   0000007E   3F2F                       CPI     R18,255
   \   00000080   4F3F                       SBCI    R19,255
   \   00000082   F479                       BRNE    ??search_free_8
   \   00000084   019C                       MOVW    R19 : R18,R25 : R24
   \   00000086   5F2D                       SUBI    R18,253
   \   00000088   4F3F                       SBCI    R19,255
   \   0000008A   0F22                       LSL     R18
   \   0000008C   1F33                       ROL     R19
   \   0000008E   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000090   ....                       SUBI    R30,LOW((-(hrem) & 0xFFFF))
   \   00000092   ....                       SBCI    R31,(-(hrem) & 0xFFFF) >> 8
   \   00000094   8120                       LD      R18,Z
   \   00000096   8131                       LDD     R19,Z+1
   \   00000098   3F2F                       CPI     R18,255
   \   0000009A   4F3F                       SBCI    R19,255
   \   0000009C   F411                       BRNE    ??search_free_8
   \   0000009E   018C                       MOVW    R17 : R16,R25 : R24
   \   000000A0   C006                       RJMP    ??search_free_9
    405                  adr +=4;
   \                     ??search_free_8:
   \   000000A2   9604                       ADIW    R25 : R24,4
    406              }
   \                     ??search_free_4:
   \   000000A4   1780                       CP      R24,R16
   \   000000A6   0791                       CPC     R25,R17
   \   000000A8   F240                       BRCS    ??search_free_6
    407          //    addh(0x3333);
    408            return 0;//все ячейки памяти заполнены
   \   000000AA   E000                       LDI     R16,0
   \   000000AC   E010                       LDI     R17,0
   \                     ??search_free_9:
   \   000000AE   2F84                       MOV     R24,R20
   \   000000B0   2F95                       MOV     R25,R21
   \   000000B2   9508                       RET
    409          }
    410          
    411          
    412          #define adr_id_board 0x170

   \                                 In segment CODE, align 2, keep-with-next
    413          unsigned char comp(unsigned char id[8], unsigned int adr_s, unsigned int adr_end)
   \                     comp:
    414          {
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   01B8                       MOVW    R23 : R22,R17 : R16
    415            unsigned char c;
    416            unsigned int tmp, i;
    417            if (adr_s == 0x17c)//шлейф 1 имеет датчик на плате
   \   00000006   372C                       CPI     R18,124
   \   00000008   E001                       LDI     R16,1
   \   0000000A   0730                       CPC     R19,R16
   \   0000000C   F4C9                       BRNE    ??comp_0
    418              {
    419                c = 0;
   \   0000000E   E000                       LDI     R16,0
    420                for (i = 0; i < 4; i ++)
   \   00000010   01FB                       MOVW    R31 : R30,R23 : R22
   \   00000012   ....                       LDI     R26,LOW((hrem + 736))
   \   00000014   ....                       LDI     R27,(hrem + 736) >> 8
   \   00000016   E014                       LDI     R17,4
    421                  {
    422                    tmp = (unsigned int) id[1 +2*i] <<8 | id[2*i];
    423                    if (tmp == hrem[adr_id_board + i]) c ++;
   \                     ??comp_1:
   \   00000018   8131                       LDD     R19,Z+1
   \   0000001A   8120                       LD      R18,Z
   \   0000001C   900D                       LD      R0,X+
   \   0000001E   901D                       LD      R1,X+
   \   00000020   1520                       CP      R18,R0
   \   00000022   0531                       CPC     R19,R1
   \   00000024   F409                       BRNE    ??comp_2
   \   00000026   9503                       INC     R16
    424                  }
   \                     ??comp_2:
   \   00000028   9632                       ADIW    R31 : R30,2
   \   0000002A   951A                       DEC     R17
   \   0000002C   F7A9                       BRNE    ??comp_1
    425                if (c == 4) return 0;
   \   0000002E   3004                       CPI     R16,4
   \   00000030   F411                       BRNE    ??comp_3
   \                     ??comp_4:
   \   00000032   E000                       LDI     R16,0
   \   00000034   C021                       RJMP    ??comp_5
    426                adr_s +=4;
   \                     ??comp_3:
   \   00000036   E820                       LDI     R18,128
   \   00000038   E031                       LDI     R19,1
   \   0000003A   C002                       RJMP    ??comp_0
    427              }
    428            while (adr_s < adr_end)
    429              {
    430                c = 0;
    431                for (i = 0; i < 4; i ++)
    432                  {
    433                    //tmp = id[1 + 2*i];
    434                    //tmp |= (unsigned int) id[2*i]<<8;
    435                    tmp = (unsigned int) id[1 +2*i] <<8 | id[2*i];
    436          //          hrem[0x188] = tmp;
    437          //          hrem[0x18a] = adr_s + i;
    438          //          hrem[0x189] = hrem[adr_s + i]; return;
    439                    if (tmp == hrem[adr_s + i]) c ++;
    440                  }
    441                if (c == 4)//датчик есть в базе
    442                  {
    443                    //*res ++;
    444          //          addh(0x1111);
    445          //          addh(adr_s);
    446                    return 0;
    447                  }
    448                adr_s += 4;
   \                     ??comp_6:
   \   0000003C   5F2C                       SUBI    R18,252
   \   0000003E   4F3F                       SBCI    R19,255
   \                     ??comp_0:
   \   00000040   1724                       CP      R18,R20
   \   00000042   0735                       CPC     R19,R21
   \   00000044   F4C0                       BRCC    ??comp_7
   \   00000046   E000                       LDI     R16,0
   \   00000048   01FB                       MOVW    R31 : R30,R23 : R22
   \   0000004A   ....                       LDI     R26,LOW(hrem)
   \   0000004C   ....                       LDI     R27,(hrem) >> 8
   \   0000004E   0109                       MOVW    R1 : R0,R19 : R18
   \   00000050   0C00                       LSL     R0
   \   00000052   1C11                       ROL     R1
   \   00000054   0DA0                       ADD     R26,R0
   \   00000056   1DB1                       ADC     R27,R1
   \   00000058   E014                       LDI     R17,4
   \                     ??comp_8:
   \   0000005A   8011                       LDD     R1,Z+1
   \   0000005C   8000                       LD      R0,Z
   \   0000005E   902D                       LD      R2,X+
   \   00000060   903D                       LD      R3,X+
   \   00000062   1402                       CP      R0,R2
   \   00000064   0413                       CPC     R1,R3
   \   00000066   F409                       BRNE    ??comp_9
   \   00000068   9503                       INC     R16
   \                     ??comp_9:
   \   0000006A   9632                       ADIW    R31 : R30,2
   \   0000006C   951A                       DEC     R17
   \   0000006E   F7A9                       BRNE    ??comp_8
   \   00000070   3004                       CPI     R16,4
   \   00000072   F721                       BRNE    ??comp_6
   \   00000074   CFDE                       RJMP    ??comp_4
    449              }
    450            return 1;
   \                     ??comp_7:
   \   00000076   E001                       LDI     R16,1
   \                     ??comp_5:
   \   00000078   91A9                       LD      R26,Y+
   \   0000007A   91B9                       LD      R27,Y+
   \   0000007C   9508                       RET
    451          }

   \                                 In segment FAR_F, align 1, keep-with-next
   \                     `?<Constant {(unsigned char)'D', (unsigned char`:
   \   00000000   44444444                   DB 68, 68, 68, 68

   \                                 In segment ABSOLUTE, at 0x21
   \   union <unnamed> volatile __io _A_PINE
   \                     _A_PINE:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x3b
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x62
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                              DS 1

   Maximum stack usage in bytes:

     Function           CSTACK RSTACK
     --------           ------ ------
     comp                   3      2
     read_meas             40      4
       -> isempty          40      2
       -> isempty          40      2
       -> isempty          40      2
       -> isempty          40      2
       -> w1_reset         40      2
       -> w1_byte_wr       40      2
       -> w1_byte_wr       40      2
       -> w1_byte_wr       40      2
       -> w1_byte_wr       40      2
       -> w1_byte_rd       40      2
       -> CRC              40      2
       -> CRC              40      2
       -> setrg            40      2
       -> setrg            40      2
       -> setrg            40      2
       -> setrg            40      2
       -> setrg            40      2
       -> setrg            40      2
     search                 6      2
       -> w1_rom_search     6      2
       -> CRC               6      2
       -> CRC               6      2
     search_free            0      2
     set_time               0      2
     start_meas             5      4
       -> w1_command        5      2
       -> set_time          5      2


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     set_time                         56
     start_meas                      114
     read_meas                      1944
     count                            15
     scratchpad                       36
     search                          164
     diff                              1
     search_free                     180
     comp                            126
     ?<Constant {(unsigned char)'D', (unsigned char
                                       4
     _A_PINE                           1
     _A_PORTE                          1
     _A_PIND                           1
     _A_PORTA                          1
     _A_PORTF                          1
      Others                           7

 
     5 bytes in segment ABSOLUTE
 2 584 bytes in segment CODE
     4 bytes in segment FAR_F
     7 bytes in segment INITTAB
    52 bytes in segment NEAR_Z
 
 2 588 bytes of CODE memory (+ 7 bytes shared)
    52 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: 1
