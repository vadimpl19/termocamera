##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V3.20C/W32             04/Aug/2006  13:21:49 #
# Copyright 1996-2004 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  D:\temp\sys_msap01mk_dev0103\base.c                     #
#    Command line =  --cpu=m128 -ms -o D:\temp\sys_msap01mk_dev0103\Release\ #
#                    Obj\ -lCN D:\temp\sys_msap01mk_dev0103\Release\List\    #
#                    -y --initializers_in_flash -s9                          #
#                    -DENABLE_BIT_DEFINITIONS -e -I "F:\Program Files\IAR    #
#                    Systems\Embedded Workbench 3.2\avr\INC\" -I             #
#                    "F:\Program Files\IAR Systems\Embedded Workbench        #
#                    3.2\avr\INC\CLIB\" --eeprom_size 4096                   #
#                    D:\temp\sys_msap01mk_dev0103\base.c                     #
#    List file    =  D:\temp\sys_msap01mk_dev0103\Release\List\base.lst      #
#    Object file  =  D:\temp\sys_msap01mk_dev0103\Release\Obj\base.r90       #
#                                                                            #
#                                                                            #
##############################################################################

D:\temp\sys_msap01mk_dev0103\base.c
      1          #define base
      2          
      3          #include "types.h"
      4          #include "iom128.h"
      5          #include "ina90.h"
      6          #include "base.h"
      7          //#include "led.h"
      8          
      9          #define dev_id 12
     10          #define ver 1
     11          #define subver 3
     12          //#define eepromm 0x10
     13          
     14          #define wre(address,rg)     *(( unsigned int __eeprom *)(address*2))=rg;
     15          #define wrem(address,rg)     *(( unsigned int __eeprom *)(address*2+eepromm*2))=rg;
     16          #define rde(address,rg)     rg=*(( unsigned int __eeprom *)(address*2));
     17          #define rdem(address,rg)    rg=*(( unsigned int __eeprom *)(address*2+eepromm*2));
     18          #define rde2(address,rg1,rg2)    rg2=*(( unsigned int __eeprom *)(address*2+eepromm*2)); rg1=*(( unsigned int __eeprom *)(address*2));
     19          
     20          /*
     21          #define wre(address,rg)     *(( unsigned int __eeprom *)(address))=rg;
     22          #define wrem(address,rg)     *(( unsigned int __eeprom *)(address+eepromm))=rg;
     23          #define rde(address,rg)     rg=*(( unsigned int __eeprom *)(address));
     24          #define rdem(address,rg)    rg=*(( unsigned int __eeprom *)(address+eepromm));
     25          #define rde2(address,rg1,rg2)    rg2=*(( unsigned int __eeprom *)(address+eepromm)); rg1=*(( unsigned int __eeprom *)(address));
     26          */
     27          //#define _clis sregt=SREG; __disable_interrupt(); вынесено в types.h
     28          

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
     29          UINT  hrem[eepromm];
   \                     hrem:
   \   00000000                              DS 2048

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
     30          UINT  ramb[ramm];
   \                     ramb:
   \   00000000                              DS 512

   \                                 In segment CODE, align 2, keep-with-next
     31          char getrg(UINT address,UINT * rg){
   \                     getrg:
     32          //unsigned int __eeprom  *pe;
     33          char sregt;
     34            if ((address<=rammax)&(address>=rammin)) {
   \   00000000   3111                       CPI     R17,17
   \   00000002   F470                       BRCC    ??getrg_0
   \   00000004   3110                       CPI     R17,16
   \   00000006   F060                       BRCS    ??getrg_0
     35             *rg=ramb[address-rammin];
   \   00000008   5110                       SUBI    R17,16
   \   0000000A   0F00                       LSL     R16
   \   0000000C   1F11                       ROL     R17
   \   0000000E   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000010   ....                       SUBI    R30,LOW((-(ramb) & 0xFFFF))
   \   00000012   ....                       SBCI    R31,(-(ramb) & 0xFFFF) >> 8
   \   00000014   8100                       LD      R16,Z
   \   00000016   8111                       LDD     R17,Z+1
   \   00000018   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000001A   8300                       ST      Z,R16
   \   0000001C   8311                       STD     Z+1,R17
     36             return 0;
   \   0000001E   C019                       RJMP    ??getrg_1
     37            }
     38            if (address< eepromm){
   \                     ??getrg_0:
   \   00000020   3000                       CPI     R16,0
   \   00000022   E044                       LDI     R20,4
   \   00000024   0714                       CPC     R17,R20
   \   00000026   F418                       BRCC    ??getrg_2
     39            // считывание регистра из eeprom
     40               _clis
   \   00000028   B74F                       IN      R20,0x3F
   \   0000002A   94F8                       CLI
     41          //      *rg=*(( unsigned int __eeprom *)(address*2));
     42               *rg=hrem[address];
   \   0000002C   C007                       RJMP    ??getrg_3
     43               SREG=sregt;
     44               return 0;
     45            };
     46            if ((address>= eepromm)&(address<= eepromm+0x0f)){
   \                     ??getrg_2:
   \   0000002E   3100                       CPI     R16,16
   \   00000030   0714                       CPC     R17,R20
   \   00000032   F488                       BRCC    ??getrg_4
     47               _clis
   \   00000034   B74F                       IN      R20,0x3F
   \   00000036   94F8                       CLI
     48          //      *rg=*(( unsigned int __eeprom *)(address*2));
     49               *rg=hrem[address-0xa0];
   \   00000038   5A00                       SUBI    R16,160
   \   0000003A   4010                       SBCI    R17,0
   \                     ??getrg_3:
   \   0000003C   0F00                       LSL     R16
   \   0000003E   1F11                       ROL     R17
   \   00000040   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000042   ....                       SUBI    R30,LOW((-(hrem) & 0xFFFF))
   \   00000044   ....                       SBCI    R31,(-(hrem) & 0xFFFF) >> 8
   \   00000046   8100                       LD      R16,Z
   \   00000048   8111                       LDD     R17,Z+1
   \   0000004A   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000004C   8300                       ST      Z,R16
   \   0000004E   8311                       STD     Z+1,R17
     50               SREG=sregt;
   \   00000050   BF4F                       OUT     0x3F,R20
     51               return 0;
   \                     ??getrg_1:
   \   00000052   E000                       LDI     R16,0
   \   00000054   9508                       RET
     52            }
     53          
     54          return 2;
   \                     ??getrg_4:
   \   00000056   E002                       LDI     R16,2
   \   00000058   9508                       RET
     55          };
     56          //функция setch ставит на запись 1байт по абсолютному адресу. В случае, если предидущая запись незавершена,
     57          //осуществляется ожидание завершения 
     58          //#define setch(absad,ch) *(char __eeprom *)absad=ch

   \                                 In segment CODE, align 2, keep-with-next
     59          setch(int absad,char ch){
   \                     setch:
   \                     ??setch_0:
     60          
     61          //addh(absad);
     62          //addh(ch);
     63            while(EECR & (1<<EEWE));    /* Wait for completion of previous write */
   \   00000000   99E1                       SBIC    0x1C,0x01
   \   00000002   CFFE                       RJMP    ??setch_0
     64          __disable_interrupt();
   \   00000004   94F8                       CLI
     65          /* Set up address and data registers */
     66          EEAR = absad;
   \   00000006   BB1F                       OUT     0x1F,R17
   \   00000008   BB0E                       OUT     0x1E,R16
     67          EEDR = ch;
   \   0000000A   BB2D                       OUT     0x1D,R18
     68          /* Write logical one to EEMWE */
     69          EECR |= (1<<EEMWE);
   \   0000000C   9AE2                       SBI     0x1C,0x02
     70          /* Start eeprom write by setting EEWE */
     71          EECR |= (1<<EEWE);   
   \   0000000E   9AE1                       SBI     0x1C,0x01
     72          __enable_interrupt();
   \   00000010   9478                       SEI
     73          //  while(EECR & (1<<EEWE));    
     74          }
   \   00000012   9508                       RET
     75          

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
     76          UINT rgadt,tmpb[127];
   \                     rgadt:
   \   00000000                              DS 2
     77          UCHAR cnt,state,maxc;
   \                     cnt:
   \   00000002                              DS 1
   \                     state:
   \   00000003                              DS 1
   \                     maxc:
   \   00000004                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \                     tmpb:
   \   00000000                              DS 254
     78          //функция записи очередного байта из блока регистров. Если предидущая запись не закончена- то выходим

   \                                 In segment CODE, align 2, keep-with-next
     79          void wrblock(){
   \                     wrblock:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
     80          char sregt,ch;
     81          UINT absad;
     82          //  gron;
     83            if(maxc==0) return; //вышли если нечего делать
   \   00000004   ....                       LDI     R26,LOW(rgadt)
   \   00000006   ....                       LDI     R27,(rgadt) >> 8
   \   00000008   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000000A   8104                       LDD     R16,Z+4
   \   0000000C   2300                       TST     R16
   \   0000000E   F409                       BRNE    $+2+2
   \   00000010   C082                       RJMP    ??wrblock_0
     84          
     85          //  if((EECR & (1<<EEWE))!=0)return; //вышли, идет запись
     86            if((EECR & 1)!=0){ return;} //вышли, идет запись
   \   00000012   99E0                       SBIC    0x1C,0x00
   \   00000014   C080                       RJMP    ??wrblock_0
     87            //определим адрес и байт для записи
     88            switch (state){
   \   00000016   8103                       LDD     R16,Z+3
   \   00000018   2300                       TST     R16
   \   0000001A   F139                       BREQ    ??wrblock_1
   \   0000001C   950A                       DEC     R16
   \   0000001E   F029                       BREQ    ??wrblock_2
   \   00000020   950A                       DEC     R16
   \   00000022   F091                       BREQ    ??wrblock_3
   \   00000024   950A                       DEC     R16
   \   00000026   F0B9                       BREQ    ??wrblock_4
   \   00000028   C01E                       RJMP    ??wrblock_5
     89            case 0: //ставим на запись младший байт в основную область
     90                absad=rgadt*2;
     91                ch=tmpb[cnt]&0xff;
     92                break;
     93            case 1: //ставим на запись старший байт в основную область
     94                absad=rgadt*2+1;
   \                     ??wrblock_2:
   \   0000002A   910D                       LD      R16,X+
   \   0000002C   911C                       LD      R17,X
   \   0000002E   9711                       SBIW    R27 : R26,1
   \   00000030   0F00                       LSL     R16
   \   00000032   1F11                       ROL     R17
   \   00000034   5F0F                       SUBI    R16,255
   \   00000036   4F1F                       SBCI    R17,255
     95                ch=tmpb[cnt]>>8;
   \                     ??wrblock_6:
   \   00000038   8122                       LDD     R18,Z+2
   \   0000003A   E032                       LDI     R19,2
   \   0000003C   9F23                       MUL     R18,R19
   \   0000003E   01F0                       MOVW    R31 : R30,R1 : R0
   \   00000040   ....                       SUBI    R30,LOW((-(tmpb) & 0xFFFF))
   \   00000042   ....                       SBCI    R31,(-(tmpb) & 0xFFFF) >> 8
   \   00000044   8121                       LDD     R18,Z+1
   \   00000046   C01D                       RJMP    ??wrblock_7
     96                break;
     97            case 2: //ставим на запись младший байт в область зеркала
     98                absad=rgadt*2+eepromm*2;
   \                     ??wrblock_3:
   \   00000048   910D                       LD      R16,X+
   \   0000004A   911C                       LD      R17,X
   \   0000004C   9711                       SBIW    R27 : R26,1
   \   0000004E   0F00                       LSL     R16
   \   00000050   1F11                       ROL     R17
   \   00000052   5F18                       SUBI    R17,248
     99                ch=tmpb[cnt];
   \   00000054   C00F                       RJMP    ??wrblock_8
    100                break;
    101            case 3: //ставим на запись старший байт в область зеркала
    102                absad=rgadt*2+1+eepromm*2;
   \                     ??wrblock_4:
   \   00000056   910D                       LD      R16,X+
   \   00000058   911C                       LD      R17,X
   \   0000005A   9711                       SBIW    R27 : R26,1
   \   0000005C   0F00                       LSL     R16
   \   0000005E   1F11                       ROL     R17
   \   00000060   5F0F                       SUBI    R16,255
   \   00000062   4F17                       SBCI    R17,247
    103                ch=tmpb[cnt]>>8;
   \   00000064   CFE9                       RJMP    ??wrblock_6
    104                break;
    105            default: //ошибочное состояние!!!
    106                state=0;
   \                     ??wrblock_5:
   \   00000066   E000                       LDI     R16,0
   \   00000068   8303                       STD     Z+3,R16
    107                absad=rgadt*2;
   \                     ??wrblock_1:
   \   0000006A   910D                       LD      R16,X+
   \   0000006C   911C                       LD      R17,X
   \   0000006E   9711                       SBIW    R27 : R26,1
   \   00000070   0F00                       LSL     R16
   \   00000072   1F11                       ROL     R17
    108                ch=tmpb[cnt]&0xff;
   \                     ??wrblock_8:
   \   00000074   8122                       LDD     R18,Z+2
   \   00000076   E032                       LDI     R19,2
   \   00000078   9F23                       MUL     R18,R19
   \   0000007A   01F0                       MOVW    R31 : R30,R1 : R0
   \   0000007C   ....                       SUBI    R30,LOW((-(tmpb) & 0xFFFF))
   \   0000007E   ....                       SBCI    R31,(-(tmpb) & 0xFFFF) >> 8
   \   00000080   8120                       LD      R18,Z
    109            };
    110            
    111            if((EECR & (1<<EEWE))!=0){return;}; //вышли, идет запись
   \                     ??wrblock_7:
   \   00000082   99E1                       SBIC    0x1C,0x01
   \   00000084   C048                       RJMP    ??wrblock_0
    112          //  if((EECR & 1)!=0){SREG=sregt;return;} 
    113          setch(absad,ch);  
   \   00000086   ....                       RCALL   setch
    114          
    115            
    116            state++;
   \   00000088   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000008A   8103                       LDD     R16,Z+3
   \   0000008C   9503                       INC     R16
   \   0000008E   8303                       STD     Z+3,R16
    117            if (state==4){//очередной регистр записан полностью в eeprom
   \   00000090   3004                       CPI     R16,4
   \   00000092   F009                       BREQ    $+2+2
   \   00000094   C040                       RJMP    ??wrblock_0
    118              _clis
   \   00000096   B70F                       IN      R16,0x3F
   \   00000098   94F8                       CLI
    119              hrem[rgadt]=tmpb[cnt];//записали значение и в область RAM- копии.
   \   0000009A   8112                       LDD     R17,Z+2
   \   0000009C   E022                       LDI     R18,2
   \   0000009E   9F12                       MUL     R17,R18
   \   000000A0   01F0                       MOVW    R31 : R30,R1 : R0
   \   000000A2   ....                       SUBI    R30,LOW((-(tmpb) & 0xFFFF))
   \   000000A4   ....                       SBCI    R31,(-(tmpb) & 0xFFFF) >> 8
   \   000000A6   8120                       LD      R18,Z
   \   000000A8   8131                       LDD     R19,Z+1
   \   000000AA   914D                       LD      R20,X+
   \   000000AC   915C                       LD      R21,X
   \   000000AE   9711                       SBIW    R27 : R26,1
   \   000000B0   0F44                       LSL     R20
   \   000000B2   1F55                       ROL     R21
   \   000000B4   01FA                       MOVW    R31 : R30,R21 : R20
   \   000000B6   ....                       SUBI    R30,LOW((-(hrem) & 0xFFFF))
   \   000000B8   ....                       SBCI    R31,(-(hrem) & 0xFFFF) >> 8
   \   000000BA   8320                       ST      Z,R18
   \   000000BC   8331                       STD     Z+1,R19
    120          //отладка
    121          //    hrem[0]=rgadt;
    122          //    hrem[1]=cnt;
    123           //   hrem[2]=tmpb[cnt];
    124           //   hrem[3]=state;
    125          
    126             SREG=sregt;
   \   000000BE   BF0F                       OUT     0x3F,R16
   \   000000C0   C022                       RJMP    ??wrblock_9
    127              while((cnt<maxc)&&(hrem[rgadt]==tmpb[cnt])){    
   \                     ??wrblock_10:
   \   000000C2   910D                       LD      R16,X+
   \   000000C4   911C                       LD      R17,X
   \   000000C6   9711                       SBIW    R27 : R26,1
   \   000000C8   0F00                       LSL     R16
   \   000000CA   1F11                       ROL     R17
   \   000000CC   01F8                       MOVW    R31 : R30,R17 : R16
   \   000000CE   ....                       SUBI    R30,LOW((-(hrem) & 0xFFFF))
   \   000000D0   ....                       SBCI    R31,(-(hrem) & 0xFFFF) >> 8
   \   000000D2   8100                       LD      R16,Z
   \   000000D4   8111                       LDD     R17,Z+1
   \   000000D6   01FD                       MOVW    R31 : R30,R27 : R26
   \   000000D8   8122                       LDD     R18,Z+2
   \   000000DA   E032                       LDI     R19,2
   \   000000DC   9F23                       MUL     R18,R19
   \   000000DE   01F0                       MOVW    R31 : R30,R1 : R0
   \   000000E0   ....                       SUBI    R30,LOW((-(tmpb) & 0xFFFF))
   \   000000E2   ....                       SBCI    R31,(-(tmpb) & 0xFFFF) >> 8
   \   000000E4   8120                       LD      R18,Z
   \   000000E6   8131                       LDD     R19,Z+1
   \   000000E8   1702                       CP      R16,R18
   \   000000EA   0713                       CPC     R17,R19
   \   000000EC   F4A1                       BRNE    ??wrblock_0
    128                  rgadt++;cnt++;state=0;
   \   000000EE   910D                       LD      R16,X+
   \   000000F0   911C                       LD      R17,X
   \   000000F2   5F0F                       SUBI    R16,255
   \   000000F4   4F1F                       SBCI    R17,255
   \   000000F6   931C                       ST      X,R17
   \   000000F8   930E                       ST      -X,R16
   \   000000FA   01FD                       MOVW    R31 : R30,R27 : R26
   \   000000FC   8102                       LDD     R16,Z+2
   \   000000FE   9503                       INC     R16
   \   00000100   8302                       STD     Z+2,R16
   \   00000102   E000                       LDI     R16,0
   \   00000104   8303                       STD     Z+3,R16
    129              }; 
   \                     ??wrblock_9:
   \   00000106   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000108   8102                       LDD     R16,Z+2
   \   0000010A   8114                       LDD     R17,Z+4
   \   0000010C   1701                       CP      R16,R17
   \   0000010E   F2C8                       BRCS    ??wrblock_10
    130               
    131              if(cnt==maxc){maxc=0;}//запись блока  завершена
   \   00000110   F411                       BRNE    ??wrblock_0
   \   00000112   E000                       LDI     R16,0
   \   00000114   8304                       STD     Z+4,R16
   \                     ??wrblock_0:
   \   00000116   91A9                       LD      R26,Y+
   \   00000118   91B9                       LD      R27,Y+
   \   0000011A   9508                       RET
    132            }
    133          }
    134          //функция инициализации блока записи регистров. Внимание!!! буфер регистров передается в функцию как 
    135          //приходит из модбаса - переставленные верхний и нижний байты
    136          //если предидущая запись не окончена, функция вернет 6, иначе 0

   \                                 In segment CODE, align 2, keep-with-next
    137          char wrblock_ini(UINT first,UCHAR count,UINT * registers){
   \                     wrblock_ini:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   01B8                       MOVW    R23 : R22,R17 : R16
    138          UCHAR i;
    139          char sregt;
    140             _clis
   \   00000006   B71F                       IN      R17,0x3F
   \   00000008   94F8                       CLI
    141             if (maxc!=0){SREG=sregt; return 6;} //6 - slave device busy
   \   0000000A   ....                       LDI     R30,LOW(rgadt)
   \   0000000C   ....                       LDI     R31,(rgadt) >> 8
   \   0000000E   8104                       LDD     R16,Z+4
   \   00000010   2300                       TST     R16
   \   00000012   F019                       BREQ    ??wrblock_ini_0
   \   00000014   BF1F                       OUT     0x3F,R17
   \   00000016   E006                       LDI     R16,6
   \   00000018   C019                       RJMP    ??wrblock_ini_1
    142             maxc=count;
   \                     ??wrblock_ini_0:
   \   0000001A   8324                       STD     Z+4,R18
    143             cnt=0;
   \   0000001C   E000                       LDI     R16,0
   \   0000001E   8302                       STD     Z+2,R16
    144             SREG=sregt;
   \   00000020   BF1F                       OUT     0x3F,R17
    145          
    146             for(i=0;i<count;i++){
   \   00000022   2322                       TST     R18
   \   00000024   F069                       BREQ    ??wrblock_ini_2
   \   00000026   ....                       LDI     R16,LOW(tmpb)
   \   00000028   ....                       LDI     R17,(tmpb) >> 8
    147               tmpb[i]= (registers[i]>>8)+(registers[i]<<8);
   \                     ??wrblock_ini_3:
   \   0000002A   01DA                       MOVW    R27 : R26,R21 : R20
   \   0000002C   900D                       LD      R0,X+
   \   0000002E   901C                       LD      R1,X
   \   00000030   01D8                       MOVW    R27 : R26,R17 : R16
   \   00000032   921D                       ST      X+,R1
   \   00000034   920D                       ST      X+,R0
   \   00000036   018D                       MOVW    R17 : R16,R27 : R26
    148             }  
   \   00000038   5F4E                       SUBI    R20,254
   \   0000003A   4F5F                       SBCI    R21,255
   \   0000003C   952A                       DEC     R18
   \   0000003E   F7A9                       BRNE    ??wrblock_ini_3
    149             rgadt=first;
   \                     ??wrblock_ini_2:
   \   00000040   8360                       ST      Z,R22
   \   00000042   8371                       STD     Z+1,R23
    150             state=0; 
   \   00000044   E000                       LDI     R16,0
   \   00000046   8303                       STD     Z+3,R16
    151             wrblock();
   \   00000048   ....                       RCALL   wrblock
    152             return 0;
   \   0000004A   E000                       LDI     R16,0
   \                     ??wrblock_ini_1:
   \   0000004C   91A9                       LD      R26,Y+
   \   0000004E   91B9                       LD      R27,Y+
   \   00000050   9508                       RET
    153          };
    154          
    155          /*
    156          char setrg(UINT address,UINT rg){
    157          char sregt;
    158          
    159          
    160            if (address< eepromm){
    161            // запись регистра в eeprom с ожиданием завершенияж
    162               _clis
    163               *(( unsigned int __eeprom *)(address*2))=rg;
    164               *(( unsigned int __eeprom *)(address*2+eepromm*2))=rg;
    165          //     *(( unsigned int __eeprom *)(address))=rg;
    166          //     *(( unsigned int __eeprom *)(address+eepromm))=rg;
    167               hrem[address]=rg;
    168               SREG=sregt;
    169               
    170               return 0;
    171            };
    172          return 0;
    173          };
    174          */
    175          //запись регистра модбас в ееprom, его вторую копию и зеркало в ОЗУ

   \                                 In segment CODE, align 2, keep-with-next
    176          char setrg(UINT address,UINT rg){
   \                     setrg:
   \   00000000   925A                       ST      -Y,R5
   \   00000002   924A                       ST      -Y,R4
   \   00000004   93BA                       ST      -Y,R27
   \   00000006   93AA                       ST      -Y,R26
   \   00000008   939A                       ST      -Y,R25
   \   0000000A   938A                       ST      -Y,R24
   \   0000000C                              REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                              REQUIRE ?Register_R5_is_cg_reg
   \   0000000C   0128                       MOVW    R5 : R4,R17 : R16
   \   0000000E   01C9                       MOVW    R25 : R24,R19 : R18
    177          //char sregt;
    178          
    179          
    180            while(EECR & (1<<EEWE));    /* Wait for completion of previous write */
   \                     ??setrg_0:
   \   00000010   99E1                       SBIC    0x1C,0x01
   \   00000012   CFFE                       RJMP    ??setrg_0
    181            setch(address*2,rg&0xff);
   \   00000014   01D8                       MOVW    R27 : R26,R17 : R16
   \   00000016   0FAA                       LSL     R26
   \   00000018   1FBB                       ROL     R27
   \   0000001A   018D                       MOVW    R17 : R16,R27 : R26
   \   0000001C   ....                       RCALL   setch
    182             while(EECR & (1<<EEWE));    /* Wait for completion of previous write */
   \                     ??setrg_1:
   \   0000001E   99E1                       SBIC    0x1C,0x01
   \   00000020   CFFE                       RJMP    ??setrg_1
    183            setch(address*2+1,rg>>8);
   \   00000022   2F29                       MOV     R18,R25
   \   00000024   018D                       MOVW    R17 : R16,R27 : R26
   \   00000026   5F0F                       SUBI    R16,255
   \   00000028   4F1F                       SBCI    R17,255
   \   0000002A   ....                       RCALL   setch
    184            while(EECR & (1<<EEWE));    /* Wait for completion of previous write */
   \                     ??setrg_2:
   \   0000002C   99E1                       SBIC    0x1C,0x01
   \   0000002E   CFFE                       RJMP    ??setrg_2
    185            setch(address*2+eepromm*2,rg&0xff);
   \   00000030   2F28                       MOV     R18,R24
   \   00000032   018D                       MOVW    R17 : R16,R27 : R26
   \   00000034   5F18                       SUBI    R17,248
   \   00000036   ....                       RCALL   setch
    186            while(EECR & (1<<EEWE));    /* Wait for completion of previous write */
   \                     ??setrg_3:
   \   00000038   99E1                       SBIC    0x1C,0x01
   \   0000003A   CFFE                       RJMP    ??setrg_3
    187            setch(address*2+1+eepromm*2,rg>>8);
   \   0000003C   2F29                       MOV     R18,R25
   \   0000003E   5FAF                       SUBI    R26,255
   \   00000040   4FB7                       SBCI    R27,247
   \   00000042   018D                       MOVW    R17 : R16,R27 : R26
   \   00000044   ....                       RCALL   setch
    188          
    189            hrem[address]=rg;
   \   00000046   0C44                       LSL     R4
   \   00000048   1C55                       ROL     R5
   \   0000004A   01F2                       MOVW    R31 : R30,R5 : R4
   \   0000004C   ....                       SUBI    R30,LOW((-(hrem) & 0xFFFF))
   \   0000004E   ....                       SBCI    R31,(-(hrem) & 0xFFFF) >> 8
   \   00000050   8380                       ST      Z,R24
   \   00000052   8391                       STD     Z+1,R25
    190            return 0;
   \   00000054   E000                       LDI     R16,0
   \   00000056   9189                       LD      R24,Y+
   \   00000058   9199                       LD      R25,Y+
   \   0000005A   91A9                       LD      R26,Y+
   \   0000005C   91B9                       LD      R27,Y+
   \   0000005E   9049                       LD      R4,Y+
   \   00000060   9059                       LD      R5,Y+
   \   00000062   9508                       RET
    191          };
    192          
    193          ///////////////////////////////////////////////////////////////////////////
    194          // Функция иницииализации параметров связи по умолчанию

   \                                 In segment CODE, align 2, keep-with-next
    195          void inicomm(){
   \                     inicomm:
    196            setrg(0x101,1); //адрес 1
   \   00000000   E021                       LDI     R18,1
   \   00000002   E030                       LDI     R19,0
   \   00000004   E001                       LDI     R16,1
   \   00000006   E011                       LDI     R17,1
   \   00000008   ....                       RCALL   setrg
    197            setrg(0x102,192); //скорость 19200
   \   0000000A   EC20                       LDI     R18,192
   \   0000000C   E030                       LDI     R19,0
   \   0000000E   E002                       LDI     R16,2
   \   00000010   E011                       LDI     R17,1
   \   00000012   ....                       RCALL   setrg
    198          //  setrg(0x102,1152); //скорость 115200
    199            setrg(0x103,2); //even 
   \   00000014   E022                       LDI     R18,2
   \   00000016   E030                       LDI     R19,0
   \   00000018   E003                       LDI     R16,3
   \   0000001A   E011                       LDI     R17,1
   \   0000001C   ....                       RCALL   setrg
    200            hrem[0x101]=1;
   \   0000001E   E001                       LDI     R16,1
   \   00000020   E010                       LDI     R17,0
   \   00000022   ....                       LDI     R30,LOW((hrem + 514))
   \   00000024   ....                       LDI     R31,(hrem + 514) >> 8
   \   00000026   8300                       ST      Z,R16
   \   00000028   8311                       STD     Z+1,R17
    201            hrem[0x102]=192;
   \   0000002A   EC00                       LDI     R16,192
   \   0000002C   ....                       LDI     R30,LOW((hrem + 516))
   \   0000002E   ....                       LDI     R31,(hrem + 516) >> 8
   \   00000030   8300                       ST      Z,R16
   \   00000032   8311                       STD     Z+1,R17
    202            hrem[0x103]=2;   
   \   00000034   E002                       LDI     R16,2
   \   00000036   ....                       LDI     R30,LOW((hrem + 518))
   \   00000038   ....                       LDI     R31,(hrem + 518) >> 8
   \   0000003A   8300                       ST      Z,R16
   \   0000003C   8311                       STD     Z+1,R17
    203          }
   \   0000003E   9508                       RET

   \                                 In segment CODE, align 2, keep-with-next
    204          void inibase(){
   \                     inibase:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   939A                       ST      -Y,R25
   \   00000006   938A                       ST      -Y,R24
    205          int i,im;
    206              rde2(0,i,im);
   \   00000008   E040                       LDI     R20,0
   \   0000000A   E058                       LDI     R21,8
   \   0000000C   ........                   CALL    __eeget16_16
   \   00000010   01D8                       MOVW    R27 : R26,R17 : R16
   \   00000012   E040                       LDI     R20,0
   \   00000014   E050                       LDI     R21,0
   \   00000016   ........                   CALL    __eeget16_16
   \   0000001A   01C8                       MOVW    R25 : R24,R17 : R16
    207             if((i!=0xffff)||(im!=0xffff)) goto copymirr;
   \   0000001C   3F0F                       CPI     R16,255
   \   0000001E   EF0F                       LDI     R16,255
   \   00000020   0790                       CPC     R25,R16
   \   00000022   F009                       BREQ    $+2+2
   \   00000024   C04C                       RJMP    ??inibase_0
   \   00000026   3FAF                       CPI     R26,255
   \   00000028   07B0                       CPC     R27,R16
   \   0000002A   F009                       BREQ    $+2+2
   \   0000002C   C048                       RJMP    ??inibase_0
    208              rde2(0x102,i,im);
   \   0000002E   E044                       LDI     R20,4
   \   00000030   E05A                       LDI     R21,10
   \   00000032   ........                   CALL    __eeget16_16
   \   00000036   01D8                       MOVW    R27 : R26,R17 : R16
   \   00000038   E044                       LDI     R20,4
   \   0000003A   E052                       LDI     R21,2
   \   0000003C   ........                   CALL    __eeget16_16
   \   00000040   01C8                       MOVW    R25 : R24,R17 : R16
    209              if((i!=0xffff)||(im!=0xffff)) goto copymirr;
   \   00000042   3F0F                       CPI     R16,255
   \   00000044   EF0F                       LDI     R16,255
   \   00000046   0790                       CPC     R25,R16
   \   00000048   F5D1                       BRNE    ??inibase_0
   \   0000004A   3FAF                       CPI     R26,255
   \   0000004C   07B0                       CPC     R27,R16
   \   0000004E   F5B9                       BRNE    ??inibase_0
    210              rde2(0x103,i,im);
   \   00000050   E046                       LDI     R20,6
   \   00000052   E05A                       LDI     R21,10
   \   00000054   ........                   CALL    __eeget16_16
   \   00000058   01D8                       MOVW    R27 : R26,R17 : R16
   \   0000005A   E046                       LDI     R20,6
   \   0000005C   E052                       LDI     R21,2
   \   0000005E   ........                   CALL    __eeget16_16
   \   00000062   01C8                       MOVW    R25 : R24,R17 : R16
    211              if((i!=0xffff)||(im!=0xffff)) goto copymirr;
   \   00000064   3F0F                       CPI     R16,255
   \   00000066   EF0F                       LDI     R16,255
   \   00000068   0790                       CPC     R25,R16
   \   0000006A   F549                       BRNE    ??inibase_0
   \   0000006C   3FAF                       CPI     R26,255
   \   0000006E   07B0                       CPC     R27,R16
   \   00000070   F531                       BRNE    ??inibase_0
    212              //память неинициирована,первое включение 
    213              //инициируем все регистры     
    214              setrg(0,dev_id);
   \   00000072   E02C                       LDI     R18,12
   \   00000074   E030                       LDI     R19,0
   \   00000076   E000                       LDI     R16,0
   \   00000078   E010                       LDI     R17,0
   \   0000007A   ....                       RCALL   setrg
    215              inicomm();  
   \   0000007C   ....                       RCALL   inicomm
    216             
    217          //    setch(0x101*2+eepromm*2,0xaa); //Специально вносимая ошибка в структуру базы для тестирования !!!
    218              setrg(0x104,2); //количество переспросов микролан
   \   0000007E   E022                       LDI     R18,2
   \   00000080   E030                       LDI     R19,0
   \   00000082   E004                       LDI     R16,4
   \   00000084   E011                       LDI     R17,1
   \   00000086   ....                       RCALL   setrg
    219              setrg(0x17f,0); //защелки отключаем
   \   00000088   E020                       LDI     R18,0
   \   0000008A   E030                       LDI     R19,0
   \   0000008C   E70F                       LDI     R16,127
   \   0000008E   E011                       LDI     R17,1
   \   00000090   ....                       RCALL   setrg
    220               __watchdog_reset();
   \   00000092   95A8                       WDR
    221              for (i=0x160;i<=0x16f;i++)setrg(i,0);//снять сигналы тревоги
   \   00000094   E680                       LDI     R24,96
   \   00000096   E091                       LDI     R25,1
   \                     ??inibase_1:
   \   00000098   E020                       LDI     R18,0
   \   0000009A   E030                       LDI     R19,0
   \   0000009C   018C                       MOVW    R17 : R16,R25 : R24
   \   0000009E   ....                       RCALL   setrg
   \   000000A0   9601                       ADIW    R25 : R24,1
   \   000000A2   3780                       CPI     R24,112
   \   000000A4   E001                       LDI     R16,1
   \   000000A6   0790                       CPC     R25,R16
   \   000000A8   F3BC                       BRLT    ??inibase_1
    222              for (i=0x380;i<=0x3ff;i++){ __watchdog_reset();setrg(i,85+0x100);}//уставки 30 градусов и 1 градус в секунду
   \   000000AA   E880                       LDI     R24,128
   \   000000AC   E093                       LDI     R25,3
   \                     ??inibase_2:
   \   000000AE   95A8                       WDR
   \   000000B0   E525                       LDI     R18,85
   \   000000B2   E031                       LDI     R19,1
   \   000000B4   018C                       MOVW    R17 : R16,R25 : R24
   \   000000B6   ....                       RCALL   setrg
   \   000000B8   9601                       ADIW    R25 : R24,1
   \   000000BA   3094                       CPI     R25,4
   \   000000BC   F3C4                       BRLT    ??inibase_2
    223          copymirr:  
    224              setrg(0x0a,i);
   \                     ??inibase_0:
   \   000000BE   019C                       MOVW    R19 : R18,R25 : R24
   \   000000C0   E00A                       LDI     R16,10
   \   000000C2   E010                       LDI     R17,0
   \   000000C4   ....                       RCALL   setrg
    225              setrg(0x0b,im);      
   \   000000C6   019D                       MOVW    R19 : R18,R27 : R26
   \   000000C8   E00B                       LDI     R16,11
   \   000000CA   E010                       LDI     R17,0
   \   000000CC   ....                       RCALL   setrg
    226              rde(3,i);
    227              if(i!=(ver<<8|subver)){
   \   000000CE   E046                       LDI     R20,6
   \   000000D0   E050                       LDI     R21,0
   \   000000D2   ........                   CALL    __eeget16_16
   \   000000D6   3003                       CPI     R16,3
   \   000000D8   4011                       SBCI    R17,1
   \   000000DA   F051                       BREQ    ??inibase_3
    228                 wre(3,ver<<8|subver);
   \   000000DC   E003                       LDI     R16,3
   \   000000DE   E011                       LDI     R17,1
   \   000000E0   E046                       LDI     R20,6
   \   000000E2   E050                       LDI     R21,0
   \   000000E4   ........                   CALL    __eeput16_16
    229                 wrem(3,ver<<8|subver);
   \   000000E8   E046                       LDI     R20,6
   \   000000EA   E058                       LDI     R21,8
   \   000000EC   ........                   CALL    __eeput16_16
    230              }
    231          //copymirr:    
    232              for(i=0;i<eepromm;i++){ //копирование зеркала из ееprom
   \                     ??inibase_3:
   \   000000F0   E080                       LDI     R24,0
   \   000000F2   E090                       LDI     R25,0
   \   000000F4   ....                       LDI     R30,LOW(hrem)
   \   000000F6   ....                       LDI     R31,(hrem) >> 8
    233                 rde(i,hrem[i]) 
   \                     ??inibase_4:
   \   000000F8   019C                       MOVW    R19 : R18,R25 : R24
   \   000000FA   0F22                       LSL     R18
   \   000000FC   1F33                       ROL     R19
   \   000000FE   01A9                       MOVW    R21 : R20,R19 : R18
   \   00000100   ........                   CALL    __eeget16_16
   \   00000104   9301                       ST      Z+,R16
   \   00000106   9311                       ST      Z+,R17
    234              }
   \   00000108   9601                       ADIW    R25 : R24,1
   \   0000010A   3094                       CPI     R25,4
   \   0000010C   F3AC                       BRLT    ??inibase_4
    235             check_cfg_change(); 
   \   0000010E   ....                       RCALL   check_cfg_change
    236             //инициация RAM- части базы
    237             for(i=0;i<0x40;i++)ramb[i]=0;
   \   00000110   ....                       LDI     R30,LOW(ramb)
   \   00000112   ....                       LDI     R31,(ramb) >> 8
   \   00000114   E420                       LDI     R18,64
   \                     ??inibase_5:
   \   00000116   E000                       LDI     R16,0
   \   00000118   9301                       ST      Z+,R16
   \   0000011A   9301                       ST      Z+,R16
   \   0000011C   952A                       DEC     R18
   \   0000011E   F7D9                       BRNE    ??inibase_5
    238          };
   \   00000120   9189                       LD      R24,Y+
   \   00000122   9199                       LD      R25,Y+
   \   00000124   91A9                       LD      R26,Y+
   \   00000126   91B9                       LD      R27,Y+
   \   00000128   9508                       RET
    239          

   \                                 In segment CODE, align 2, keep-with-next
    240          char isempty(int offset){
   \                     isempty:
   \   00000000   2F39                       MOV     R19,R25
   \   00000002   2F28                       MOV     R18,R24
    241          int i;
    242          for (i=0;i<4;i++) if (hrem[offset+i]!=0xffff) return 0;
   \   00000004   E080                       LDI     R24,0
   \   00000006   E090                       LDI     R25,0
   \   00000008   ....                       LDI     R30,LOW(hrem)
   \   0000000A   ....                       LDI     R31,(hrem) >> 8
   \   0000000C   0F00                       LSL     R16
   \   0000000E   1F11                       ROL     R17
   \   00000010   0FE0                       ADD     R30,R16
   \   00000012   1FF1                       ADC     R31,R17
   \                     ??isempty_0:
   \   00000014   8100                       LD      R16,Z
   \   00000016   8111                       LDD     R17,Z+1
   \   00000018   3F0F                       CPI     R16,255
   \   0000001A   4F1F                       SBCI    R17,255
   \   0000001C   F011                       BREQ    ??isempty_1
   \   0000001E   E000                       LDI     R16,0
   \   00000020   C007                       RJMP    ??isempty_2
   \                     ??isempty_1:
   \   00000022   9601                       ADIW    R25 : R24,1
   \   00000024   9632                       ADIW    R31 : R30,2
   \   00000026   3084                       CPI     R24,4
   \   00000028   E000                       LDI     R16,0
   \   0000002A   0790                       CPC     R25,R16
   \   0000002C   F39C                       BRLT    ??isempty_0
    243          return 1;
   \   0000002E   E001                       LDI     R16,1
   \                     ??isempty_2:
   \   00000030   2F82                       MOV     R24,R18
   \   00000032   2F93                       MOV     R25,R19
   \   00000034   9508                       RET
    244          }

   \                                 In segment CODE, align 2, keep-with-next
    245          void check_cfg_change(){
   \                     check_cfg_change:
   \   00000000   92BA                       ST      -Y,R11
   \   00000002   92AA                       ST      -Y,R10
   \   00000004   929A                       ST      -Y,R9
   \   00000006   928A                       ST      -Y,R8
   \   00000008   927A                       ST      -Y,R7
   \   0000000A   926A                       ST      -Y,R6
   \   0000000C   925A                       ST      -Y,R5
   \   0000000E   924A                       ST      -Y,R4
   \   00000010   93BA                       ST      -Y,R27
   \   00000012   93AA                       ST      -Y,R26
   \   00000014   939A                       ST      -Y,R25
   \   00000016   938A                       ST      -Y,R24
   \   00000018                              REQUIRE ?Register_R4_is_cg_reg
   \   00000018                              REQUIRE ?Register_R5_is_cg_reg
   \   00000018                              REQUIRE ?Register_R6_is_cg_reg
   \   00000018                              REQUIRE ?Register_R7_is_cg_reg
   \   00000018                              REQUIRE ?Register_R8_is_cg_reg
   \   00000018                              REQUIRE ?Register_R9_is_cg_reg
   \   00000018                              REQUIRE ?Register_R10_is_cg_reg
   \   00000018                              REQUIRE ?Register_R11_is_cg_reg
    246          
    247          char i,j;
    248          /*
    249              for (i=0;i<=7;i++) {
    250                 if (hrem[0x160+i]!=0) for (j=0;j<=16;j++) {
    251                    if ( ((hrem[0x160+i])&(1<<j))!=0) 
    252                       if (isempty(0x180+i*16+j)) setrg(0x160+i,hrem[0x160+i]&~(1<<j));
    253                    
    254                 }
    255                 if (hrem[0x168+i]!=0) for (j=0;j<=16;j++) {
    256                    if ( ((hrem[0x168+i])&(1<<j))!=0) 
    257                       if (isempty(0x180+i*16+j)) setrg(0x160+i,hrem[0x168+i]&~(1<<j));
    258                    
    259                 }
    260              }
    261          */
    262              for (i=0;i<=7;i++) {
   \   00000018   E600                       LDI     R16,96
   \   0000001A   2EA0                       MOV     R10,R16
   \   0000001C   E001                       LDI     R16,1
   \   0000001E   2EB0                       MOV     R11,R16
   \   00000020   ....                       LDI     R16,LOW((hrem + 704))
   \   00000022   2E40                       MOV     R4,R16
   \   00000024   ....                       LDI     R16,(hrem + 704) >> 8
   \   00000026   2E50                       MOV     R5,R16
   \   00000028   E8A0                       LDI     R26,128
   \   0000002A   E0B1                       LDI     R27,1
   \   0000002C   E098                       LDI     R25,8
    263                 if (hrem[0x160+i]!=0) for (j=0;j<=15;j++) {
   \                     ??check_cfg_change_0:
   \   0000002E   01F2                       MOVW    R31 : R30,R5 : R4
   \   00000030   8100                       LD      R16,Z
   \   00000032   8111                       LDD     R17,Z+1
   \   00000034   2B01                       OR      R16,R17
   \   00000036   F121                       BREQ    ??check_cfg_change_1
   \   00000038   E080                       LDI     R24,0
   \   0000003A   014D                       MOVW    R9 : R8,R27 : R26
    264                    if ( ((hrem[0x160+i])&(1<<j))!=0) 
   \                     ??check_cfg_change_2:
   \   0000003C   E001                       LDI     R16,1
   \   0000003E   E010                       LDI     R17,0
   \   00000040   2F48                       MOV     R20,R24
   \   00000042   ........                   CALL    ?S_SHL_L02
   \   00000046   0138                       MOVW    R7 : R6,R17 : R16
   \   00000048   01F2                       MOVW    R31 : R30,R5 : R4
   \   0000004A   8100                       LD      R16,Z
   \   0000004C   8111                       LDD     R17,Z+1
   \   0000004E   2106                       AND     R16,R6
   \   00000050   2117                       AND     R17,R7
   \   00000052   2B01                       OR      R16,R17
   \   00000054   F071                       BREQ    ??check_cfg_change_3
    265                       if (isempty(0x180+i*16*4+j*4))   setrg(0x160+i,hrem[0x160+i]&~(1<<j));
   \   00000056   0184                       MOVW    R17 : R16,R9 : R8
   \   00000058   ....                       RCALL   isempty
   \   0000005A   2300                       TST     R16
   \   0000005C   F051                       BREQ    ??check_cfg_change_3
   \   0000005E   01F2                       MOVW    R31 : R30,R5 : R4
   \   00000060   8100                       LD      R16,Z
   \   00000062   8111                       LDD     R17,Z+1
   \   00000064   9460                       COM     R6
   \   00000066   9470                       COM     R7
   \   00000068   2260                       AND     R6,R16
   \   0000006A   2271                       AND     R7,R17
   \   0000006C   0193                       MOVW    R19 : R18,R7 : R6
   \   0000006E   0185                       MOVW    R17 : R16,R11 : R10
   \   00000070   ....                       RCALL   setrg
    266                    
    267                 }
   \                     ??check_cfg_change_3:
   \   00000072   9583                       INC     R24
   \   00000074   E004                       LDI     R16,4
   \   00000076   0E80                       ADD     R8,R16
   \   00000078   E000                       LDI     R16,0
   \   0000007A   1E90                       ADC     R9,R16
   \   0000007C   3180                       CPI     R24,16
   \   0000007E   F2F0                       BRCS    ??check_cfg_change_2
    268                 if (hrem[0x168+i]!=0) for (j=0;j<=15;j++) {
   \                     ??check_cfg_change_1:
   \   00000080   01F2                       MOVW    R31 : R30,R5 : R4
   \   00000082   8900                       LDD     R16,Z+16
   \   00000084   8911                       LDD     R17,Z+17
   \   00000086   2B01                       OR      R16,R17
   \   00000088   F121                       BREQ    ??check_cfg_change_4
   \   0000008A   E080                       LDI     R24,0
   \   0000008C   014D                       MOVW    R9 : R8,R27 : R26
    269                    if ( ((hrem[0x168+i])&(1<<j))!=0) 
   \                     ??check_cfg_change_5:
   \   0000008E   E001                       LDI     R16,1
   \   00000090   E010                       LDI     R17,0
   \   00000092   2F48                       MOV     R20,R24
   \   00000094   ........                   CALL    ?S_SHL_L02
   \   00000098   0138                       MOVW    R7 : R6,R17 : R16
   \   0000009A   01F2                       MOVW    R31 : R30,R5 : R4
   \   0000009C   8900                       LDD     R16,Z+16
   \   0000009E   8911                       LDD     R17,Z+17
   \   000000A0   2106                       AND     R16,R6
   \   000000A2   2117                       AND     R17,R7
   \   000000A4   2B01                       OR      R16,R17
   \   000000A6   F071                       BREQ    ??check_cfg_change_6
    270                       if (isempty(0x180+i*16*4+j*4)) setrg(0x160+i,hrem[0x168+i]&~(1<<j));
   \   000000A8   0184                       MOVW    R17 : R16,R9 : R8
   \   000000AA   ....                       RCALL   isempty
   \   000000AC   2300                       TST     R16
   \   000000AE   F051                       BREQ    ??check_cfg_change_6
   \   000000B0   01F2                       MOVW    R31 : R30,R5 : R4
   \   000000B2   8900                       LDD     R16,Z+16
   \   000000B4   8911                       LDD     R17,Z+17
   \   000000B6   9460                       COM     R6
   \   000000B8   9470                       COM     R7
   \   000000BA   2260                       AND     R6,R16
   \   000000BC   2271                       AND     R7,R17
   \   000000BE   0193                       MOVW    R19 : R18,R7 : R6
   \   000000C0   0185                       MOVW    R17 : R16,R11 : R10
   \   000000C2   ....                       RCALL   setrg
    271                    
    272                 }
   \                     ??check_cfg_change_6:
   \   000000C4   9583                       INC     R24
   \   000000C6   E004                       LDI     R16,4
   \   000000C8   0E80                       ADD     R8,R16
   \   000000CA   E000                       LDI     R16,0
   \   000000CC   1E90                       ADC     R9,R16
   \   000000CE   3180                       CPI     R24,16
   \   000000D0   F2F0                       BRCS    ??check_cfg_change_5
    273              }
   \                     ??check_cfg_change_4:
   \   000000D2   5CA0                       SUBI    R26,192
   \   000000D4   4FBF                       SBCI    R27,255
   \   000000D6   E002                       LDI     R16,2
   \   000000D8   0E40                       ADD     R4,R16
   \   000000DA   E000                       LDI     R16,0
   \   000000DC   1E50                       ADC     R5,R16
   \   000000DE   E001                       LDI     R16,1
   \   000000E0   0EA0                       ADD     R10,R16
   \   000000E2   E000                       LDI     R16,0
   \   000000E4   1EB0                       ADC     R11,R16
   \   000000E6   959A                       DEC     R25
   \   000000E8   F009                       BREQ    $+2+2
   \   000000EA   CFA1                       RJMP    ??check_cfg_change_0
    274          }
   \   000000EC   9189                       LD      R24,Y+
   \   000000EE   9199                       LD      R25,Y+
   \   000000F0   91A9                       LD      R26,Y+
   \   000000F2   91B9                       LD      R27,Y+
   \   000000F4   9049                       LD      R4,Y+
   \   000000F6   9059                       LD      R5,Y+
   \   000000F8   9069                       LD      R6,Y+
   \   000000FA   9079                       LD      R7,Y+
   \   000000FC   9089                       LD      R8,Y+
   \   000000FE   9099                       LD      R9,Y+
   \   00000100   90A9                       LD      R10,Y+
   \   00000102   90B9                       LD      R11,Y+
   \   00000104   9508                       RET

   \                                 In segment CODE, align 2, keep-with-next
    275          UINT basechk(){
   \                     basechk:
   \   00000000   2E19                       MOV     R1,R25
   \   00000002   2E08                       MOV     R0,R24
    276          int i,rg,rg2;
    277          // if (hre[0]!=hrem[0])return 0; 
    278           for(i=1;i<eepromm;i++){
   \   00000004   E081                       LDI     R24,1
   \   00000006   E090                       LDI     R25,0
   \   00000008   E0E2                       LDI     R30,2
   \   0000000A   E0F8                       LDI     R31,8
    279               rde(i,rg) 
    280               rdem(i,rg2) 
    281             if (rg!=rg2)return i;
   \                     ??basechk_0:
   \   0000000C   019C                       MOVW    R19 : R18,R25 : R24
   \   0000000E   0F22                       LSL     R18
   \   00000010   1F33                       ROL     R19
   \   00000012   01A9                       MOVW    R21 : R20,R19 : R18
   \   00000014   ........                   CALL    __eeget16_16
   \   00000018   01B8                       MOVW    R23 : R22,R17 : R16
   \   0000001A   01AF                       MOVW    R21 : R20,R31 : R30
   \   0000001C   ........                   CALL    __eeget16_16
   \   00000020   1760                       CP      R22,R16
   \   00000022   0771                       CPC     R23,R17
   \   00000024   F011                       BREQ    ??basechk_1
   \   00000026   018C                       MOVW    R17 : R16,R25 : R24
   \   00000028   C006                       RJMP    ??basechk_2
    282           }
   \                     ??basechk_1:
   \   0000002A   9601                       ADIW    R25 : R24,1
   \   0000002C   9632                       ADIW    R31 : R30,2
   \   0000002E   3094                       CPI     R25,4
   \   00000030   F36C                       BRLT    ??basechk_0
    283           return 0;
   \   00000032   E000                       LDI     R16,0
   \   00000034   E010                       LDI     R17,0
   \                     ??basechk_2:
   \   00000036   2D80                       MOV     R24,R0
   \   00000038   2D91                       MOV     R25,R1
   \   0000003A   9508                       RET
    284          }

   \                                 In segment ABSOLUTE, at 0x3c
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x3e
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                              DS 2

   \                                 In segment ABSOLUTE, at 0x5f
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                              DS 1

   Maximum stack usage in bytes:

     Function              CSTACK RSTACK
     --------              ------ ------
     basechk                   0      4
     check_cfg_change         12      4
       -> isempty             12      2
       -> setrg               12      2
       -> isempty             12      2
       -> setrg               12      2
     getrg                     0      2
     inibase                   4      4
       -> setrg                4      2
       -> inicomm              4      2
       -> setrg                4      2
       -> setrg                4      2
       -> setrg                4      2
       -> setrg                4      2
       -> setrg                4      2
       -> setrg                4      2
       -> check_cfg_change     4      2
     inicomm                   0      2
       -> setrg                0      2
       -> setrg                0      2
       -> setrg                0      2
     isempty                   0      2
     setch                     0      2
     setrg                     8      2
       -> setch                8      2
       -> setch                8      2
       -> setch                8      2
       -> setch                8      2
     wrblock                   2      2
       -> setch                2      2
     wrblock_ini               2      2
       -> wrblock              2      2


   Segment part sizes:

     Function/Label   Bytes
     --------------   -----
     hrem             2048
     ramb              512
     getrg              90
     ??setch_0          20
     rgadt               5
     tmpb              254
     wrblock           284
     wrblock_ini        82
     setrg             100
     inicomm            64
     inibase           298
     isempty            54
     check_cfg_change  262
     basechk            60
     _A_EECR             1
     _A_EEDR             1
     _A_EEAR             2
     _A_SREG             1
      Others             7

 
     5 bytes in segment ABSOLUTE
 1 314 bytes in segment CODE
     7 bytes in segment INITTAB
 2 819 bytes in segment NEAR_Z
 
 1 314 bytes of CODE memory (+ 7 bytes shared)
 2 819 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none
