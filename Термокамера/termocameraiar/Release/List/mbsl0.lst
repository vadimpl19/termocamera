##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V3.20C/W32             04/Aug/2006  13:21:54 #
# Copyright 1996-2004 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  D:\temp\sys_msap01mk_dev0103\mbsl0.c                    #
#    Command line =  --cpu=m128 -ms -o D:\temp\sys_msap01mk_dev0103\Release\ #
#                    Obj\ -lCN D:\temp\sys_msap01mk_dev0103\Release\List\    #
#                    -y --initializers_in_flash -s9                          #
#                    -DENABLE_BIT_DEFINITIONS -e -I "F:\Program Files\IAR    #
#                    Systems\Embedded Workbench 3.2\avr\INC\" -I             #
#                    "F:\Program Files\IAR Systems\Embedded Workbench        #
#                    3.2\avr\INC\CLIB\" --eeprom_size 4096                   #
#                    D:\temp\sys_msap01mk_dev0103\mbsl0.c                    #
#    List file    =  D:\temp\sys_msap01mk_dev0103\Release\List\mbsl0.lst     #
#    Object file  =  D:\temp\sys_msap01mk_dev0103\Release\Obj\mbsl0.r90      #
#                                                                            #
#                                                                            #
##############################################################################

D:\temp\sys_msap01mk_dev0103\mbsl0.c
      1          #define mbslave0
      2          #include "ina90.h"
      3          #include "mbsl0.h"

   \                                 In segment CODE, align 2, keep-with-next
   \   __nearfunc void reset_cpu()
   \                     reset_cpu:
   \   00000000   E001                       LDI     R16,1
   \   00000002   9300....                   STS     (wr_fl + 1),R16
   \   00000006   9508                       RET

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
      4          #include "led.h"
      5          #include "types.h" 
      6          //#include "hist.h"
      7          #include "base.h"
      8          #include "zerodef.h"
      9          #include <iom128.h>
     10          //#define ENABLE_BIT_DEFINITIONS 1
     11          
     12          
     13          struct isr_cntx u0;
     14          #ifdef mbslave0
     15          extern struct isr_cntx u1;
     16          #else 
     17          extern struct isr_cntx uZ;
     18          #endif
     19          extern UINT getcrc(UCHAR *puchMsg, UINT usDataLen);
     20          char len0;
     21          char *txf0;
   \                     txf0:
   \   00000000                              DS 2
   \   unsigned char __near t25
   \                     t25:
   \   00000002                              DS 1
   \   unsigned char __near t35
   \                     t35:
   \   00000003                              DS 1
   \   unsigned char __near t45
   \                     t45:
   \   00000004                              DS 1
   \                     len0:
   \   00000005                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   char __near wr_fl
   \                     wr_fl:
   \   00000000                              DS 1
   \   char __near res_fl
   \                     res_fl:
   \   00000001                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   char __near mbstate
   \                     mbstate:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \                     u0:
   \   00000000                              DS 148
     22          
     23          enum tstates {sync,wait1,rx,senpr,senbody,senpost}  ;

   \                                 In segment CODE, align 2, keep-with-next
     24          void initmb0(unsigned int speed,char par,char ad){
   \                     initmb0:
   \   00000000   2F5B                       MOV     R21,R27
   \   00000002   2F4A                       MOV     R20,R26
   \   00000004   01F8                       MOVW    R31 : R30,R17 : R16
     25          _ID
   \   00000006   94F8                       CLI
     26          //redon1
     27          //DDRE_Bit2=1; //установили бит управления передатчиком на вывод
     28          txen0ini
   \   00000008   9AD0                       SBI     0x1A,0x00
     29          SEND0OFF;
   \   0000000A   98D8                       CBI     0x1B,0x00
     30           UCSR0A=2; //установили бит  U2X
   \   0000000C   E002                       LDI     R16,2
   \   0000000E   B90B                       OUT     0x0B,R16
     31           UCSR0B = (1<<RXEN0)|(1<<TXEN0);
   \   00000010   E108                       LDI     R16,24
   \   00000012   B90A                       OUT     0x0A,R16
     32           UCSR0C=((1<<1)|(1<<2));//УСТАНОВИЛИ 8БИТ ДАННЫХ И 1 СТОП
   \   00000014   E006                       LDI     R16,6
   \   00000016   93000095                   STS     149,R16
     33           u0.addr=ad;
   \   0000001A   ....                       LDI     R16,LOW(u0)
   \   0000001C   ....                       LDI     R17,(u0) >> 8
   \   0000001E   01D8                       MOVW    R27 : R26,R17 : R16
   \   00000020   9613                       ADIW    R27 : R26,3
   \   00000022   933C                       ST      X,R19
     34           switch (par){
   \   00000024   2322                       TST     R18
   \   00000026   F029                       BREQ    ??initmb0_0
   \   00000028   952A                       DEC     R18
   \   0000002A   F051                       BREQ    ??initmb0_1
   \   0000002C   952A                       DEC     R18
   \   0000002E   F021                       BREQ    ??initmb0_2
   \   00000030   C00D                       RJMP    ??initmb0_3
     35             case none:{ 
     36               UCSR0C&=~((1<<UPM01)|(1<<UPM0Z));
   \                     ??initmb0_0:
   \   00000032   91200095                   LDS     R18,149
   \   00000036   C008                       RJMP    ??initmb0_4
     37               break;
     38             };  
     39             case even:{ 
     40               UCSR0C|= 1<<UPM01;
   \                     ??initmb0_2:
   \   00000038   E226                       LDI     R18,38
   \   0000003A   93200095                   STS     149,R18
     41               UCSR0C&=~(1<<UPM0Z);
   \   0000003E   C004                       RJMP    ??initmb0_4
     42               break;
     43             };  
     44             case odd:{ 
     45               UCSR0C|= 1<<UPM01;
   \                     ??initmb0_1:
   \   00000040   E226                       LDI     R18,38
   \   00000042   93200095                   STS     149,R18
     46               UCSR0C|=1<<UPM0Z;
   \   00000046   E326                       LDI     R18,54
   \                     ??initmb0_4:
   \   00000048   93200095                   STS     149,R18
     47               break;
     48             };  
     49           };
     50          /* регистр tccr0
     51           7 =1 - не нужен PWM
     52           6,3 = zero - обычная мода
     53           5,4 =zero - не используется выход модуляции
     54           2,1,zero - предделитель
     55          */
     56            switch (speed){
   \                     ??initmb0_3:
   \   0000004C   ....                       LDI     R26,LOW(txf0)
   \   0000004E   ....                       LDI     R27,(txf0) >> 8
   \   00000050   97F0                       SBIW    R31 : R30,48
   \   00000052   F081                       BREQ    ??initmb0_5
   \   00000054   97F0                       SBIW    R31 : R30,48
   \   00000056   F0F1                       BREQ    ??initmb0_6
   \   00000058   56E0                       SUBI    R30,96
   \   0000005A   40F0                       SBCI    R31,0
   \   0000005C   F159                       BREQ    ??initmb0_7
   \   0000005E   5CE0                       SUBI    R30,192
   \   00000060   40F0                       SBCI    R31,0
   \   00000062   F1A1                       BREQ    ??initmb0_8
   \   00000064   5CE0                       SUBI    R30,192
   \   00000066   40F0                       SBCI    R31,0
   \   00000068   F1F9                       BREQ    ??initmb0_9
   \   0000006A   54E0                       SUBI    R30,64
   \   0000006C   40F2                       SBCI    R31,2
   \   0000006E   F409                       BRNE    $+2+2
   \   00000070   C049                       RJMP    ??initmb0_10
   \   00000072   C054                       RJMP    ??initmb0_11
     57              case 48:{
     58                TCCR0CH=CTC124_0;// CTC мода предделитель 1024;
   \                     ??initmb0_5:
   \   00000074   E82F                       LDI     R18,143
   \   00000076   BF23                       OUT     0x33,R18
     59                UBRR0L=383-256; 
   \   00000078   E72F                       LDI     R18,127
   \   0000007A   B929                       OUT     0x09,R18
     60                UBRR0H = (unsigned char)(383>>8);
   \   0000007C   E021                       LDI     R18,1
   \   0000007E   93200090                   STS     144,R18
     61                UBRR0L = (unsigned char)383;
   \   00000082   E72F                       LDI     R18,127
   \   00000084   B929                       OUT     0x09,R18
     62                t25=83;
   \   00000086   E523                       LDI     R18,83
   \   00000088   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000008A   8322                       STD     Z+2,R18
     63                t35=116;
   \   0000008C   E724                       LDI     R18,116
   \   0000008E   8323                       STD     Z+3,R18
     64                t45=OCR0T=148;
   \   00000090   E924                       LDI     R18,148
   \   00000092   C051                       RJMP    ??initmb0_12
     65                
     66                break;
     67              }case 96:{
     68                t25=41;
   \                     ??initmb0_6:
   \   00000094   E229                       LDI     R18,41
   \   00000096   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000098   8322                       STD     Z+2,R18
     69                t35=58;
   \   0000009A   E32A                       LDI     R18,58
   \   0000009C   8323                       STD     Z+3,R18
     70                TCCR0CH=CTC124_0; // CTC мода предделитель 1024;
   \   0000009E   E82F                       LDI     R18,143
   \   000000A0   BF23                       OUT     0x33,R18
     71                t45=OCR0T=74;
   \   000000A2   E42A                       LDI     R18,74
   \   000000A4   BF21                       OUT     0x31,R18
   \   000000A6   8324                       STD     Z+4,R18
     72                UBRR0H = zero;
   \   000000A8   E020                       LDI     R18,0
   \   000000AA   93200090                   STS     144,R18
     73                UBRR0L = 191;
   \   000000AE   EB2F                       LDI     R18,191
   \   000000B0   B929                       OUT     0x09,R18
     74                
     75                break;
   \   000000B2   C043                       RJMP    ??initmb0_13
     76              }case 192:{
     77                t25=82;
   \                     ??initmb0_7:
   \   000000B4   E522                       LDI     R18,82
   \   000000B6   01FD                       MOVW    R31 : R30,R27 : R26
   \   000000B8   8322                       STD     Z+2,R18
     78                t35=116;
   \   000000BA   E724                       LDI     R18,116
   \   000000BC   8323                       STD     Z+3,R18
     79                TCCR0CH=CTC256_0; // CTC мода предделитель 256;
   \   000000BE   E82E                       LDI     R18,142
   \   000000C0   BF23                       OUT     0x33,R18
     80                UBRR0H = zero;
   \   000000C2   E020                       LDI     R18,0
   \   000000C4   93200090                   STS     144,R18
     81                UBRR0L = 95;
   \   000000C8   E52F                       LDI     R18,95
   \   000000CA   C033                       RJMP    ??initmb0_14
     82                t45=OCR0T=149;
     83                
     84                break;
     85              }case 384:{
     86                t25=41;
   \                     ??initmb0_8:
   \   000000CC   E229                       LDI     R18,41
   \   000000CE   01FD                       MOVW    R31 : R30,R27 : R26
   \   000000D0   8322                       STD     Z+2,R18
     87                t35=58;
   \   000000D2   E32A                       LDI     R18,58
   \   000000D4   8323                       STD     Z+3,R18
     88                TCCR0CH=CTC256_0;
   \   000000D6   E82E                       LDI     R18,142
   \   000000D8   BF23                       OUT     0x33,R18
     89                UBRR0H = zero;
   \   000000DA   E020                       LDI     R18,0
   \   000000DC   93200090                   STS     144,R18
     90                UBRR0L = 47;    
   \   000000E0   E22F                       LDI     R18,47
   \                     ??initmb0_15:
   \   000000E2   B929                       OUT     0x09,R18
     91                t45=OCR0T=74;
   \   000000E4   E42A                       LDI     R18,74
   \   000000E6   C027                       RJMP    ??initmb0_12
     92                break;
     93              }
     94              case 576: {
     95                t25=28; 
   \                     ??initmb0_9:
   \   000000E8   E12C                       LDI     R18,28
   \   000000EA   01FD                       MOVW    R31 : R30,R27 : R26
   \   000000EC   8322                       STD     Z+2,R18
     96                t35=39;
   \   000000EE   E227                       LDI     R18,39
   \   000000F0   8323                       STD     Z+3,R18
     97                TCCR0CH=CTC256_0; 
   \   000000F2   E82E                       LDI     R18,142
   \   000000F4   BF23                       OUT     0x33,R18
     98                UBRR0H = zero;
   \   000000F6   E020                       LDI     R18,0
   \   000000F8   93200090                   STS     144,R18
     99                UBRR0L = 31;
   \   000000FC   E12F                       LDI     R18,31
   \   000000FE   B929                       OUT     0x09,R18
    100                t45=OCR0T=49;
   \   00000100   E321                       LDI     R18,49
   \   00000102   C019                       RJMP    ??initmb0_12
    101                break;
    102              }
    103              case 1152: {
    104          //    t25=14;
    105          //    t35=20;
    106                t25=41; 
   \                     ??initmb0_10:
   \   00000104   E229                       LDI     R18,41
   \   00000106   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000108   8322                       STD     Z+2,R18
    107                t35=58;
   \   0000010A   E32A                       LDI     R18,58
   \   0000010C   8323                       STD     Z+3,R18
    108          
    109                TCCR0CH=CTC256_0; 
   \   0000010E   E82E                       LDI     R18,142
   \   00000110   BF23                       OUT     0x33,R18
    110                UBRR0H = zero;
   \   00000112   E020                       LDI     R18,0
   \   00000114   93200090                   STS     144,R18
    111                UBRR0L = 15;
   \   00000118   E02F                       LDI     R18,15
   \   0000011A   CFE3                       RJMP    ??initmb0_15
    112          //      t45=OCR0T=24;
    113                t45=OCR0T=74;
    114                break;
    115              }
    116              default: {
    117                t25=82;    
   \                     ??initmb0_11:
   \   0000011C   E522                       LDI     R18,82
   \   0000011E   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000120   8322                       STD     Z+2,R18
    118                t35=116;
   \   00000122   E724                       LDI     R18,116
   \   00000124   8323                       STD     Z+3,R18
    119                TCCR0CH=CTC256_0; // скорость по умолчанию 19200
   \   00000126   E82E                       LDI     R18,142
   \   00000128   BF23                       OUT     0x33,R18
    120                UBRR0H = 149;
   \   0000012A   E925                       LDI     R18,149
   \   0000012C   93200090                   STS     144,R18
    121                UBRR0L = zero;
   \   00000130   E020                       LDI     R18,0
   \                     ??initmb0_14:
   \   00000132   B929                       OUT     0x09,R18
    122                t45=OCR0T=149;
   \   00000134   E925                       LDI     R18,149
   \                     ??initmb0_12:
   \   00000136   BF21                       OUT     0x31,R18
   \   00000138   8324                       STD     Z+4,R18
    123             };                 
    124            };
    125          //  u0.state=wait1;
    126          
    127            u0.state=sync;
   \                     ??initmb0_13:
   \   0000013A   E020                       LDI     R18,0
   \   0000013C   01F8                       MOVW    R31 : R30,R17 : R16
   \   0000013E   8321                       STD     Z+1,R18
    128            TCNT0CH=zero;
   \   00000140   BF22                       OUT     0x32,R18
    129          //  TIMSK|=2;
    130            OCIE0CH=1;//разрешили прерывание от таймера  по COMP !!!!!!
   \   00000142   B707                       IN      R16,0x37
   \   00000144   6002                       ORI     R16,0x02
   \   00000146   BF07                       OUT     0x37,R16
    131            UCSR0B|=(1<<RXCIE0); //разрешили прерывания от приемника
   \   00000148   9A57                       SBI     0x0A,0x07
    132          _IE  
   \   0000014A   9478                       SEI
    133          };
   \   0000014C   2FA4                       MOV     R26,R20
   \   0000014E   2FB5                       MOV     R27,R21
   \   00000150   9508                       RET
    134          /////////////////////////////////////////////////////////////////////////////////////////////////////////
    135          
    136          #pragma vector=USART0_RXC_vect

   \                                 In segment CODE, align 2, keep-with-next
    137          __interrupt void rx0_isr() {
   \                     rx0_isr:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   93FA                       ST      -Y,R31
   \   00000006   93EA                       ST      -Y,R30
   \   00000008   933A                       ST      -Y,R19
   \   0000000A   932A                       ST      -Y,R18
   \   0000000C   931A                       ST      -Y,R17
   \   0000000E   930A                       ST      -Y,R16
   \   00000010   B73F                       IN      R19,0x3F
    138          
    139          //red4^=1;
    140            if((u0.state==sync)){goto error_rx;};
   \   00000012   ....                       LDI     R30,LOW(u0)
   \   00000014   ....                       LDI     R31,(u0) >> 8
   \   00000016   8101                       LDD     R16,Z+1
   \   00000018   2300                       TST     R16
   \   0000001A   F159                       BREQ    ??rx0_isr_0
    141            if (u0.state==wait1){
   \   0000001C   3001                       CPI     R16,1
   \   0000001E   F4D1                       BRNE    ??rx0_isr_1
    142          
    143              TCNT0CH=zero;
   \   00000020   E000                       LDI     R16,0
   \   00000022   BF02                       OUT     0x32,R16
    144          
    145          //      OCF0CH=1;
    146          //     TIFR=1<<OCF0CH; 
    147                TIFR=1<<CH0f; 
   \   00000024   E002                       LDI     R16,2
   \   00000026   BF06                       OUT     0x36,R16
    148          //    TIMSK_Bit1=1; //разрешили прерывания от таймера
    149              OCIE0CH=1; 
   \   00000028   B707                       IN      R16,0x37
   \   0000002A   6002                       ORI     R16,0x02
   \   0000002C   BF07                       OUT     0x37,R16
    150          
    151              if((UCSR0A&((1<<FE0)|(1<<UPE0)))!=zero){goto error_rx;};//была проверка на корректность кадра -стоп бит и  паритет /!!!!!!!
   \   0000002E   B10B                       IN      R16,0x0B
   \   00000030   7104                       ANDI    R16,0x14
   \   00000032   F4F9                       BRNE    ??rx0_isr_0
    152          //    gron3;
    153              u0.state=rx;
   \   00000034   E002                       LDI     R16,2
   \   00000036   8301                       STD     Z+1,R16
    154              if (u0.l>(128+8))goto error_rx;
   \   00000038   8102                       LDD     R16,Z+2
   \   0000003A   3809                       CPI     R16,137
   \   0000003C   F4D0                       BRCC    ??rx0_isr_0
    155              u0.rbuf[u0.l++]=UDR0;
   \   0000003E   B12C                       IN      R18,0x0C
   \   00000040   01DF                       MOVW    R27 : R26,R31 : R30
   \   00000042   9614                       ADIW    R27 : R26,4
   \                     ??rx0_isr_2:
   \   00000044   E010                       LDI     R17,0
   \   00000046   0FA0                       ADD     R26,R16
   \   00000048   1FB1                       ADC     R27,R17
   \   0000004A   932C                       ST      X,R18
   \   0000004C   8102                       LDD     R16,Z+2
   \   0000004E   9503                       INC     R16
   \   00000050   8302                       STD     Z+2,R16
    156              //    u0.rbuf[u0.l++]=b;
    157              goto erx;     
   \   00000052   C016                       RJMP    ??rx0_isr_3
    158            }else { //осталось состояние приема тела кадра. При остальных прерываний быть не должно
    159          //   gron3  
    160               if(TCNT0CH<t45){ 
   \                     ??rx0_isr_1:
   \   00000054   B702                       IN      R16,0x32
   \   00000056   9110....                   LDS     R17,(txf0 + 4)
   \   0000005A   1701                       CP      R16,R17
   \   0000005C   F450                       BRCC    ??rx0_isr_0
    161          //        if(((UCSR0A&16)!=zero)){goto error_rx;};//была проверка на корректность кадра -стоп бит и  паритет
    162                    if((UCSR0A&((1<<FE0)|(1<<UPE0)))!=zero){goto error_rx;};//была проверка на корректность кадра -стоп бит и  паритет /!!!!!!!
   \   0000005E   B10B                       IN      R16,0x0B
   \   00000060   7104                       ANDI    R16,0x14
   \   00000062   F439                       BRNE    ??rx0_isr_0
    163                  TCNT0CH=zero; u0.rbuf[u0.l++]=UDR0; 
   \   00000064   E000                       LDI     R16,0
   \   00000066   BF02                       OUT     0x32,R16
   \   00000068   B12C                       IN      R18,0x0C
   \   0000006A   01DF                       MOVW    R27 : R26,R31 : R30
   \   0000006C   9614                       ADIW    R27 : R26,4
   \   0000006E   8102                       LDD     R16,Z+2
   \   00000070   CFE9                       RJMP    ??rx0_isr_2
    164                  goto erx;
    165              }
    166            }
    167            // если же не уложились в интервал - сбрасываем кадр 
    168          error_rx:  
    169            u0.l=zero; //сбрасываем  кадр.
   \                     ??rx0_isr_0:
   \   00000072   E000                       LDI     R16,0
   \   00000074   8302                       STD     Z+2,R16
    170          
    171          //  off3 ;redon3; 
    172          //  {char b;     b=UDR0; }
    173            getrx0 
   \   00000076   930A               ST  -Y,R16
   \   00000078   B10C               in R16,0x0c
   \   0000007A   9109               LD R16,Y+ 
    174            TCNT0CH=zero;u0.state=sync; 
   \   0000007C   BF02                       OUT     0x32,R16
   \   0000007E   8301                       STD     Z+1,R16
    175          erx: 
    176          // off3 
    177          _NOP(); 
   \                     ??rx0_isr_3:
   \   00000080   0000                       NOP
    178          };   
   \   00000082   BF3F                       OUT     0x3F,R19
   \   00000084   9109                       LD      R16,Y+
   \   00000086   9119                       LD      R17,Y+
   \   00000088   9129                       LD      R18,Y+
   \   0000008A   9139                       LD      R19,Y+
   \   0000008C                              REQUIRE ?Subroutine0
   \   0000008C                      ;               // Fall through to label ?Subroutine0

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   91E9                       LD      R30,Y+
   \   00000002   91F9                       LD      R31,Y+
   \   00000004   91A9                       LD      R26,Y+
   \   00000006   91B9                       LD      R27,Y+
   \   00000008   9518                       RETI
    179          ///////////////////////////////////////////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 2, keep-with-next
    180          void sen0(char *outbuf,char l){
   \                     sen0:
    181            __disable_interrupt();
   \   00000000   94F8                       CLI
    182            TCNT0CH=zero;
   \   00000002   E030                       LDI     R19,0
   \   00000004   BF32                       OUT     0x32,R19
    183            SEND0ON;   
   \   00000006   9AD8                       SBI     0x1B,0x00
    184            //OCR0T=t35;
    185            OCR0T=t35;
   \   00000008   ....                       LDI     R30,LOW(txf0)
   \   0000000A   ....                       LDI     R31,(txf0) >> 8
   \   0000000C   8133                       LDD     R19,Z+3
   \   0000000E   BF31                       OUT     0x31,R19
    186            u0.state=senpr;
   \   00000010   E033                       LDI     R19,3
   \   00000012   9330....                   STS     (u0 + 1),R19
    187            OCIE0CH=1; //!!!! разрешаем прерывания от таймера
   \   00000016   B737                       IN      R19,0x37
   \   00000018   6032                       ORI     R19,0x02
   \   0000001A   BF37                       OUT     0x37,R19
    188          
    189            txf0=outbuf;len0=l;
   \   0000001C   8300                       ST      Z,R16
   \   0000001E   8311                       STD     Z+1,R17
   \   00000020   8325                       STD     Z+5,R18
    190            __enable_interrupt();
   \   00000022   9478                       SEI
    191          
    192          }
   \   00000024   9508                       RET
    193          ///////////////////////////////////////////////////////////////////////////////////////////////////
    194          extern UCHAR maxc;
    195          extern UINT  ramb[ramm];

   \                                 In segment CODE, align 2, keep-with-next
    196          char fc16handl0(){ //функция обработки fc=16 возвращает zero или Exeption
   \                     fc16handl0:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   939A                       ST      -Y,R25
   \   00000006   938A                       ST      -Y,R24
    197          char i;
    198          UINT rg;
    199            rg=(u0.rbuf[2]<<8)+u0.rbuf[3];
   \   00000008   ....                       LDI     R30,LOW(u0)
   \   0000000A   ....                       LDI     R31,(u0) >> 8
   \   0000000C   8136                       LDD     R19,Z+6
   \   0000000E   E020                       LDI     R18,0
   \   00000010   8107                       LDD     R16,Z+7
   \   00000012   E010                       LDI     R17,0
   \   00000014   0F02                       ADD     R16,R18
   \   00000016   1F13                       ADC     R17,R19
    200            if (rg==0x777){reset_cpu();  return zero;}; //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   \   00000018   3707                       CPI     R16,119
   \   0000001A   E027                       LDI     R18,7
   \   0000001C   0712                       CPC     R17,R18
   \   0000001E   F429                       BRNE    ??fc16handl0_0
   \   00000020   E001                       LDI     R16,1
   \   00000022   9300....                   STS     (wr_fl + 1),R16
   \                     ??fc16handl0_1:
   \   00000026   E000                       LDI     R16,0
   \   00000028   C05F                       RJMP    ??fc16handl0_2
    201            if ((rg==0x778)&&(u0.rbuf[8]==0xaa)){wr_fl=1;  return zero;};//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   \                     ??fc16handl0_0:
   \   0000002A   3708                       CPI     R16,120
   \   0000002C   0712                       CPC     R17,R18
   \   0000002E   F439                       BRNE    ??fc16handl0_3
   \   00000030   8524                       LDD     R18,Z+12
   \   00000032   3A2A                       CPI     R18,170
   \   00000034   F421                       BRNE    ??fc16handl0_3
   \   00000036   E001                       LDI     R16,1
   \   00000038   9300....                   STS     wr_fl,R16
   \   0000003C   CFF4                       RJMP    ??fc16handl0_1
    202            if ((u0.rbuf[4]!=zero)|((u0.rbuf[5]*2)!=u0.rbuf[6])) return 3;//illegal data value
   \                     ??fc16handl0_3:
   \   0000003E   8520                       LDD     R18,Z+8
   \   00000040   2322                       TST     R18
   \   00000042   F479                       BRNE    ??fc16handl0_4
   \   00000044   8521                       LDD     R18,Z+9
   \   00000046   E032                       LDI     R19,2
   \   00000048   9F23                       MUL     R18,R19
   \   0000004A   8522                       LDD     R18,Z+10
   \   0000004C   E030                       LDI     R19,0
   \   0000004E   1602                       CP      R0,R18
   \   00000050   0613                       CPC     R1,R19
   \   00000052   F439                       BRNE    ??fc16handl0_4
    203          //  rg=(u0.rbuf[2]<<8)+u0.rbuf[3];
    204            if ((rg+u0.rbuf[5])>rammax)   return 2;//illegal data address;
   \   00000054   8521                       LDD     R18,Z+9
   \   00000056   0F20                       ADD     R18,R16
   \   00000058   1F31                       ADC     R19,R17
   \   0000005A   3131                       CPI     R19,17
   \   0000005C   F020                       BRCS    ??fc16handl0_5
   \                     ??fc16handl0_6:
   \   0000005E   E002                       LDI     R16,2
   \   00000060   C043                       RJMP    ??fc16handl0_2
   \                     ??fc16handl0_4:
   \   00000062   E003                       LDI     R16,3
   \   00000064   C041                       RJMP    ??fc16handl0_2
    205            
    206            if ((rg>eepromm)&&(rg<rammin))return 7;
   \                     ??fc16handl0_5:
   \   00000066   3001                       CPI     R16,1
   \   00000068   E024                       LDI     R18,4
   \   0000006A   0712                       CPC     R17,R18
   \   0000006C   F020                       BRCS    ??fc16handl0_7
   \   0000006E   3110                       CPI     R17,16
   \   00000070   F410                       BRCC    ??fc16handl0_7
   \   00000072   E007                       LDI     R16,7
   \   00000074   C039                       RJMP    ??fc16handl0_2
    207            if (rg>=rammin){
   \                     ??fc16handl0_7:
   \   00000076   3110                       CPI     R17,16
   \   00000078   F118                       BRCS    ??fc16handl0_8
    208              UINT * intp; 
    209              intp=&(ramb[rg-rammin]);//inp - указатель на текущий записываемый регистр; 
   \   0000007A   ....                       LDI     R18,LOW(ramb)
   \   0000007C   ....                       LDI     R19,(ramb) >> 8
   \   0000007E   5110                       SUBI    R17,16
   \   00000080   0F00                       LSL     R16
   \   00000082   1F11                       ROL     R17
   \   00000084   0F20                       ADD     R18,R16
   \   00000086   1F31                       ADC     R19,R17
    210              for(i=zero;i<u0.rbuf[5];i++){ //запись в базу данных RAM
   \   00000088   E000                       LDI     R16,0
   \   0000008A   C016                       RJMP    ??fc16handl0_9
    211                __disable_interrupt();
   \                     ??fc16handl0_10:
   \   0000008C   94F8                       CLI
    212                *intp=(u0.rbuf[7+i]<<8)+u0.rbuf[7+i+1];
   \   0000008E   2F40                       MOV     R20,R16
   \   00000090   E050                       LDI     R21,0
   \   00000092   01DF                       MOVW    R27 : R26,R31 : R30
   \   00000094   9614                       ADIW    R27 : R26,4
   \   00000096   01CA                       MOVW    R25 : R24,R21 : R20
   \   00000098   9607                       ADIW    R25 : R24,7
   \   0000009A   0FA8                       ADD     R26,R24
   \   0000009C   1FB9                       ADC     R27,R25
   \   0000009E   917C                       LD      R23,X
   \   000000A0   01DF                       MOVW    R27 : R26,R31 : R30
   \   000000A2   9614                       ADIW    R27 : R26,4
   \   000000A4   5F48                       SUBI    R20,248
   \   000000A6   4F5F                       SBCI    R21,255
   \   000000A8   0FA4                       ADD     R26,R20
   \   000000AA   1FB5                       ADC     R27,R21
   \   000000AC   914C                       LD      R20,X
   \   000000AE   01D9                       MOVW    R27 : R26,R19 : R18
   \   000000B0   934D                       ST      X+,R20
   \   000000B2   937C                       ST      X,R23
    213                __enable_interrupt();
   \   000000B4   9478                       SEI
    214                rg++;
    215              }; 
   \   000000B6   9503                       INC     R16
   \                     ??fc16handl0_9:
   \   000000B8   8511                       LDD     R17,Z+9
   \   000000BA   1701                       CP      R16,R17
   \   000000BC   F338                       BRCS    ??fc16handl0_10
    216              return zero; 
   \   000000BE   CFB3                       RJMP    ??fc16handl0_1
    217            }
    218            if ((rg==1)||(rg==2))
   \                     ??fc16handl0_8:
   \   000000C0   3001                       CPI     R16,1
   \   000000C2   E020                       LDI     R18,0
   \   000000C4   0712                       CPC     R17,R18
   \   000000C6   F019                       BREQ    ??fc16handl0_11
   \   000000C8   3002                       CPI     R16,2
   \   000000CA   0712                       CPC     R17,R18
   \   000000CC   F439                       BRNE    ??fc16handl0_12
    219               if(wr_fl==zero) {return 2;}//illegal data address; ;
   \                     ??fc16handl0_11:
   \   000000CE   9120....                   LDS     R18,wr_fl
   \   000000D2   2322                       TST     R18
   \   000000D4   F221                       BREQ    ??fc16handl0_6
    220                  else {wr_fl=zero;   return wrblock_ini(rg,u0.rbuf[5],(UINT*)&(u0.rbuf[7]));}
   \   000000D6   E020                       LDI     R18,0
   \   000000D8   9320....                   STS     wr_fl,R18
    221               
    222            //обработка записи в EEPROM
    223          //  _clis
    224          //  if (maxc!=zero){SREG=sregt; return 6;};//slave device busy уже идет обработка записи в eeprom c модбаса
    225          //  if 
    226             return wrblock_ini(rg,u0.rbuf[5],(UINT*)&(u0.rbuf[7]));
   \                     ??fc16handl0_12:
   \   000000DC   01AF                       MOVW    R21 : R20,R31 : R30
   \   000000DE   5F45                       SUBI    R20,245
   \   000000E0   4F5F                       SBCI    R21,255
   \   000000E2   8521                       LDD     R18,Z+9
   \   000000E4   ........                   CALL    wrblock_ini
   \                     ??fc16handl0_2:
   \   000000E8   9189                       LD      R24,Y+
   \   000000EA   9199                       LD      R25,Y+
   \   000000EC   91A9                       LD      R26,Y+
   \   000000EE   91B9                       LD      R27,Y+
   \   000000F0   9508                       RET
    227          //  return zero;
    228          }

   \                                 In segment CODE, align 2, keep-with-next
    229          char reinitu0(){
   \                     reinitu0:
    230          char b;
    231            u0.l=zero;
   \   00000000   ....                       LDI     R30,LOW(u0)
   \   00000002   ....                       LDI     R31,(u0) >> 8
   \   00000004   E000                       LDI     R16,0
   \   00000006   8302                       STD     Z+2,R16
    232            u0.state=wait1;
   \   00000008   E001                       LDI     R16,1
   \   0000000A   8301                       STD     Z+1,R16
    233            b=UDR0;
   \   0000000C   B10C                       IN      R16,0x0C
    234            b=UDR0;
   \   0000000E   B10C                       IN      R16,0x0C
    235            b=UDR0;
   \   00000010   B10C                       IN      R16,0x0C
    236            UCSR0B|=(1<<RXCIE0); //разрешили прерывания от приемника};
   \   00000012   9A57                       SBI     0x0A,0x07
    237            return b;
   \   00000014   9508                       RET
    238          }  
    239          ////////////////////////////////////////////////////////////////////////////////////////////////////
    240          //постановка на передачу exeption code

   \                                 In segment CODE, align 2, keep-with-next
    241          sendexept0(char ex){
   \                     sendexept0:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   2F10                       MOV     R17,R16
    242          UINT crc;
    243            u0.tbuf[zero]=u0.addr;
   \   00000006   ....                       LDI     R26,LOW(u0)
   \   00000008   ....                       LDI     R27,(u0) >> 8
   \   0000000A   9613                       ADIW    R27 : R26,3
   \   0000000C   910C                       LD      R16,X
   \   0000000E   9619                       ADIW    R27 : R26,9
   \   00000010   930C                       ST      X,R16
   \   00000012   9717                       SBIW    R27 : R26,7
    244            u0.tbuf[1]=u0.rbuf[1]|C8Z;
   \   00000014   910C                       LD      R16,X
   \   00000016   9618                       ADIW    R27 : R26,8
   \   00000018   6800                       ORI     R16,0x80
   \   0000001A   930D                       ST      X+,R16
    245            u0.tbuf[2]=ex;
   \   0000001C   931C                       ST      X,R17
   \   0000001E   971E                       SBIW    R27 : R26,14
    246            crc=getcrc((UCHAR *)&(u0.tbuf),3);
   \   00000020   E023                       LDI     R18,3
   \   00000022   E030                       LDI     R19,0
   \   00000024   018D                       MOVW    R17 : R16,R27 : R26
   \   00000026   5F04                       SUBI    R16,244
   \   00000028   4F1F                       SBCI    R17,255
   \   0000002A   ........                   CALL    getcrc
    247            u0.tbuf[3]=crc >> 8;
   \   0000002E   961F                       ADIW    R27 : R26,15
   \   00000030   931D                       ST      X+,R17
    248            u0.tbuf[4]=crc; //0xFF;
   \   00000032   930C                       ST      X,R16
   \   00000034   9714                       SBIW    R27 : R26,4
    249            sen0((char *)&u0.tbuf,5);
   \   00000036   E025                       LDI     R18,5
   \   00000038   018D                       MOVW    R17 : R16,R27 : R26
   \   0000003A   ....                       RCALL   sen0
    250          };
   \   0000003C   91A9                       LD      R26,Y+
   \   0000003E   91B9                       LD      R27,Y+
   \   00000040   9508                       RET
    251          // форк обработчика принятого кадра (в настоящее время просто выполняется на прерывании с открытыми прерываниями
    252          #define maxreg 64

   \                                 In segment CODE, align 2, keep-with-next
    253          void rec_frm_fork0(){
   \                     rec_frm_fork0:
   \   00000000   927A                       ST      -Y,R7
   \   00000002   926A                       ST      -Y,R6
   \   00000004   925A                       ST      -Y,R5
   \   00000006   924A                       ST      -Y,R4
   \   00000008   93BA                       ST      -Y,R27
   \   0000000A   93AA                       ST      -Y,R26
   \   0000000C   939A                       ST      -Y,R25
   \   0000000E   938A                       ST      -Y,R24
   \   00000010                              REQUIRE ?Register_R4_is_cg_reg
   \   00000010                              REQUIRE ?Register_R5_is_cg_reg
   \   00000010                              REQUIRE ?Register_R6_is_cg_reg
   \   00000010                              REQUIRE ?Register_R7_is_cg_reg
   \   00000010   9722                       SBIW    R29 : R28,2
    254          unsigned char b;
    255          UINT first,rg;
    256          char *ptr;
    257          //      redon4
    258          //   if(getcrc((UCHAR *)&u0.rbuf,u0.l)!=zero){reinitu0();goto end_isr;};
    259                if(getcrc((UCHAR *)&u0.rbuf,u0.l)!=zero){reinitu0();return;};
   \   00000012   ....                       LDI     R26,LOW(u0)
   \   00000014   ....                       LDI     R27,(u0) >> 8
   \   00000016   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000018   8122                       LDD     R18,Z+2
   \   0000001A   E030                       LDI     R19,0
   \   0000001C   018D                       MOVW    R17 : R16,R27 : R26
   \   0000001E   5F0C                       SUBI    R16,252
   \   00000020   4F1F                       SBCI    R17,255
   \   00000022   ........                   CALL    getcrc
   \   00000026   2B01                       OR      R16,R17
   \   00000028   F011                       BREQ    ??rec_frm_fork0_0
   \   0000002A   ....                       RCALL   reinitu0
   \   0000002C   C0A0                       RJMP    ??rec_frm_fork0_1
    260                //кадр принят.взведем флаг активности модбаса
    261                _ID;
   \                     ??rec_frm_fork0_0:
   \   0000002E   94F8                       CLI
    262              mbstate|=1<<mbst0;
   \   00000030   ....                       LDI     R30,LOW(mbstate)
   \   00000032   ....                       LDI     R31,(mbstate) >> 8
   \   00000034   8100                       LD      R16,Z
   \   00000036   6001                       ORI     R16,0x01
   \   00000038   8300                       ST      Z,R16
    263                _IE;
   \   0000003A   9478                       SEI
    264                
    265                if (u0.rbuf[1]==3){//обработка фукнкции чтения холдинг-регистров
   \   0000003C   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000003E   8105                       LDD     R16,Z+5
   \   00000040   3003                       CPI     R16,3
   \   00000042   F009                       BREQ    $+2+2
   \   00000044   C048                       RJMP    ??rec_frm_fork0_2
    266                        // адрес регистра
    267                        
    268             	  first=u0.rbuf[2]<<8;
    269          	  first += u0.rbuf[3];
   \   00000046   8116                       LDD     R17,Z+6
   \   00000048   E000                       LDI     R16,0
   \   0000004A   8187                       LDD     R24,Z+7
   \   0000004C   E090                       LDI     R25,0
   \   0000004E   0F80                       ADD     R24,R16
   \   00000050   1F91                       ADC     R25,R17
    270          
    271                    // количество регистров
    272          	  if((u0.rbuf[5]>maxreg)|(u0.rbuf[4]!=zero)){sendexept0(3); return;};
   \   00000052   8501                       LDD     R16,Z+9
   \   00000054   3401                       CPI     R16,65
   \   00000056   F488                       BRCC    ??rec_frm_fork0_3
   \   00000058   8500                       LDD     R16,Z+8
   \   0000005A   2300                       TST     R16
   \   0000005C   F471                       BRNE    ??rec_frm_fork0_3
    273          	  u0.tbuf[zero]=u0.addr;
   \   0000005E   8103                       LDD     R16,Z+3
   \   00000060   8704                       STD     Z+12,R16
    274          	  u0.tbuf[1]=3;//fc
   \   00000062   E003                       LDI     R16,3
   \   00000064   8705                       STD     Z+13,R16
    275          	  u0.tbuf[2]=u0.rbuf[5]*2; //byte count;
   \   00000066   8501                       LDD     R16,Z+9
   \   00000068   0F00                       LSL     R16
   \   0000006A   8706                       STD     Z+14,R16
    276          	  ptr=&u0.tbuf[3];
   \   0000006C   013D                       MOVW    R7 : R6,R27 : R26
   \   0000006E   E00F                       LDI     R16,15
   \   00000070   0E60                       ADD     R6,R16
   \   00000072   E000                       LDI     R16,0
   \   00000074   1E70                       ADC     R7,R16
    277          	  {UINT i;
    278                    for (i=first;i<first+u0.rbuf[5];i++){
   \   00000076   012C                       MOVW    R5 : R4,R25 : R24
   \   00000078   C00C                       RJMP    ??rec_frm_fork0_4
   \                     ??rec_frm_fork0_3:
   \   0000007A   E003                       LDI     R16,3
   \   0000007C   C077                       RJMP    ??rec_frm_fork0_5
    279                    if ((b=getrg(i,&rg))!=zero){sendexept0(b); return;};  	
    280                       *(ptr++)=rg>>8;
   \                     ??rec_frm_fork0_6:
   \   0000007E   8119                       LDD     R17,Y+1
   \   00000080   01F3                       MOVW    R31 : R30,R7 : R6
   \   00000082   9311                       ST      Z+,R17
    281                       *(ptr++)=rg&Cff;
   \   00000084   8108                       LD      R16,Y
   \   00000086   9301                       ST      Z+,R16
   \   00000088   013F                       MOVW    R7 : R6,R31 : R30
   \   0000008A   E001                       LDI     R16,1
   \   0000008C   0E40                       ADD     R4,R16
   \   0000008E   E000                       LDI     R16,0
   \   00000090   1E50                       ADC     R5,R16
   \                     ??rec_frm_fork0_4:
   \   00000092   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000094   8501                       LDD     R16,Z+9
   \   00000096   E010                       LDI     R17,0
   \   00000098   0F08                       ADD     R16,R24
   \   0000009A   1F19                       ADC     R17,R25
   \   0000009C   1640                       CP      R4,R16
   \   0000009E   0651                       CPC     R5,R17
   \   000000A0   F438                       BRCC    ??rec_frm_fork0_7
   \   000000A2   019E                       MOVW    R19 : R18,R29 : R28
   \   000000A4   0182                       MOVW    R17 : R16,R5 : R4
   \   000000A6   ........                   CALL    getrg
   \   000000AA   2300                       TST     R16
   \   000000AC   F341                       BREQ    ??rec_frm_fork0_6
   \   000000AE   C05E                       RJMP    ??rec_frm_fork0_5
    282                    };  
    283                    }
    284                    {UINT crc;
    285                       crc=getcrc((UCHAR *)&u0.tbuf,u0.tbuf[2]+3);
   \                     ??rec_frm_fork0_7:
   \   000000B0   8526                       LDD     R18,Z+14
   \   000000B2   E030                       LDI     R19,0
   \   000000B4   5F2D                       SUBI    R18,253
   \   000000B6   4F3F                       SBCI    R19,255
   \   000000B8   018D                       MOVW    R17 : R16,R27 : R26
   \   000000BA   5F04                       SUBI    R16,244
   \   000000BC   4F1F                       SBCI    R17,255
   \   000000BE   ........                   CALL    getcrc
    286                       *(ptr++)=crc >> 8;
   \   000000C2   01F3                       MOVW    R31 : R30,R7 : R6
   \   000000C4   8310                       ST      Z,R17
    287                       *(ptr++)=crc & Cff;
   \   000000C6   8301                       STD     Z+1,R16
    288                                  
    289                    };
    290                    sen0((char *)&u0.tbuf,u0.tbuf[2]+5);
   \   000000C8   01FD                       MOVW    R31 : R30,R27 : R26
   \   000000CA   8526                       LDD     R18,Z+14
   \   000000CC   5F2B                       SUBI    R18,251
   \                     ??rec_frm_fork0_8:
   \   000000CE   961C                       ADIW    R27 : R26,12
   \                     ??rec_frm_fork0_9:
   \   000000D0   018D                       MOVW    R17 : R16,R27 : R26
   \   000000D2   ....                       RCALL   sen0
    291                    return;
   \   000000D4   C04C                       RJMP    ??rec_frm_fork0_1
    292               }
    293               if (u0.rbuf[1]==16){//обработка функции записи регистров
   \                     ??rec_frm_fork0_2:
   \   000000D6   3100                       CPI     R16,16
   \   000000D8   F4E9                       BRNE    ??rec_frm_fork0_10
    294                  b=fc16handl0();
   \   000000DA   ....                       RCALL   fc16handl0
    295                  if (b!=zero) {sendexept0(b);return;}
   \   000000DC   2300                       TST     R16
   \   000000DE   F009                       BREQ    $+2+2
   \   000000E0   C045                       RJMP    ??rec_frm_fork0_5
    296                  else {
    297                    u0.tbuf[zero]=u0.addr;
   \   000000E2   01FD                       MOVW    R31 : R30,R27 : R26
   \   000000E4   8103                       LDD     R16,Z+3
   \   000000E6   8704                       STD     Z+12,R16
    298          	  u0.tbuf[1]=16;//fc
   \   000000E8   E100                       LDI     R16,16
   \   000000EA   8705                       STD     Z+13,R16
    299          	  u0.tbuf[2]=u0.rbuf[2]; 
   \   000000EC   8106                       LDD     R16,Z+6
   \   000000EE   8706                       STD     Z+14,R16
    300          	  u0.tbuf[3]=u0.rbuf[3]; 
   \   000000F0   8107                       LDD     R16,Z+7
   \   000000F2   8707                       STD     Z+15,R16
    301          	  u0.tbuf[4]=u0.rbuf[4]; 
   \   000000F4   8500                       LDD     R16,Z+8
   \   000000F6   8B00                       STD     Z+16,R16
    302          	  u0.tbuf[5]=u0.rbuf[5]; 
   \   000000F8   8501                       LDD     R16,Z+9
   \   000000FA   8B01                       STD     Z+17,R16
    303                    {UINT crc;
    304                       crc=getcrc((UCHAR *)&u0.tbuf,6);
   \   000000FC   E026                       LDI     R18,6
   \   000000FE   E030                       LDI     R19,0
   \   00000100   018D                       MOVW    R17 : R16,R27 : R26
   \   00000102   5F04                       SUBI    R16,244
   \   00000104   4F1F                       SBCI    R17,255
   \   00000106   ........                   CALL    getcrc
    305                       u0.tbuf[6]=crc >> 8;
   \   0000010A   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000010C   8B12                       STD     Z+18,R17
    306                       u0.tbuf[7]=crc & Cff;
   \   0000010E   8B03                       STD     Z+19,R16
    307                    };
    308                    sen0((char *)&u0.tbuf,8);
   \   00000110   E028                       LDI     R18,8
   \   00000112   CFDD                       RJMP    ??rec_frm_fork0_8
    309                    return;
    310                  }
    311               }
    312               if (u0.rbuf[1]==8){
   \                     ??rec_frm_fork0_10:
   \   00000114   3008                       CPI     R16,8
   \   00000116   F419                       BRNE    ??rec_frm_fork0_11
    313               //обработка функции диагностики
    314                 sen0((char *)&u0.rbuf,u0.l);
   \   00000118   8122                       LDD     R18,Z+2
   \                     ??rec_frm_fork0_12:
   \   0000011A   9614                       ADIW    R27 : R26,4
   \   0000011C   CFD9                       RJMP    ??rec_frm_fork0_9
    315          //       goto end_isr;
    316                 return;
    317               }
    318               if (u0.rbuf[1]==255){//функция установки адреса устройства
   \                     ??rec_frm_fork0_11:
   \   0000011E   3F0F                       CPI     R16,255
   \   00000120   F521                       BRNE    ??rec_frm_fork0_13
    319                   if ((u0.rbuf[2]!=12)||(u0.rbuf[3]!=zero)) return;
   \   00000122   8106                       LDD     R16,Z+6
   \   00000124   300C                       CPI     R16,12
   \   00000126   F519                       BRNE    ??rec_frm_fork0_1
   \   00000128   8107                       LDD     R16,Z+7
   \   0000012A   2300                       TST     R16
   \   0000012C   F501                       BRNE    ??rec_frm_fork0_1
    320                   if( reg_num!=( ((UINT)(u0.rbuf[5]<<8))|u0.rbuf[4] ) )return;
   \   0000012E   ....                       LDI     R30,LOW(hrem)
   \   00000130   ....                       LDI     R31,(hrem) >> 8
   \   00000132   8142                       LDD     R20,Z+2
   \   00000134   8153                       LDD     R21,Z+3
   \   00000136   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000138   8531                       LDD     R19,Z+9
   \   0000013A   8500                       LDD     R16,Z+8
   \   0000013C   1740                       CP      R20,R16
   \   0000013E   0753                       CPC     R21,R19
   \   00000140   F4B1                       BRNE    ??rec_frm_fork0_1
    321                   _SETADDR=u0.rbuf[6];
   \   00000142   ....                       LDI     R16,LOW(u1)
   \   00000144   ....                       LDI     R17,(u1) >> 8
   \   00000146   8522                       LDD     R18,Z+10
   \   00000148   01F8                       MOVW    R31 : R30,R17 : R16
   \   0000014A   8323                       STD     Z+3,R18
   \   0000014C   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000014E   8323                       STD     Z+3,R18
    322                    u0.rbuf[zero]=u0.addr;
   \   00000150   8324                       STD     Z+4,R18
    323                    {UINT crc;
    324                       crc=getcrc((UCHAR *)&u0.rbuf,7);
   \   00000152   E027                       LDI     R18,7
   \   00000154   E030                       LDI     R19,0
   \   00000156   018D                       MOVW    R17 : R16,R27 : R26
   \   00000158   5F0C                       SUBI    R16,252
   \   0000015A   4F1F                       SBCI    R17,255
   \   0000015C   ........                   CALL    getcrc
    325                       u0.rbuf[7]=crc >> 8;
   \   00000160   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000162   8713                       STD     Z+11,R17
    326                       u0.rbuf[8]=crc & Cff;
   \   00000164   8704                       STD     Z+12,R16
    327                    };
    328                    sen0((char *)&u0.rbuf,9);
   \   00000166   E029                       LDI     R18,9
   \   00000168   CFD8                       RJMP    ??rec_frm_fork0_12
    329          /*          
    330                    u0.tbuf[zero]=u0.addr;
    331          	  u0.tbuf[1]=255;//fc
    332          	  u0.tbuf[2]=u0.rbuf[2]; 
    333          	  u0.tbuf[3]=u0.rbuf[3]; 
    334          	  u0.tbuf[4]=u0.rbuf[4]; 
    335          	  u0.tbuf[5]=u0.rbuf[5]; 
    336           	  u0.tbuf[6]=u0.rbuf[6]; 
    337          
    338                    {UINT crc;
    339                       crc=getcrc((UCHAR *)&u0.tbuf,7);
    340                       u0.tbuf[7]=crc >> 8;
    341                       u0.tbuf[8]=crc & Cff;
    342                    };
    343                    addh(0xaaaa);
    344                    addh(u0.tbuf[1]);
    345                    addh(u0.tbuf[2]);
    346                    addh(u0.tbuf[3]);          
    347                    addh(u0.tbuf[4]);          
    348                    addh(u0.tbuf[5]);          
    349                    addh(u0.tbuf[6]);          
    350                    addh(u0.tbuf[7]);          
    351                    addh(u0.tbuf[8]);          
    352                    sen0((char *)&u0.tbuf,9);
    353          */          
    354                    return;
    355               } 
    356               sendexept0(5);//ILLEGAL FUNCTION другие функции не поддерживаются
   \                     ??rec_frm_fork0_13:
   \   0000016A   E005                       LDI     R16,5
   \                     ??rec_frm_fork0_5:
   \   0000016C   ....                       RCALL   sendexept0
    357          };
   \                     ??rec_frm_fork0_1:
   \   0000016E   9622                       ADIW    R29 : R28,2
   \   00000170   9189                       LD      R24,Y+
   \   00000172   9199                       LD      R25,Y+
   \   00000174   91A9                       LD      R26,Y+
   \   00000176   91B9                       LD      R27,Y+
   \   00000178   9049                       LD      R4,Y+
   \   0000017A   9059                       LD      R5,Y+
   \   0000017C   9069                       LD      R6,Y+
   \   0000017E   9079                       LD      R7,Y+
   \   00000180   9508                       RET
    358          
    359          // функция возвращает значение регистра с заданным адресом в переменной RG и zero в случае успешного завершения
    360          // в случае невозможности чтения регистра функция возвращает еxeption для отправки пользователю
    361          extern char getrg(UINT address,UINT * rg);
    362          ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    363          #pragma vector=TIMERch0_COMP_vect

   \                                 In segment CODE, align 2, keep-with-next
    364          __interrupt void tch0_comp_isr(){
   \                     tch0_comp_isr:
   \   00000000   939A                       ST      -Y,R25
   \   00000002   938A                       ST      -Y,R24
   \   00000004   93FA                       ST      -Y,R31
   \   00000006   93EA                       ST      -Y,R30
   \   00000008   923A                       ST      -Y,R3
   \   0000000A   922A                       ST      -Y,R2
   \   0000000C   921A                       ST      -Y,R1
   \   0000000E   920A                       ST      -Y,R0
   \   00000010   937A                       ST      -Y,R23
   \   00000012   936A                       ST      -Y,R22
   \   00000014   935A                       ST      -Y,R21
   \   00000016   934A                       ST      -Y,R20
   \   00000018   933A                       ST      -Y,R19
   \   0000001A   932A                       ST      -Y,R18
   \   0000001C   931A                       ST      -Y,R17
   \   0000001E   930A                       ST      -Y,R16
   \   00000020   B78F                       IN      R24,0x3F
   \   00000022   B79B                       IN      R25,0x3B
    365          
    366            UCSR0B&=~(1<<RXCIE0);//запрещаем прерывания от приемника
   \   00000024   9857                       CBI     0x0A,0x07
    367            OCIE0CH=zero; //!!!! запрещаем прерывания от таймера OCIE0=zero
   \   00000026   B707                       IN      R16,0x37
   \   00000028   7F0D                       ANDI    R16,0xFD
   \   0000002A   BF07                       OUT     0x37,R16
    368           
    369            if (u0.state==sync){reinitu0();goto end_isr;}
   \   0000002C   ....                       LDI     R30,LOW(u0)
   \   0000002E   ....                       LDI     R31,(u0) >> 8
   \   00000030   8101                       LDD     R16,Z+1
   \   00000032   2300                       TST     R16
   \   00000034   F411                       BRNE    ??tch0_comp_isr_0
   \                     ??tch0_comp_isr_1:
   \   00000036   ....                       RCALL   reinitu0
   \   00000038   C01E                       RJMP    ??tch0_comp_isr_2
    370          //  _SEI();//открыли прерывания - остальное работает
    371           // redon4
    372            if (u0.state==rx){
   \                     ??tch0_comp_isr_0:
   \   0000003A   3002                       CPI     R16,2
   \   0000003C   F461                       BRNE    ??tch0_comp_isr_3
    373          //  red4^=1;
    374          //       redon4
    375             //проверяем корректность принятого кадра
    376          //   b=u0.l;
    377          //gron4
    378          //      if ((u0.l<8)|(u0.addr!=u0.rbuf[zero])){reinitu0();goto end_isr;};
    379          //      addh(0xaaab);
    380                if( (u0.l<8)|| !( (u0.addr==u0.rbuf[zero])||(u0.rbuf[zero]==zero) ) ){reinitu0();goto end_isr;};
   \   0000003E   8102                       LDD     R16,Z+2
   \   00000040   3008                       CPI     R16,8
   \   00000042   F3C8                       BRCS    ??tch0_comp_isr_1
   \   00000044   8103                       LDD     R16,Z+3
   \   00000046   8114                       LDD     R17,Z+4
   \   00000048   1701                       CP      R16,R17
   \   0000004A   F011                       BREQ    ??tch0_comp_isr_4
   \   0000004C   2311                       TST     R17
   \   0000004E   F799                       BRNE    ??tch0_comp_isr_1
    381          // redon4
    382          //     addh(0xaabb);
    383          //      redw^=1;
    384               _SEI();//открыли прерывания - остальное работает
   \                     ??tch0_comp_isr_4:
   \   00000050   9478                       SEI
    385                
    386               rec_frm_fork0(); 
   \   00000052   ....                       RCALL   rec_frm_fork0
    387          //     off4
    388               goto end_isr;
   \   00000054   C010                       RJMP    ??tch0_comp_isr_2
    389            };  
    390            if(u0.state==senpr){ // передавали преамбулу
   \                     ??tch0_comp_isr_3:
   \   00000056   3003                       CPI     R16,3
   \   00000058   F431                       BRNE    ??tch0_comp_isr_5
    391                 u0.state=senbody;    
   \   0000005A   E004                       LDI     R16,4
   \   0000005C   8301                       STD     Z+1,R16
    392                 UCSR0B|=(1<<UDRIE0)|(1<<TXEN0);  //открыли прерывания (таймер запрещен)
   \   0000005E   B10A                       IN      R16,0x0A
   \   00000060   6208                       ORI     R16,0x28
   \   00000062   B90A                       OUT     0x0A,R16
    393          
    394                 goto end_isr;
   \   00000064   C008                       RJMP    ??tch0_comp_isr_2
    395                 
    396          //       return;
    397             }
    398             if(u0.state==senpost){ // передавали постамбулу
   \                     ??tch0_comp_isr_5:
   \   00000066   3005                       CPI     R16,5
   \   00000068   F421                       BRNE    ??tch0_comp_isr_6
    399                 u0.state=1;    
   \   0000006A   E001                       LDI     R16,1
   \   0000006C   8301                       STD     Z+1,R16
    400                 SEND0OFF;   
   \   0000006E   98D8                       CBI     0x1B,0x00
    401                 reinitu0();  
   \   00000070   CFE2                       RJMP    ??tch0_comp_isr_1
    402          //       return;
    403                    
    404                 goto end_isr; 
    405             }
    406             u0.state=sync;
   \                     ??tch0_comp_isr_6:
   \   00000072   E000                       LDI     R16,0
   \   00000074   8301                       STD     Z+1,R16
    407          end_isr:;
    408           _NOP();
   \                     ??tch0_comp_isr_2:
   \   00000076   0000                       NOP
    409          // off1
    410          };
   \   00000078   BF9B                       OUT     0x3B,R25
   \   0000007A   BF8F                       OUT     0x3F,R24
   \   0000007C   9109                       LD      R16,Y+
   \   0000007E   9119                       LD      R17,Y+
   \   00000080   9129                       LD      R18,Y+
   \   00000082   9139                       LD      R19,Y+
   \   00000084   9149                       LD      R20,Y+
   \   00000086   9159                       LD      R21,Y+
   \   00000088   9169                       LD      R22,Y+
   \   0000008A   9179                       LD      R23,Y+
   \   0000008C   9009                       LD      R0,Y+
   \   0000008E   9019                       LD      R1,Y+
   \   00000090   9029                       LD      R2,Y+
   \   00000092   9039                       LD      R3,Y+
   \   00000094   91E9                       LD      R30,Y+
   \   00000096   91F9                       LD      R31,Y+
   \   00000098   9189                       LD      R24,Y+
   \   0000009A   9199                       LD      R25,Y+
   \   0000009C   9518                       RETI
    411          
    412          //////////////////////////////////////////////////////////////////////////////////////////////////////////
    413          #pragma vector=USART0_UDRE_vect

   \                                 In segment CODE, align 2, keep-with-next
    414          __interrupt void tx0_isr()
   \                     tx0_isr:
    415          {
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   93FA                       ST      -Y,R31
   \   00000006   93EA                       ST      -Y,R30
   \   00000008   931A                       ST      -Y,R17
   \   0000000A   930A                       ST      -Y,R16
   \   0000000C   B71F                       IN      R17,0x3F
    416          
    417            if (len0!=zero){
   \   0000000E   ....                       LDI     R30,LOW(txf0)
   \   00000010   ....                       LDI     R31,(txf0) >> 8
   \   00000012   8105                       LDD     R16,Z+5
   \   00000014   2300                       TST     R16
   \   00000016   F049                       BREQ    ??tx0_isr_0
    418              len0=len0-1;
   \   00000018   950A                       DEC     R16
   \   0000001A   8305                       STD     Z+5,R16
    419              UDR0=*txf0++;
   \   0000001C   81A0                       LD      R26,Z
   \   0000001E   81B1                       LDD     R27,Z+1
   \   00000020   910D                       LD      R16,X+
   \   00000022   83A0                       ST      Z,R26
   \   00000024   83B1                       STD     Z+1,R27
   \   00000026   B90C                       OUT     0x0C,R16
   \   00000028   C00D                       RJMP    ??tx0_isr_1
    420          
    421            }
    422            else {
    423               //запрещаем прерывания от передатчика,
    424          //     UCSR0B&=~(1<<5);
    425              UCSR0B&=~(1<<UDRIE0);
   \                     ??tx0_isr_0:
   \   0000002A   9855                       CBI     0x0A,0x05
    426              u0.state=senpost;//переходим в состояние передачи постамбулы.
   \   0000002C   E005                       LDI     R16,5
   \   0000002E   9300....                   STS     (u0 + 1),R16
    427          //    OCR0T=t35;
    428              OCR0T=t35;
   \   00000032   8103                       LDD     R16,Z+3
   \   00000034   BF01                       OUT     0x31,R16
    429              TCNT0CH=zero;
   \   00000036   E000                       LDI     R16,0
   \   00000038   BF02                       OUT     0x32,R16
    430          //    OCF0CH=1; //сбросили флаг прерывания от таймера, если он был
    431          //    TIFR=1<<OCF0CH;
    432                  TIFR=1<<CH0f;
   \   0000003A   E002                       LDI     R16,2
   \   0000003C   BF06                       OUT     0x36,R16
    433              OCIE0CH=1; //разрешили прерывания от таймера
   \   0000003E   B707                       IN      R16,0x37
   \   00000040   6002                       ORI     R16,0x02
   \   00000042   BF07                       OUT     0x37,R16
    434          
    435            }
    436           
    437          
    438          // redoff(); 
    439          };
   \                     ??tx0_isr_1:
   \   00000044   BF1F                       OUT     0x3F,R17
   \   00000046   9109                       LD      R16,Y+
   \   00000048   9119                       LD      R17,Y+
   \   0000004A   ....                       RJMP    ?Subroutine0
    440          

   \                                 In segment CODE, align 2, keep-with-next
    441          char sendstart0(char *outbuf,char l){
   \                     sendstart0:
    442              UCSR0A&=~(1<<TXC0);  
   \   00000000   985E                       CBI     0x0B,0x06
    443              UDR0=*outbuf++;
   \   00000002   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000004   8130                       LD      R19,Z
   \   00000006   B93C                       OUT     0x0C,R19
    444              len0=--l;  
   \   00000008   952A                       DEC     R18
   \   0000000A   9320....                   STS     (txf0 + 5),R18
    445              txf0=outbuf;
   \   0000000E   5F0F                       SUBI    R16,255
   \   00000010   4F1F                       SBCI    R17,255
   \   00000012   ....                       LDI     R30,LOW(txf0)
   \   00000014   ....                       LDI     R31,(txf0) >> 8
   \   00000016   8300                       ST      Z,R16
   \   00000018   8311                       STD     Z+1,R17
    446              UCSR0B|=(1<<UDRIE0)|(1<<TXEN0); 
   \   0000001A   B10A                       IN      R16,0x0A
   \   0000001C   6208                       ORI     R16,0x28
   \   0000001E   B90A                       OUT     0x0A,R16
    447              return zero;
   \   00000020   E000                       LDI     R16,0
   \   00000022   9508                       RET
    448          };

   \                                 In segment INTVEC, offset 0x3c, root
   \   00000000   ........                   JMP     tch0_comp_isr

   \                                 In segment INTVEC, offset 0x48, root
   \   00000000   ........                   JMP     rx0_isr

   \                                 In segment INTVEC, offset 0x4c, root
   \   00000000   ........                   JMP     tx0_isr

   \                                 In segment ABSOLUTE, at 0x95
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x90
   \   union <unnamed> volatile __io _A_UBRR0H
   \                     _A_UBRR0H:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x57
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x56
   \   union <unnamed> volatile __io _A_TIFR
   \                     _A_TIFR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x52
   \   union <unnamed> volatile __io _A_TCNT0
   \                     _A_TCNT0:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRR0L
   \                     _A_UBRR0L:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x3a
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x3b
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x51
   \   union <unnamed> volatile __io _A_OCR0
   \                     _A_OCR0:
   \   00000000                              DS 1

   Maximum stack usage in bytes:

     Function           CSTACK RSTACK
     --------           ------ ------
     fc16handl0             4      2
       -> wrblock_ini       4      2
       -> wrblock_ini       4      2
     initmb0                0      2
     rec_frm_fork0         10      2
       -> getcrc           10      2
       -> reinitu0         10      2
       -> sendexept0       10      2
       -> getrg            10      2
       -> sendexept0       10      2
       -> getcrc           10      2
       -> sen0             10      2
       -> fc16handl0       10      2
       -> sendexept0       10      2
       -> getcrc           10      2
       -> sen0             10      2
       -> sen0             10      2
       -> getcrc           10      2
       -> sen0             10      2
       -> sendexept0       10      2
     reinitu0               0      2
     reset_cpu              0      2
     rx0_isr                8      2
     sen0                   0      2
     sendexept0             2      2
       -> getcrc            2      2
       -> sen0              2      2
     sendstart0             0      2
     tch0_comp_isr         15      2
       -> reinitu0         15      2
       -> reinitu0         15      2
       -> rec_frm_fork0    15      2
       -> reinitu0         15      2
     tx0_isr                6      2


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     reset_cpu         8
     txf0              6
     wr_fl             2
     mbstate           1
     u0              148
     initmb0         338
     rx0_isr         140
     ?Subroutine0     10
     sen0             38
     fc16handl0      242
     reinitu0         22
     sendexept0       66
     rec_frm_fork0   386
     tch0_comp_isr   158
     tx0_isr          76
     sendstart0       36
     _A_UCSR0C         1
     _A_UBRR0H         1
     _A_TIMSK          1
     _A_TIFR           1
     _A_TCCR0          1
     _A_TCNT0          1
     _A_UBRR0L         1
     _A_UCSR0B         1
     _A_UCSR0A         1
     _A_UDR0           1
     _A_DDRA           1
     _A_PORTA          1
     _A_OCR0           1
      Others          19

 
    13 bytes in segment ABSOLUTE
 1 520 bytes in segment CODE
     7 bytes in segment INITTAB
    12 bytes in segment INTVEC
   157 bytes in segment NEAR_Z
 
 1 532 bytes of CODE memory (+  7 bytes shared)
   157 bytes of DATA memory (+ 13 bytes shared)

Errors: none
Warnings: 2
