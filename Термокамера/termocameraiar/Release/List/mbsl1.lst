##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V3.20C/W32             04/Aug/2006  13:21:56 #
# Copyright 1996-2004 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  D:\temp\sys_msap01mk_dev0103\mbsl1.c                    #
#    Command line =  --cpu=m128 -ms -o D:\temp\sys_msap01mk_dev0103\Release\ #
#                    Obj\ -lCN D:\temp\sys_msap01mk_dev0103\Release\List\    #
#                    -y --initializers_in_flash -s9                          #
#                    -DENABLE_BIT_DEFINITIONS -e -I "F:\Program Files\IAR    #
#                    Systems\Embedded Workbench 3.2\avr\INC\" -I             #
#                    "F:\Program Files\IAR Systems\Embedded Workbench        #
#                    3.2\avr\INC\CLIB\" --eeprom_size 4096                   #
#                    D:\temp\sys_msap01mk_dev0103\mbsl1.c                    #
#    List file    =  D:\temp\sys_msap01mk_dev0103\Release\List\mbsl1.lst     #
#    Object file  =  D:\temp\sys_msap01mk_dev0103\Release\Obj\mbsl1.r90      #
#                                                                            #
#                                                                            #
##############################################################################

D:\temp\sys_msap01mk_dev0103\mbsl1.c
      1          #define mbslave1
      2          #include "ina90.h"
      3          #include "mbsl1.h"
      4          #include "led.h"
      5          #include "types.h" 
      6          //#include "hist.h"
      7          #include "base.h"
      8          #include "zerodef.h"
      9          #include <iom128.h>
     10          //#define ENABLE_BIT_DEFINITIONS 1
     11          
     12          

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
     13          struct isr_cntx u1;
   \                     u1:
   \   00000000                              DS 148
     14          #ifdef mbslave0
     15          extern struct isr_cntx u1;
     16          #else 
     17          extern struct isr_cntx uZ;
     18          #endif
     19          extern UINT getcrc(UCHAR *puchMsg, UINT usDataLen);

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
     20          char len1;
     21          char *txf1;
   \                     txf1:
   \   00000000                              DS 2
   \                     len1:
   \   00000002                              DS 1
     22          
     23          enum tstates {sync,wait1,rx,senpr,senbody,senpost}  ;

   \                                 In segment CODE, align 2, keep-with-next
     24          void initmb1(unsigned int speed,char par,char ad){
   \                     initmb1:
   \   00000000   2F5B                       MOV     R21,R27
   \   00000002   2F4A                       MOV     R20,R26
   \   00000004   01F8                       MOVW    R31 : R30,R17 : R16
     25          //redon2
     26          _ID
   \   00000006   94F8                       CLI
     27          //DDRE_Bit2=1; //установили бит управления передатчиком на вывод
     28          txen1ini
   \   00000008   9ABE                       SBI     0x17,0x06
     29          SEND1OFF;
   \   0000000A   98C6                       CBI     0x18,0x06
     30           UCSR1A=2; //установили бит  U2X
   \   0000000C   E002                       LDI     R16,2
   \   0000000E   9300009B                   STS     155,R16
     31           UCSR1B = (1<<RXEN1)|(1<<TXEN1);
   \   00000012   E108                       LDI     R16,24
   \   00000014   9300009A                   STS     154,R16
     32           UCSR1B|=(1<<RXCIE1); //разрешили прерывания от приемника
   \   00000018   E908                       LDI     R16,152
   \   0000001A   9300009A                   STS     154,R16
     33           UCSR1C=((1<<1)|(1<<2));//УСТАНОВИЛИ 8БИТ ДАННЫХ И 1 СТОП
   \   0000001E   E006                       LDI     R16,6
   \   00000020   9300009D                   STS     157,R16
     34           u1.addr=ad;
   \   00000024   ....                       LDI     R26,LOW(u1)
   \   00000026   ....                       LDI     R27,(u1) >> 8
   \   00000028   9613                       ADIW    R27 : R26,3
   \   0000002A   933C                       ST      X,R19
   \   0000002C   9713                       SBIW    R27 : R26,3
     35           switch (par){
   \   0000002E   2322                       TST     R18
   \   00000030   F061                       BREQ    ??initmb1_0
   \   00000032   952A                       DEC     R18
   \   00000034   F031                       BREQ    ??initmb1_1
   \   00000036   952A                       DEC     R18
   \   00000038   F451                       BRNE    ??initmb1_2
     36             case none:{ 
     37               UCSR1C&=~((1<<UPM11)|(1<<UPM1Z));
     38               break;
     39             };  
     40             case even:{ 
     41               UCSR1C|= 1<<UPM11;
   \   0000003A   E206                       LDI     R16,38
   \   0000003C   9300009D                   STS     157,R16
     42               UCSR1C&=~(1<<UPM1Z);
   \   00000040   C004                       RJMP    ??initmb1_0
     43               break;
     44             };  
     45             case odd:{ 
     46               UCSR1C|= 1<<UPM11;
   \                     ??initmb1_1:
   \   00000042   E206                       LDI     R16,38
   \   00000044   9300009D                   STS     157,R16
     47               UCSR1C|=1<<UPM1Z;
   \   00000048   E306                       LDI     R16,54
   \                     ??initmb1_0:
   \   0000004A   9300009D                   STS     157,R16
     48               break;
     49             };  
     50           };
     51          /* регистр tccr1
     52           7 =1 - не нужен PWM
     53           6,3 = zero - обычная мода
     54           5,4 =zero - не используется выход модуляции
     55           2,1,zero - предделитель
     56          */
     57            switch (speed){
   \                     ??initmb1_2:
   \   0000004E   97F0                       SBIW    R31 : R30,48
   \   00000050   F089                       BREQ    ??initmb1_3
   \   00000052   97F0                       SBIW    R31 : R30,48
   \   00000054   F111                       BREQ    ??initmb1_4
   \   00000056   56E0                       SUBI    R30,96
   \   00000058   40F0                       SBCI    R31,0
   \   0000005A   F191                       BREQ    ??initmb1_5
   \   0000005C   5CE0                       SUBI    R30,192
   \   0000005E   40F0                       SBCI    R31,0
   \   00000060   F1E1                       BREQ    ??initmb1_6
   \   00000062   5CE0                       SUBI    R30,192
   \   00000064   40F0                       SBCI    R31,0
   \   00000066   F409                       BRNE    $+2+2
   \   00000068   C048                       RJMP    ??initmb1_7
   \   0000006A   54E0                       SUBI    R30,64
   \   0000006C   40F2                       SBCI    R31,2
   \   0000006E   F409                       BRNE    $+2+2
   \   00000070   C054                       RJMP    ??initmb1_8
   \   00000072   C060                       RJMP    ??initmb1_9
     58              case 48:{
     59                TCCR1CH=CTC124_1;// CTC мода предделитель 1124;
   \                     ??initmb1_3:
   \   00000074   E80D                       LDI     R16,141
   \   00000076   BD05                       OUT     0x25,R16
     60                UBRR1L=383-256; 
   \   00000078   E70F                       LDI     R16,127
   \   0000007A   93000099                   STS     153,R16
     61                UBRR1H = (unsigned char)(383>>8);
   \   0000007E   E001                       LDI     R16,1
   \   00000080   93000098                   STS     152,R16
     62                UBRR1L = (unsigned char)383;
   \   00000084   E70F                       LDI     R16,127
   \   00000086   93000099                   STS     153,R16
     63                t25=83;
   \   0000008A   E503                       LDI     R16,83
   \   0000008C   9300....                   STS     t25,R16
     64                t35=116;
   \   00000090   E704                       LDI     R16,116
   \   00000092   9300....                   STS     t35,R16
     65                t45=OCR1T=148;
   \   00000096   E904                       LDI     R16,148
   \   00000098   C05C                       RJMP    ??initmb1_10
     66                
     67                break;
     68              }case 96:{
     69                t25=41;
   \                     ??initmb1_4:
   \   0000009A   E209                       LDI     R16,41
   \   0000009C   9300....                   STS     t25,R16
     70                t35=58;
   \   000000A0   E30A                       LDI     R16,58
   \   000000A2   9300....                   STS     t35,R16
     71                TCCR1CH=CTC124_1; // CTC мода предделитель 1124;
   \   000000A6   E80D                       LDI     R16,141
   \   000000A8   BD05                       OUT     0x25,R16
     72                t45=OCR1T=74;
   \   000000AA   E40A                       LDI     R16,74
   \   000000AC   BD03                       OUT     0x23,R16
   \   000000AE   9300....                   STS     t45,R16
     73                UBRR1H = zero;
   \   000000B2   E000                       LDI     R16,0
   \   000000B4   93000098                   STS     152,R16
     74                UBRR1L = 191;
   \   000000B8   EB0F                       LDI     R16,191
   \   000000BA   93000099                   STS     153,R16
     75                
     76                break;
   \   000000BE   C04C                       RJMP    ??initmb1_11
     77              }case 192:{
     78                t25=82;
   \                     ??initmb1_5:
   \   000000C0   E502                       LDI     R16,82
   \   000000C2   9300....                   STS     t25,R16
     79                t35=116;
   \   000000C6   E704                       LDI     R16,116
   \   000000C8   9300....                   STS     t35,R16
     80                TCCR1CH=CTC256_1; // CTC мода предделитель 256;
   \   000000CC   E80C                       LDI     R16,140
   \   000000CE   BD05                       OUT     0x25,R16
     81                UBRR1H = zero;
   \   000000D0   E000                       LDI     R16,0
   \   000000D2   93000098                   STS     152,R16
     82                UBRR1L = 95;
   \   000000D6   E50F                       LDI     R16,95
   \   000000D8   C039                       RJMP    ??initmb1_12
     83                t45=OCR1T=149;
     84                
     85                break;
     86              }case 384:{
     87                t25=41;
   \                     ??initmb1_6:
   \   000000DA   E209                       LDI     R16,41
   \   000000DC   9300....                   STS     t25,R16
     88                t35=58;
   \   000000E0   E30A                       LDI     R16,58
   \   000000E2   9300....                   STS     t35,R16
     89                TCCR1CH=CTC256_1;
   \   000000E6   E80C                       LDI     R16,140
   \   000000E8   BD05                       OUT     0x25,R16
     90                UBRR1H = zero;
   \   000000EA   E000                       LDI     R16,0
   \   000000EC   93000098                   STS     152,R16
     91                UBRR1L = 47;    
   \   000000F0   E20F                       LDI     R16,47
   \                     ??initmb1_13:
   \   000000F2   93000099                   STS     153,R16
     92                t45=OCR1T=74;
   \   000000F6   E40A                       LDI     R16,74
   \   000000F8   C02C                       RJMP    ??initmb1_10
     93                break;
     94              }
     95              case 576: {
     96                t25=28; 
   \                     ??initmb1_7:
   \   000000FA   E10C                       LDI     R16,28
   \   000000FC   9300....                   STS     t25,R16
     97                t35=39;
   \   00000100   E207                       LDI     R16,39
   \   00000102   9300....                   STS     t35,R16
     98                TCCR1CH=CTC256_1; 
   \   00000106   E80C                       LDI     R16,140
   \   00000108   BD05                       OUT     0x25,R16
     99                UBRR1H = zero;
   \   0000010A   E000                       LDI     R16,0
   \   0000010C   93000098                   STS     152,R16
    100                UBRR1L = 31;
   \   00000110   E10F                       LDI     R16,31
   \   00000112   93000099                   STS     153,R16
    101                t45=OCR1T=49;
   \   00000116   E301                       LDI     R16,49
   \   00000118   C01C                       RJMP    ??initmb1_10
    102                break;
    103              }
    104              case 1152: {
    105          //    t25=14;
    106          //    t35=21;
    107                t25=41; 
   \                     ??initmb1_8:
   \   0000011A   E209                       LDI     R16,41
   \   0000011C   9300....                   STS     t25,R16
    108                t35=58;
   \   00000120   E30A                       LDI     R16,58
   \   00000122   9300....                   STS     t35,R16
    109          
    110                TCCR1CH=CTC256_1; 
   \   00000126   E80C                       LDI     R16,140
   \   00000128   BD05                       OUT     0x25,R16
    111                UBRR1H = zero;
   \   0000012A   E000                       LDI     R16,0
   \   0000012C   93000098                   STS     152,R16
    112                UBRR1L = 15;
   \   00000130   E00F                       LDI     R16,15
   \   00000132   CFDF                       RJMP    ??initmb1_13
    113          //      t45=OCR1T=24;
    114                t45=OCR1T=74;
    115                break;
    116              }
    117              default: {
    118                t25=82;    
   \                     ??initmb1_9:
   \   00000134   E502                       LDI     R16,82
   \   00000136   9300....                   STS     t25,R16
    119                t35=116;
   \   0000013A   E704                       LDI     R16,116
   \   0000013C   9300....                   STS     t35,R16
    120                TCCR1CH=CTC256_1; // скорость по умолчанию 19211
   \   00000140   E80C                       LDI     R16,140
   \   00000142   BD05                       OUT     0x25,R16
    121                UBRR1H = 149;
   \   00000144   E905                       LDI     R16,149
   \   00000146   93000098                   STS     152,R16
    122                UBRR1L = zero;
   \   0000014A   E000                       LDI     R16,0
   \                     ??initmb1_12:
   \   0000014C   93000099                   STS     153,R16
    123                t45=OCR1T=149;
   \   00000150   E905                       LDI     R16,149
   \                     ??initmb1_10:
   \   00000152   BD03                       OUT     0x23,R16
   \   00000154   9300....                   STS     t45,R16
    124             };                 
    125            };
    126          //  u1.state=wait1;
    127            u1.state=sync;
   \                     ??initmb1_11:
   \   00000158   E000                       LDI     R16,0
   \   0000015A   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000015C   8301                       STD     Z+1,R16
    128            TCNT1CH=zero;
   \   0000015E   BD04                       OUT     0x24,R16
    129          //  TIMSK|=2;//разрешили прерывание от таймера  по COMP !!!!!!
    130            OCIE1CH=1;
   \   00000160   B707                       IN      R16,0x37
   \   00000162   6800                       ORI     R16,0x80
   \   00000164   BF07                       OUT     0x37,R16
    131          
    132            _IE
   \   00000166   9478                       SEI
    133          };
   \   00000168   2FA4                       MOV     R26,R20
   \   0000016A   2FB5                       MOV     R27,R21
   \   0000016C   9508                       RET
    134          
    135          /////////////////////////////////////////////////////////////////////////////////////////////////////////
    136          
    137          #pragma vector=USART1_RXC_vect

   \                                 In segment CODE, align 2, keep-with-next
    138          __interrupt void rx1_isr() {
   \                     rx1_isr:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   93FA                       ST      -Y,R31
   \   00000006   93EA                       ST      -Y,R30
   \   00000008   933A                       ST      -Y,R19
   \   0000000A   932A                       ST      -Y,R18
   \   0000000C   931A                       ST      -Y,R17
   \   0000000E   930A                       ST      -Y,R16
   \   00000010   B73F                       IN      R19,0x3F
    139          
    140          //redon3
    141            if((u1.state==sync)){goto error_rx;};
   \   00000012   ....                       LDI     R30,LOW(u1)
   \   00000014   ....                       LDI     R31,(u1) >> 8
   \   00000016   8101                       LDD     R16,Z+1
   \   00000018   2300                       TST     R16
   \   0000001A   F179                       BREQ    ??rx1_isr_0
    142            if (u1.state==wait1){
   \   0000001C   3001                       CPI     R16,1
   \   0000001E   F4E1                       BRNE    ??rx1_isr_1
    143          
    144              TCNT1CH=zero;
   \   00000020   E000                       LDI     R16,0
   \   00000022   BD04                       OUT     0x24,R16
    145          
    146          //      OCF1CH=1;
    147          //     TIFR=1<<OCF1CH; 
    148                     TIFR=1<<CH1f; 
   \   00000024   E800                       LDI     R16,128
   \   00000026   BF06                       OUT     0x36,R16
    149          //    TIMSK_Bit1=1; //разрешили прерывания от таймера
    150              OCIE1CH=1; 
   \   00000028   B707                       IN      R16,0x37
   \   0000002A   6800                       ORI     R16,0x80
   \   0000002C   BF07                       OUT     0x37,R16
    151          
    152              if((UCSR1A&((1<<FE1)|(1<<UPE1)))!=zero){goto error_rx;};//была проверка на корректность кадра -стоп бит и  паритет /!!!!!!!
   \   0000002E   9100009B                   LDS     R16,155
   \   00000032   7104                       ANDI    R16,0x14
   \   00000034   F511                       BRNE    ??rx1_isr_0
    153          //    gron3;
    154              u1.state=rx;
   \   00000036   E002                       LDI     R16,2
   \   00000038   8301                       STD     Z+1,R16
    155              if (u1.l>(128+8))goto error_rx;
   \   0000003A   8102                       LDD     R16,Z+2
   \   0000003C   3809                       CPI     R16,137
   \   0000003E   F4E8                       BRCC    ??rx1_isr_0
    156              u1.rbuf[u1.l++]=UDR1;
   \   00000040   9120009C                   LDS     R18,156
   \   00000044   01DF                       MOVW    R27 : R26,R31 : R30
   \   00000046   9614                       ADIW    R27 : R26,4
   \                     ??rx1_isr_2:
   \   00000048   E010                       LDI     R17,0
   \   0000004A   0FA0                       ADD     R26,R16
   \   0000004C   1FB1                       ADC     R27,R17
   \   0000004E   932C                       ST      X,R18
   \   00000050   8102                       LDD     R16,Z+2
   \   00000052   9503                       INC     R16
   \   00000054   8302                       STD     Z+2,R16
    157              //    u1.rbuf[u1.l++]=b;
    158              goto erx;     
   \   00000056   C019                       RJMP    ??rx1_isr_3
    159            }else { //осталось состояние приема тела кадра. При остальных прерываний быть не должно
    160          //   gron3  
    161               if(TCNT1CH<t45){ 
   \                     ??rx1_isr_1:
   \   00000058   B504                       IN      R16,0x24
   \   0000005A   9110....                   LDS     R17,t45
   \   0000005E   1701                       CP      R16,R17
   \   00000060   F460                       BRCC    ??rx1_isr_0
    162          //        if(((UCSR1A&16)!=zero)){goto error_rx;};//была проверка на корректность кадра -стоп бит и  паритет
    163                    if((UCSR1A&((1<<FE1)|(1<<UPE1)))!=zero){goto error_rx;};//была проверка на корректность кадра -стоп бит и  паритет /!!!!!!!
   \   00000062   9100009B                   LDS     R16,155
   \   00000066   7104                       ANDI    R16,0x14
   \   00000068   F441                       BRNE    ??rx1_isr_0
    164                  TCNT1CH=zero; u1.rbuf[u1.l++]=UDR1; 
   \   0000006A   E000                       LDI     R16,0
   \   0000006C   BD04                       OUT     0x24,R16
   \   0000006E   9120009C                   LDS     R18,156
   \   00000072   01DF                       MOVW    R27 : R26,R31 : R30
   \   00000074   9614                       ADIW    R27 : R26,4
   \   00000076   8102                       LDD     R16,Z+2
   \   00000078   CFE7                       RJMP    ??rx1_isr_2
    165                  goto erx;
    166              }
    167            }
    168            // если же не уложились в интервал - сбрасываем кадр 
    169          error_rx:  
    170            u1.l=zero; //сбрасываем  кадр.
   \                     ??rx1_isr_0:
   \   0000007A   E000                       LDI     R16,0
   \   0000007C   8302                       STD     Z+2,R16
    171          
    172          //  off3 ;redon3; 
    173          //  {char b;     b=UDR1; }
    174            getrx1 
   \   0000007E   930A               ST  -Y,R16
   \   00000080   9100009C           LDS R16,0x9c
   \   00000084   9109               LD R16,Y+ 
    175            TCNT1CH=zero;u1.state=sync; 
   \   00000086   BD04                       OUT     0x24,R16
   \   00000088   8301                       STD     Z+1,R16
    176          erx: 
    177          // off3 
    178          _NOP(); 
   \                     ??rx1_isr_3:
   \   0000008A   0000                       NOP
    179          };   
   \   0000008C   BF3F                       OUT     0x3F,R19
   \   0000008E   9109                       LD      R16,Y+
   \   00000090   9119                       LD      R17,Y+
   \   00000092   9129                       LD      R18,Y+
   \   00000094   9139                       LD      R19,Y+
   \   00000096                              REQUIRE ?Subroutine0
   \   00000096                      ;               // Fall through to label ?Subroutine0

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   91E9                       LD      R30,Y+
   \   00000002   91F9                       LD      R31,Y+
   \   00000004   91A9                       LD      R26,Y+
   \   00000006   91B9                       LD      R27,Y+
   \   00000008   9518                       RETI
    180          ///////////////////////////////////////////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 2, keep-with-next
    181          void sen1(char *outbuf,char l){
   \                     sen1:
    182            __disable_interrupt();
   \   00000000   94F8                       CLI
    183            TCNT1CH=zero;
   \   00000002   E030                       LDI     R19,0
   \   00000004   BD34                       OUT     0x24,R19
    184            SEND1ON;   
   \   00000006   9AC6                       SBI     0x18,0x06
    185            //OCR1T=t35;
    186            OCR1T=t35;
   \   00000008   9130....                   LDS     R19,t35
   \   0000000C   BD33                       OUT     0x23,R19
    187            u1.state=senpr;
   \   0000000E   E033                       LDI     R19,3
   \   00000010   9330....                   STS     (u1 + 1),R19
    188            OCIE1CH=1; //!!!! разрешаем прерывания от таймера
   \   00000014   B737                       IN      R19,0x37
   \   00000016   6830                       ORI     R19,0x80
   \   00000018   BF37                       OUT     0x37,R19
    189          
    190            txf1=outbuf;len1=l;
   \   0000001A   ....                       LDI     R30,LOW(txf1)
   \   0000001C   ....                       LDI     R31,(txf1) >> 8
   \   0000001E   8300                       ST      Z,R16
   \   00000020   8311                       STD     Z+1,R17
   \   00000022   8322                       STD     Z+2,R18
    191            __enable_interrupt();
   \   00000024   9478                       SEI
    192          
    193          }
   \   00000026   9508                       RET
    194          ///////////////////////////////////////////////////////////////////////////////////////////////////
    195          extern UCHAR maxc;
    196          extern UINT  ramb[ramm];

   \                                 In segment CODE, align 2, keep-with-next
    197          char fc16handl1(){ //функция обработки fc=16 возвращает zero или Exeption
   \                     fc16handl1:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   939A                       ST      -Y,R25
   \   00000006   938A                       ST      -Y,R24
    198          char i;
    199          UINT rg;
    200            rg=(u1.rbuf[2]<<8)+u1.rbuf[3];
   \   00000008   ....                       LDI     R30,LOW(u1)
   \   0000000A   ....                       LDI     R31,(u1) >> 8
   \   0000000C   8136                       LDD     R19,Z+6
   \   0000000E   E020                       LDI     R18,0
   \   00000010   8107                       LDD     R16,Z+7
   \   00000012   E010                       LDI     R17,0
   \   00000014   0F02                       ADD     R16,R18
   \   00000016   1F13                       ADC     R17,R19
    201          //if (rg==0x777){reset_cpu();  return zero;}; //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    202            if (rg==0x777){res_fl=1;  return zero;}; 
   \   00000018   3707                       CPI     R16,119
   \   0000001A   E027                       LDI     R18,7
   \   0000001C   0712                       CPC     R17,R18
   \   0000001E   F429                       BRNE    ??fc16handl1_0
   \   00000020   E001                       LDI     R16,1
   \   00000022   9300....                   STS     res_fl,R16
   \                     ??fc16handl1_1:
   \   00000026   E000                       LDI     R16,0
   \   00000028   C05F                       RJMP    ??fc16handl1_2
    203            if ((rg==0x778)&&(u1.rbuf[8]==0xaa)){wr_fl=1;  return zero;};//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   \                     ??fc16handl1_0:
   \   0000002A   3708                       CPI     R16,120
   \   0000002C   0712                       CPC     R17,R18
   \   0000002E   F439                       BRNE    ??fc16handl1_3
   \   00000030   8524                       LDD     R18,Z+12
   \   00000032   3A2A                       CPI     R18,170
   \   00000034   F421                       BRNE    ??fc16handl1_3
   \   00000036   E001                       LDI     R16,1
   \   00000038   9300....                   STS     wr_fl,R16
   \   0000003C   CFF4                       RJMP    ??fc16handl1_1
    204            if ((u1.rbuf[4]!=zero)|((u1.rbuf[5]*2)!=u1.rbuf[6])) return 3;//illegal data value
   \                     ??fc16handl1_3:
   \   0000003E   8520                       LDD     R18,Z+8
   \   00000040   2322                       TST     R18
   \   00000042   F479                       BRNE    ??fc16handl1_4
   \   00000044   8521                       LDD     R18,Z+9
   \   00000046   E032                       LDI     R19,2
   \   00000048   9F23                       MUL     R18,R19
   \   0000004A   8522                       LDD     R18,Z+10
   \   0000004C   E030                       LDI     R19,0
   \   0000004E   1602                       CP      R0,R18
   \   00000050   0613                       CPC     R1,R19
   \   00000052   F439                       BRNE    ??fc16handl1_4
    205          //  rg=(u1.rbuf[2]<<8)+u1.rbuf[3];
    206            if ((rg+u1.rbuf[5])>rammax)   return 2;//illegal data address;
   \   00000054   8521                       LDD     R18,Z+9
   \   00000056   0F20                       ADD     R18,R16
   \   00000058   1F31                       ADC     R19,R17
   \   0000005A   3131                       CPI     R19,17
   \   0000005C   F020                       BRCS    ??fc16handl1_5
   \                     ??fc16handl1_6:
   \   0000005E   E002                       LDI     R16,2
   \   00000060   C043                       RJMP    ??fc16handl1_2
   \                     ??fc16handl1_4:
   \   00000062   E003                       LDI     R16,3
   \   00000064   C041                       RJMP    ??fc16handl1_2
    207            
    208            if ((rg>eepromm)&&(rg<rammin))return 7;
   \                     ??fc16handl1_5:
   \   00000066   3001                       CPI     R16,1
   \   00000068   E024                       LDI     R18,4
   \   0000006A   0712                       CPC     R17,R18
   \   0000006C   F020                       BRCS    ??fc16handl1_7
   \   0000006E   3110                       CPI     R17,16
   \   00000070   F410                       BRCC    ??fc16handl1_7
   \   00000072   E007                       LDI     R16,7
   \   00000074   C039                       RJMP    ??fc16handl1_2
    209            if (rg>=rammin){
   \                     ??fc16handl1_7:
   \   00000076   3110                       CPI     R17,16
   \   00000078   F118                       BRCS    ??fc16handl1_8
    210              UINT * intp; 
    211              intp=&(ramb[rg-rammin]);//inp - указатель на текущий записываемый регистр; 
   \   0000007A   ....                       LDI     R18,LOW(ramb)
   \   0000007C   ....                       LDI     R19,(ramb) >> 8
   \   0000007E   5110                       SUBI    R17,16
   \   00000080   0F00                       LSL     R16
   \   00000082   1F11                       ROL     R17
   \   00000084   0F20                       ADD     R18,R16
   \   00000086   1F31                       ADC     R19,R17
    212              for(i=zero;i<u1.rbuf[5];i++){ //запись в базу данных RAM
   \   00000088   E000                       LDI     R16,0
   \   0000008A   C016                       RJMP    ??fc16handl1_9
    213                __disable_interrupt();
   \                     ??fc16handl1_10:
   \   0000008C   94F8                       CLI
    214                *intp=(u1.rbuf[7+i]<<8)+u1.rbuf[7+i+1];
   \   0000008E   2F40                       MOV     R20,R16
   \   00000090   E050                       LDI     R21,0
   \   00000092   01DF                       MOVW    R27 : R26,R31 : R30
   \   00000094   9614                       ADIW    R27 : R26,4
   \   00000096   01CA                       MOVW    R25 : R24,R21 : R20
   \   00000098   9607                       ADIW    R25 : R24,7
   \   0000009A   0FA8                       ADD     R26,R24
   \   0000009C   1FB9                       ADC     R27,R25
   \   0000009E   917C                       LD      R23,X
   \   000000A0   01DF                       MOVW    R27 : R26,R31 : R30
   \   000000A2   9614                       ADIW    R27 : R26,4
   \   000000A4   5F48                       SUBI    R20,248
   \   000000A6   4F5F                       SBCI    R21,255
   \   000000A8   0FA4                       ADD     R26,R20
   \   000000AA   1FB5                       ADC     R27,R21
   \   000000AC   914C                       LD      R20,X
   \   000000AE   01D9                       MOVW    R27 : R26,R19 : R18
   \   000000B0   934D                       ST      X+,R20
   \   000000B2   937C                       ST      X,R23
    215                __enable_interrupt();
   \   000000B4   9478                       SEI
    216                rg++;
    217              }; 
   \   000000B6   9503                       INC     R16
   \                     ??fc16handl1_9:
   \   000000B8   8511                       LDD     R17,Z+9
   \   000000BA   1701                       CP      R16,R17
   \   000000BC   F338                       BRCS    ??fc16handl1_10
    218              return zero; 
   \   000000BE   CFB3                       RJMP    ??fc16handl1_1
    219            }
    220            if ((rg==1)||(rg==2))
   \                     ??fc16handl1_8:
   \   000000C0   3001                       CPI     R16,1
   \   000000C2   E020                       LDI     R18,0
   \   000000C4   0712                       CPC     R17,R18
   \   000000C6   F019                       BREQ    ??fc16handl1_11
   \   000000C8   3002                       CPI     R16,2
   \   000000CA   0712                       CPC     R17,R18
   \   000000CC   F439                       BRNE    ??fc16handl1_12
    221               if(wr_fl==zero) {return 2;}//illegal data address; ;
   \                     ??fc16handl1_11:
   \   000000CE   9120....                   LDS     R18,wr_fl
   \   000000D2   2322                       TST     R18
   \   000000D4   F221                       BREQ    ??fc16handl1_6
    222                  else {wr_fl=zero;   return wrblock_ini(rg,u1.rbuf[5],(UINT*)&(u1.rbuf[7]));}
   \   000000D6   E020                       LDI     R18,0
   \   000000D8   9320....                   STS     wr_fl,R18
    223               
    224            //обработка записи в EEPROM
    225          //  _clis
    226          //  if (maxc!=zero){SREG=sregt; return 6;};//slave device busy уже идет обработка записи в eeprom c модбаса
    227          //  if 
    228             return wrblock_ini(rg,u1.rbuf[5],(UINT*)&(u1.rbuf[7]));
   \                     ??fc16handl1_12:
   \   000000DC   01AF                       MOVW    R21 : R20,R31 : R30
   \   000000DE   5F45                       SUBI    R20,245
   \   000000E0   4F5F                       SBCI    R21,255
   \   000000E2   8521                       LDD     R18,Z+9
   \   000000E4   ........                   CALL    wrblock_ini
   \                     ??fc16handl1_2:
   \   000000E8   9189                       LD      R24,Y+
   \   000000EA   9199                       LD      R25,Y+
   \   000000EC   91A9                       LD      R26,Y+
   \   000000EE   91B9                       LD      R27,Y+
   \   000000F0   9508                       RET
    229          //  return zero;
    230          }

   \                                 In segment CODE, align 2, keep-with-next
    231          char reinitu1(){
   \                     reinitu1:
    232          char b;
    233            u1.l=zero;
   \   00000000   ....                       LDI     R30,LOW(u1)
   \   00000002   ....                       LDI     R31,(u1) >> 8
   \   00000004   E000                       LDI     R16,0
   \   00000006   8302                       STD     Z+2,R16
    234            u1.state=wait1;
   \   00000008   E001                       LDI     R16,1
   \   0000000A   8301                       STD     Z+1,R16
    235            b=UDR1;
    236            b=UDR1;
    237            b=UDR1;
   \   0000000C   9100009C                   LDS     R16,156
    238            UCSR1B|=(1<<RXCIE1); //разрешили прерывания от приемника};
   \   00000010   9110009A                   LDS     R17,154
   \   00000014   6810                       ORI     R17,0x80
   \   00000016   9310009A                   STS     154,R17
    239            return b;
   \   0000001A   9508                       RET
    240          }  
    241          ////////////////////////////////////////////////////////////////////////////////////////////////////
    242          //постановка на передачу exeption code

   \                                 In segment CODE, align 2, keep-with-next
    243          sendexept1(char ex){
   \                     sendexept1:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   2F10                       MOV     R17,R16
    244          UINT crc;
    245            u1.tbuf[zero]=u1.addr;
   \   00000006   ....                       LDI     R26,LOW(u1)
   \   00000008   ....                       LDI     R27,(u1) >> 8
   \   0000000A   9613                       ADIW    R27 : R26,3
   \   0000000C   910C                       LD      R16,X
   \   0000000E   9619                       ADIW    R27 : R26,9
   \   00000010   930C                       ST      X,R16
   \   00000012   9717                       SBIW    R27 : R26,7
    246            u1.tbuf[1]=u1.rbuf[1]|C8Z;
   \   00000014   910C                       LD      R16,X
   \   00000016   9618                       ADIW    R27 : R26,8
   \   00000018   6800                       ORI     R16,0x80
   \   0000001A   930D                       ST      X+,R16
    247            u1.tbuf[2]=ex;
   \   0000001C   931C                       ST      X,R17
   \   0000001E   971E                       SBIW    R27 : R26,14
    248            crc=getcrc((UCHAR *)&(u1.tbuf),3);
   \   00000020   E023                       LDI     R18,3
   \   00000022   E030                       LDI     R19,0
   \   00000024   018D                       MOVW    R17 : R16,R27 : R26
   \   00000026   5F04                       SUBI    R16,244
   \   00000028   4F1F                       SBCI    R17,255
   \   0000002A   ........                   CALL    getcrc
    249            u1.tbuf[3]=crc >> 8;
   \   0000002E   961F                       ADIW    R27 : R26,15
   \   00000030   931D                       ST      X+,R17
    250            u1.tbuf[4]=crc; //1xFF;
   \   00000032   930C                       ST      X,R16
   \   00000034   9714                       SBIW    R27 : R26,4
    251            sen1((char *)&u1.tbuf,5);
   \   00000036   E025                       LDI     R18,5
   \   00000038   018D                       MOVW    R17 : R16,R27 : R26
   \   0000003A   ....                       RCALL   sen1
    252          };
   \   0000003C   91A9                       LD      R26,Y+
   \   0000003E   91B9                       LD      R27,Y+
   \   00000040   9508                       RET
    253          // форк обработчика принятого кадра (в настоящее время просто выполняется на прерывании с открытыми прерываниями
    254          #define maxreg 64

   \                                 In segment CODE, align 2, keep-with-next
    255          void rec_frm_fork1(){
   \                     rec_frm_fork1:
   \   00000000   927A                       ST      -Y,R7
   \   00000002   926A                       ST      -Y,R6
   \   00000004   925A                       ST      -Y,R5
   \   00000006   924A                       ST      -Y,R4
   \   00000008   93BA                       ST      -Y,R27
   \   0000000A   93AA                       ST      -Y,R26
   \   0000000C   939A                       ST      -Y,R25
   \   0000000E   938A                       ST      -Y,R24
   \   00000010                              REQUIRE ?Register_R4_is_cg_reg
   \   00000010                              REQUIRE ?Register_R5_is_cg_reg
   \   00000010                              REQUIRE ?Register_R6_is_cg_reg
   \   00000010                              REQUIRE ?Register_R7_is_cg_reg
   \   00000010   9722                       SBIW    R29 : R28,2
    256          unsigned char b;
    257          UINT first,rg;
    258          char *ptr;
    259          //      redon4
    260          //   if(getcrc((UCHAR *)&u1.rbuf,u1.l)!=zero){reinitu1();goto end_isr;};
    261                if(getcrc((UCHAR *)&u1.rbuf,u1.l)!=zero){reinitu1();return;};
   \   00000012   ....                       LDI     R26,LOW(u1)
   \   00000014   ....                       LDI     R27,(u1) >> 8
   \   00000016   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000018   8122                       LDD     R18,Z+2
   \   0000001A   E030                       LDI     R19,0
   \   0000001C   018D                       MOVW    R17 : R16,R27 : R26
   \   0000001E   5F0C                       SUBI    R16,252
   \   00000020   4F1F                       SBCI    R17,255
   \   00000022   ........                   CALL    getcrc
   \   00000026   2B01                       OR      R16,R17
   \   00000028   F011                       BREQ    ??rec_frm_fork1_0
   \   0000002A   ....                       RCALL   reinitu1
   \   0000002C   C09D                       RJMP    ??rec_frm_fork1_1
    262                     //кадр принят.взведем флаг активности модбаса
    263                _ID;
   \                     ??rec_frm_fork1_0:
   \   0000002E   94F8                       CLI
    264                mbstate|=1<<mbst1;
   \   00000030   ....                       LDI     R30,LOW(mbstate)
   \   00000032   ....                       LDI     R31,(mbstate) >> 8
   \   00000034   8100                       LD      R16,Z
   \   00000036   6002                       ORI     R16,0x02
   \   00000038   8300                       ST      Z,R16
    265                _IE
   \   0000003A   9478                       SEI
    266                if (u1.rbuf[1]==3){//обработка фукнкции чтения холдинг-регистров
   \   0000003C   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000003E   8105                       LDD     R16,Z+5
   \   00000040   3003                       CPI     R16,3
   \   00000042   F009                       BREQ    $+2+2
   \   00000044   C048                       RJMP    ??rec_frm_fork1_2
    267                        // адрес регистра
    268                        
    269             	  first=u1.rbuf[2]<<8;
    270          	  first += u1.rbuf[3];
   \   00000046   8116                       LDD     R17,Z+6
   \   00000048   E000                       LDI     R16,0
   \   0000004A   8187                       LDD     R24,Z+7
   \   0000004C   E090                       LDI     R25,0
   \   0000004E   0F80                       ADD     R24,R16
   \   00000050   1F91                       ADC     R25,R17
    271          
    272                    // количество регистров
    273          	  if((u1.rbuf[5]>maxreg)|(u1.rbuf[4]!=zero)){sendexept1(3); return;};
   \   00000052   8501                       LDD     R16,Z+9
   \   00000054   3401                       CPI     R16,65
   \   00000056   F488                       BRCC    ??rec_frm_fork1_3
   \   00000058   8500                       LDD     R16,Z+8
   \   0000005A   2300                       TST     R16
   \   0000005C   F471                       BRNE    ??rec_frm_fork1_3
    274          	  u1.tbuf[zero]=u1.addr;
   \   0000005E   8103                       LDD     R16,Z+3
   \   00000060   8704                       STD     Z+12,R16
    275          	  u1.tbuf[1]=3;//fc
   \   00000062   E003                       LDI     R16,3
   \   00000064   8705                       STD     Z+13,R16
    276          	  u1.tbuf[2]=u1.rbuf[5]*2; //byte count;
   \   00000066   8501                       LDD     R16,Z+9
   \   00000068   0F00                       LSL     R16
   \   0000006A   8706                       STD     Z+14,R16
    277          	  ptr=&u1.tbuf[3];
   \   0000006C   013D                       MOVW    R7 : R6,R27 : R26
   \   0000006E   E00F                       LDI     R16,15
   \   00000070   0E60                       ADD     R6,R16
   \   00000072   E000                       LDI     R16,0
   \   00000074   1E70                       ADC     R7,R16
    278          	  {UINT i;
    279                    for (i=first;i<first+u1.rbuf[5];i++){
   \   00000076   012C                       MOVW    R5 : R4,R25 : R24
   \   00000078   C00C                       RJMP    ??rec_frm_fork1_4
   \                     ??rec_frm_fork1_3:
   \   0000007A   E003                       LDI     R16,3
   \   0000007C   C074                       RJMP    ??rec_frm_fork1_5
    280                    if ((b=getrg(i,&rg))!=zero){sendexept1(b); return;};  	
    281                       *(ptr++)=rg>>8;
   \                     ??rec_frm_fork1_6:
   \   0000007E   8119                       LDD     R17,Y+1
   \   00000080   01F3                       MOVW    R31 : R30,R7 : R6
   \   00000082   9311                       ST      Z+,R17
    282                       *(ptr++)=rg&Cff;
   \   00000084   8108                       LD      R16,Y
   \   00000086   9301                       ST      Z+,R16
   \   00000088   013F                       MOVW    R7 : R6,R31 : R30
   \   0000008A   E001                       LDI     R16,1
   \   0000008C   0E40                       ADD     R4,R16
   \   0000008E   E000                       LDI     R16,0
   \   00000090   1E50                       ADC     R5,R16
   \                     ??rec_frm_fork1_4:
   \   00000092   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000094   8501                       LDD     R16,Z+9
   \   00000096   E010                       LDI     R17,0
   \   00000098   0F08                       ADD     R16,R24
   \   0000009A   1F19                       ADC     R17,R25
   \   0000009C   1640                       CP      R4,R16
   \   0000009E   0651                       CPC     R5,R17
   \   000000A0   F438                       BRCC    ??rec_frm_fork1_7
   \   000000A2   019E                       MOVW    R19 : R18,R29 : R28
   \   000000A4   0182                       MOVW    R17 : R16,R5 : R4
   \   000000A6   ........                   CALL    getrg
   \   000000AA   2300                       TST     R16
   \   000000AC   F341                       BREQ    ??rec_frm_fork1_6
   \   000000AE   C05B                       RJMP    ??rec_frm_fork1_5
    283                    };  
    284                    }
    285                    {UINT crc;
    286                       crc=getcrc((UCHAR *)&u1.tbuf,u1.tbuf[2]+3);
   \                     ??rec_frm_fork1_7:
   \   000000B0   8526                       LDD     R18,Z+14
   \   000000B2   E030                       LDI     R19,0
   \   000000B4   5F2D                       SUBI    R18,253
   \   000000B6   4F3F                       SBCI    R19,255
   \   000000B8   018D                       MOVW    R17 : R16,R27 : R26
   \   000000BA   5F04                       SUBI    R16,244
   \   000000BC   4F1F                       SBCI    R17,255
   \   000000BE   ........                   CALL    getcrc
    287                       *(ptr++)=crc >> 8;
   \   000000C2   01F3                       MOVW    R31 : R30,R7 : R6
   \   000000C4   8310                       ST      Z,R17
    288                       *(ptr++)=crc & Cff;
   \   000000C6   8301                       STD     Z+1,R16
    289                                  
    290                    };
    291                    sen1((char *)&u1.tbuf,u1.tbuf[2]+5);
   \   000000C8   01FD                       MOVW    R31 : R30,R27 : R26
   \   000000CA   8526                       LDD     R18,Z+14
   \   000000CC   5F2B                       SUBI    R18,251
   \                     ??rec_frm_fork1_8:
   \   000000CE   961C                       ADIW    R27 : R26,12
   \                     ??rec_frm_fork1_9:
   \   000000D0   018D                       MOVW    R17 : R16,R27 : R26
   \   000000D2   ....                       RCALL   sen1
    292                    return;
   \   000000D4   C049                       RJMP    ??rec_frm_fork1_1
    293               }
    294               if (u1.rbuf[1]==16){//обработка функции записи регистров
   \                     ??rec_frm_fork1_2:
   \   000000D6   3100                       CPI     R16,16
   \   000000D8   F4E9                       BRNE    ??rec_frm_fork1_10
    295                  b=fc16handl1();
   \   000000DA   ....                       RCALL   fc16handl1
    296                  if (b!=zero) {sendexept1(b);return;}
   \   000000DC   2300                       TST     R16
   \   000000DE   F009                       BREQ    $+2+2
   \   000000E0   C042                       RJMP    ??rec_frm_fork1_5
    297                  else {
    298                    u1.tbuf[zero]=u1.addr;
   \   000000E2   01FD                       MOVW    R31 : R30,R27 : R26
   \   000000E4   8103                       LDD     R16,Z+3
   \   000000E6   8704                       STD     Z+12,R16
    299          	  u1.tbuf[1]=16;//fc
   \   000000E8   E100                       LDI     R16,16
   \   000000EA   8705                       STD     Z+13,R16
    300          	  u1.tbuf[2]=u1.rbuf[2]; 
   \   000000EC   8106                       LDD     R16,Z+6
   \   000000EE   8706                       STD     Z+14,R16
    301          	  u1.tbuf[3]=u1.rbuf[3]; 
   \   000000F0   8107                       LDD     R16,Z+7
   \   000000F2   8707                       STD     Z+15,R16
    302          	  u1.tbuf[4]=u1.rbuf[4]; 
   \   000000F4   8500                       LDD     R16,Z+8
   \   000000F6   8B00                       STD     Z+16,R16
    303          	  u1.tbuf[5]=u1.rbuf[5]; 
   \   000000F8   8501                       LDD     R16,Z+9
   \   000000FA   8B01                       STD     Z+17,R16
    304                    {UINT crc;
    305                       crc=getcrc((UCHAR *)&u1.tbuf,6);
   \   000000FC   E026                       LDI     R18,6
   \   000000FE   E030                       LDI     R19,0
   \   00000100   018D                       MOVW    R17 : R16,R27 : R26
   \   00000102   5F04                       SUBI    R16,244
   \   00000104   4F1F                       SBCI    R17,255
   \   00000106   ........                   CALL    getcrc
    306                       u1.tbuf[6]=crc >> 8;
   \   0000010A   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000010C   8B12                       STD     Z+18,R17
    307                       u1.tbuf[7]=crc & Cff;
   \   0000010E   8B03                       STD     Z+19,R16
    308                    };
    309                    sen1((char *)&u1.tbuf,8);
   \   00000110   E028                       LDI     R18,8
   \   00000112   CFDD                       RJMP    ??rec_frm_fork1_8
    310                    return;
    311                  }
    312               }
    313               if (u1.rbuf[1]==8){
   \                     ??rec_frm_fork1_10:
   \   00000114   3008                       CPI     R16,8
   \   00000116   F419                       BRNE    ??rec_frm_fork1_11
    314               //обработка функции диагностики
    315                 sen1((char *)&u1.rbuf,u1.l);
   \   00000118   8122                       LDD     R18,Z+2
   \                     ??rec_frm_fork1_12:
   \   0000011A   9614                       ADIW    R27 : R26,4
   \   0000011C   CFD9                       RJMP    ??rec_frm_fork1_9
    316          //       goto end_isr;
    317                 return;
    318               }
    319               if (u1.rbuf[1]==255){//функция установки адреса устройства
   \                     ??rec_frm_fork1_11:
   \   0000011E   3F0F                       CPI     R16,255
   \   00000120   F509                       BRNE    ??rec_frm_fork1_13
    320                   if ((u1.rbuf[2]!=12)||(u1.rbuf[3]!=zero)) return;
   \   00000122   8106                       LDD     R16,Z+6
   \   00000124   300C                       CPI     R16,12
   \   00000126   F501                       BRNE    ??rec_frm_fork1_1
   \   00000128   8107                       LDD     R16,Z+7
   \   0000012A   2300                       TST     R16
   \   0000012C   F4E9                       BRNE    ??rec_frm_fork1_1
    321                   if( reg_num!=( ((UINT)(u1.rbuf[5]<<8))|u1.rbuf[4] ) )return;
   \   0000012E   ....                       LDI     R30,LOW(hrem)
   \   00000130   ....                       LDI     R31,(hrem) >> 8
   \   00000132   8142                       LDD     R20,Z+2
   \   00000134   8153                       LDD     R21,Z+3
   \   00000136   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000138   8531                       LDD     R19,Z+9
   \   0000013A   8500                       LDD     R16,Z+8
   \   0000013C   1740                       CP      R20,R16
   \   0000013E   0753                       CPC     R21,R19
   \   00000140   F499                       BRNE    ??rec_frm_fork1_1
    322                   _SETADDR=u1.rbuf[6];
   \   00000142   8502                       LDD     R16,Z+10
   \   00000144   8303                       STD     Z+3,R16
   \   00000146   9300....                   STS     (u0 + 3),R16
    323                    u1.rbuf[zero]=u1.addr;
   \   0000014A   8304                       STD     Z+4,R16
    324                    {UINT crc;
    325                       crc=getcrc((UCHAR *)&u1.rbuf,7);
   \   0000014C   E027                       LDI     R18,7
   \   0000014E   E030                       LDI     R19,0
   \   00000150   018D                       MOVW    R17 : R16,R27 : R26
   \   00000152   5F0C                       SUBI    R16,252
   \   00000154   4F1F                       SBCI    R17,255
   \   00000156   ........                   CALL    getcrc
    326                       u1.rbuf[7]=crc >> 8;
   \   0000015A   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000015C   8713                       STD     Z+11,R17
    327                       u1.rbuf[8]=crc & Cff;
   \   0000015E   8704                       STD     Z+12,R16
    328                    };
    329                    sen1((char *)&u1.rbuf,9);
   \   00000160   E029                       LDI     R18,9
   \   00000162   CFDB                       RJMP    ??rec_frm_fork1_12
    330          /*          
    331                    u1.tbuf[zero]=u1.addr;
    332          	  u1.tbuf[1]=255;//fc
    333          	  u1.tbuf[2]=u1.rbuf[2]; 
    334          	  u1.tbuf[3]=u1.rbuf[3]; 
    335          	  u1.tbuf[4]=u1.rbuf[4]; 
    336          	  u1.tbuf[5]=u1.rbuf[5]; 
    337           	  u1.tbuf[6]=u1.rbuf[6]; 
    338          
    339                    {UINT crc;
    340                       crc=getcrc((UCHAR *)&u1.tbuf,7);
    341                       u1.tbuf[7]=crc >> 8;
    342                       u1.tbuf[8]=crc & Cff;
    343                    };
    344                    addh(1xaaaa);
    345                    addh(u1.tbuf[1]);
    346                    addh(u1.tbuf[2]);
    347                    addh(u1.tbuf[3]);          
    348                    addh(u1.tbuf[4]);          
    349                    addh(u1.tbuf[5]);          
    350                    addh(u1.tbuf[6]);          
    351                    addh(u1.tbuf[7]);          
    352                    addh(u1.tbuf[8]);          
    353                    sen1((char *)&u1.tbuf,9);
    354          */          
    355                    return;
    356               } 
    357               sendexept1(5);//ILLEGAL FUNCTION другие функции не поддерживаются
   \                     ??rec_frm_fork1_13:
   \   00000164   E005                       LDI     R16,5
   \                     ??rec_frm_fork1_5:
   \   00000166   ....                       RCALL   sendexept1
    358          };
   \                     ??rec_frm_fork1_1:
   \   00000168   9622                       ADIW    R29 : R28,2
   \   0000016A   9189                       LD      R24,Y+
   \   0000016C   9199                       LD      R25,Y+
   \   0000016E   91A9                       LD      R26,Y+
   \   00000170   91B9                       LD      R27,Y+
   \   00000172   9049                       LD      R4,Y+
   \   00000174   9059                       LD      R5,Y+
   \   00000176   9069                       LD      R6,Y+
   \   00000178   9079                       LD      R7,Y+
   \   0000017A   9508                       RET
    359          
    360          // функция возвращает значение регистра с заданным адресом в переменной RG и zero в случае успешного завершения
    361          // в случае невозможности чтения регистра функция возвращает еxeption для отправки пользователю
    362          extern char getrg(UINT address,UINT * rg);
    363          ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    364          #pragma vector=TIMERch1_COMP_vect

   \                                 In segment CODE, align 2, keep-with-next
    365          __interrupt void tch1_comp_isr(){
   \                     tch1_comp_isr:
   \   00000000   939A                       ST      -Y,R25
   \   00000002   938A                       ST      -Y,R24
   \   00000004   93FA                       ST      -Y,R31
   \   00000006   93EA                       ST      -Y,R30
   \   00000008   923A                       ST      -Y,R3
   \   0000000A   922A                       ST      -Y,R2
   \   0000000C   921A                       ST      -Y,R1
   \   0000000E   920A                       ST      -Y,R0
   \   00000010   937A                       ST      -Y,R23
   \   00000012   936A                       ST      -Y,R22
   \   00000014   935A                       ST      -Y,R21
   \   00000016   934A                       ST      -Y,R20
   \   00000018   933A                       ST      -Y,R19
   \   0000001A   932A                       ST      -Y,R18
   \   0000001C   931A                       ST      -Y,R17
   \   0000001E   930A                       ST      -Y,R16
   \   00000020   B78F                       IN      R24,0x3F
   \   00000022   B79B                       IN      R25,0x3B
    366          
    367            UCSR1B&=~(1<<RXCIE1);//запрещаем прерывания от приемника
   \   00000024   9100009A                   LDS     R16,154
   \   00000028   770F                       ANDI    R16,0x7F
   \   0000002A   9300009A                   STS     154,R16
    368            OCIE1CH=zero; //!!!! запрещаем прерывания от таймера OCIE1=zero
   \   0000002E   B707                       IN      R16,0x37
   \   00000030   770F                       ANDI    R16,0x7F
   \   00000032   BF07                       OUT     0x37,R16
    369          
    370            if (u1.state==sync){reinitu1();goto end_isr;}
   \   00000034   ....                       LDI     R30,LOW(u1)
   \   00000036   ....                       LDI     R31,(u1) >> 8
   \   00000038   8101                       LDD     R16,Z+1
   \   0000003A   2300                       TST     R16
   \   0000003C   F411                       BRNE    ??tch1_comp_isr_0
   \                     ??tch1_comp_isr_1:
   \   0000003E   ....                       RCALL   reinitu1
   \   00000040   C020                       RJMP    ??tch1_comp_isr_2
    371          //  _SEI();//открыли прерывания - остальное работает
    372           // redon4
    373            if (u1.state==rx){
   \                     ??tch1_comp_isr_0:
   \   00000042   3002                       CPI     R16,2
   \   00000044   F461                       BRNE    ??tch1_comp_isr_3
    374          //       redon4
    375             //проверяем корректность принятого кадра
    376          //   b=u1.l;
    377          //gron4
    378          //      if ((u1.l<8)|(u1.addr!=u1.rbuf[zero])){reinitu1();goto end_isr;};
    379          //      addh(1xaaab);
    380                if( (u1.l<8)|| !( (u1.addr==u1.rbuf[zero])||(u1.rbuf[zero]==zero) ) ){reinitu1();goto end_isr;};
   \   00000046   8102                       LDD     R16,Z+2
   \   00000048   3008                       CPI     R16,8
   \   0000004A   F3C8                       BRCS    ??tch1_comp_isr_1
   \   0000004C   8103                       LDD     R16,Z+3
   \   0000004E   8114                       LDD     R17,Z+4
   \   00000050   1701                       CP      R16,R17
   \   00000052   F011                       BREQ    ??tch1_comp_isr_4
   \   00000054   2311                       TST     R17
   \   00000056   F799                       BRNE    ??tch1_comp_isr_1
    381                  _SEI();//открыли прерывания - остальное работает
   \                     ??tch1_comp_isr_4:
   \   00000058   9478                       SEI
    382               rec_frm_fork1(); 
   \   0000005A   ....                       RCALL   rec_frm_fork1
    383          //     off4
    384               goto end_isr;
   \   0000005C   C012                       RJMP    ??tch1_comp_isr_2
    385            };  
    386            if(u1.state==senpr){ // передавали преамбулу
   \                     ??tch1_comp_isr_3:
   \   0000005E   3003                       CPI     R16,3
   \   00000060   F441                       BRNE    ??tch1_comp_isr_5
    387                 u1.state=senbody;    
   \   00000062   E004                       LDI     R16,4
   \   00000064   8301                       STD     Z+1,R16
    388                 UCSR1B|=(1<<UDRIE1)|(1<<TXEN1);  //открыли прерывания (таймер запрещен)
   \   00000066   9100009A                   LDS     R16,154
   \   0000006A   6208                       ORI     R16,0x28
   \   0000006C   9300009A                   STS     154,R16
    389          
    390                 goto end_isr;
   \   00000070   C008                       RJMP    ??tch1_comp_isr_2
    391                 
    392          //       return;
    393             }
    394             if(u1.state==senpost){ // передавали постамбулу
   \                     ??tch1_comp_isr_5:
   \   00000072   3005                       CPI     R16,5
   \   00000074   F421                       BRNE    ??tch1_comp_isr_6
    395                 u1.state=1;    
   \   00000076   E001                       LDI     R16,1
   \   00000078   8301                       STD     Z+1,R16
    396                 SEND1OFF;   
   \   0000007A   98C6                       CBI     0x18,0x06
    397                 reinitu1();  
   \   0000007C   CFE0                       RJMP    ??tch1_comp_isr_1
    398          //       return;
    399                    
    400                 goto end_isr; 
    401             }
    402             u1.state=sync;
   \                     ??tch1_comp_isr_6:
   \   0000007E   E000                       LDI     R16,0
   \   00000080   8301                       STD     Z+1,R16
    403          end_isr:;
    404           _NOP();
   \                     ??tch1_comp_isr_2:
   \   00000082   0000                       NOP
    405          // off1
    406          };
   \   00000084   BF9B                       OUT     0x3B,R25
   \   00000086   BF8F                       OUT     0x3F,R24
   \   00000088   9109                       LD      R16,Y+
   \   0000008A   9119                       LD      R17,Y+
   \   0000008C   9129                       LD      R18,Y+
   \   0000008E   9139                       LD      R19,Y+
   \   00000090   9149                       LD      R20,Y+
   \   00000092   9159                       LD      R21,Y+
   \   00000094   9169                       LD      R22,Y+
   \   00000096   9179                       LD      R23,Y+
   \   00000098   9009                       LD      R0,Y+
   \   0000009A   9019                       LD      R1,Y+
   \   0000009C   9029                       LD      R2,Y+
   \   0000009E   9039                       LD      R3,Y+
   \   000000A0   91E9                       LD      R30,Y+
   \   000000A2   91F9                       LD      R31,Y+
   \   000000A4   9189                       LD      R24,Y+
   \   000000A6   9199                       LD      R25,Y+
   \   000000A8   9518                       RETI
    407          
    408          //////////////////////////////////////////////////////////////////////////////////////////////////////////
    409          #pragma vector=USART1_UDRE_vect

   \                                 In segment CODE, align 2, keep-with-next
    410          __interrupt void tx1_isr()
   \                     tx1_isr:
    411          {
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   93FA                       ST      -Y,R31
   \   00000006   93EA                       ST      -Y,R30
   \   00000008   931A                       ST      -Y,R17
   \   0000000A   930A                       ST      -Y,R16
   \   0000000C   B71F                       IN      R17,0x3F
    412          
    413            if (len1!=zero){
   \   0000000E   9100....                   LDS     R16,(txf1 + 2)
   \   00000012   2300                       TST     R16
   \   00000014   F061                       BREQ    ??tx1_isr_0
    414              len1=len1-1;
   \   00000016   ....                       LDI     R30,LOW(txf1)
   \   00000018   ....                       LDI     R31,(txf1) >> 8
   \   0000001A   950A                       DEC     R16
   \   0000001C   8302                       STD     Z+2,R16
    415              UDR1=*txf1++;
   \   0000001E   81A0                       LD      R26,Z
   \   00000020   81B1                       LDD     R27,Z+1
   \   00000022   910D                       LD      R16,X+
   \   00000024   83A0                       ST      Z,R26
   \   00000026   83B1                       STD     Z+1,R27
   \   00000028   9300009C                   STS     156,R16
   \   0000002C   C012                       RJMP    ??tx1_isr_1
    416          
    417            }
    418            else {
    419               //запрещаем прерывания от передатчика,
    420          //     UCSR1B&=~(1<<5);
    421              UCSR1B&=~(1<<UDRIE1);
   \                     ??tx1_isr_0:
   \   0000002E   9100009A                   LDS     R16,154
   \   00000032   7D0F                       ANDI    R16,0xDF
   \   00000034   9300009A                   STS     154,R16
    422              u1.state=senpost;//переходим в состояние передачи постамбулы.
   \   00000038   E005                       LDI     R16,5
   \   0000003A   9300....                   STS     (u1 + 1),R16
    423          //    OCR1T=t35;
    424              OCR1T=t35;
   \   0000003E   9100....                   LDS     R16,t35
   \   00000042   BD03                       OUT     0x23,R16
    425              TCNT1CH=zero;
   \   00000044   E000                       LDI     R16,0
   \   00000046   BD04                       OUT     0x24,R16
    426          //    OCF1CH=1; //сбросили флаг прерывания от таймера, если он был
    427          //    TIFR=1<<OCF1CH;
    428              TIFR=1<<CH1f;
   \   00000048   E800                       LDI     R16,128
   \   0000004A   BF06                       OUT     0x36,R16
    429              OCIE1CH=1; //разрешили прерывания от таймера
   \   0000004C   B707                       IN      R16,0x37
   \   0000004E   6800                       ORI     R16,0x80
   \   00000050   BF07                       OUT     0x37,R16
    430          
    431            }
    432           
    433          
    434          // redoff(); 
    435          };
   \                     ??tx1_isr_1:
   \   00000052   BF1F                       OUT     0x3F,R17
   \   00000054   9109                       LD      R16,Y+
   \   00000056   9119                       LD      R17,Y+
   \   00000058   ....                       RJMP    ?Subroutine0
    436          

   \                                 In segment CODE, align 2, keep-with-next
    437          char sendstart1(char *outbuf,char l){
   \                     sendstart1:
    438              UCSR1A&=~(1<<TXC1);  
   \   00000000   9130009B                   LDS     R19,155
   \   00000004   7B3F                       ANDI    R19,0xBF
   \   00000006   9330009B                   STS     155,R19
    439              UDR1=*outbuf++;
   \   0000000A   01F8                       MOVW    R31 : R30,R17 : R16
   \   0000000C   8130                       LD      R19,Z
   \   0000000E   9330009C                   STS     156,R19
    440              len1=--l;  
   \   00000012   952A                       DEC     R18
   \   00000014   9320....                   STS     (txf1 + 2),R18
    441              txf1=outbuf;
   \   00000018   5F0F                       SUBI    R16,255
   \   0000001A   4F1F                       SBCI    R17,255
   \   0000001C   ....                       LDI     R30,LOW(txf1)
   \   0000001E   ....                       LDI     R31,(txf1) >> 8
   \   00000020   8300                       ST      Z,R16
   \   00000022   8311                       STD     Z+1,R17
    442              UCSR1B|=(1<<UDRIE1)|(1<<TXEN1); 
   \   00000024   9100009A                   LDS     R16,154
   \   00000028   6208                       ORI     R16,0x28
   \   0000002A   9300009A                   STS     154,R16
    443              return zero;
   \   0000002E   E000                       LDI     R16,0
   \   00000030   9508                       RET
    444          };

   \                                 In segment INTVEC, offset 0x24, root
   \   00000000   ........                   JMP     tch1_comp_isr

   \                                 In segment INTVEC, offset 0x78, root
   \   00000000   ........                   JMP     rx1_isr

   \                                 In segment INTVEC, offset 0x7c, root
   \   00000000   ........                   JMP     tx1_isr

   \                                 In segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x43
   \   union <unnamed> volatile __io _A_OCR2
   \                     _A_OCR2:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x44
   \   union <unnamed> volatile __io _A_TCNT2
   \                     _A_TCNT2:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x45
   \   union <unnamed> volatile __io _A_TCCR2
   \                     _A_TCCR2:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x56
   \   union <unnamed> volatile __io _A_TIFR
   \                     _A_TIFR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x57
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x98
   \   union <unnamed> volatile __io _A_UBRR1H
   \                     _A_UBRR1H:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x99
   \   union <unnamed> volatile __io _A_UBRR1L
   \                     _A_UBRR1L:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x9a
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x9b
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x9c
   \   union <unnamed> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x9d
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                              DS 1

   Maximum stack usage in bytes:

     Function           CSTACK RSTACK
     --------           ------ ------
     fc16handl1             4      2
       -> wrblock_ini       4      2
       -> wrblock_ini       4      2
     initmb1                0      2
     rec_frm_fork1         10      2
       -> getcrc           10      2
       -> reinitu1         10      2
       -> sendexept1       10      2
       -> getrg            10      2
       -> sendexept1       10      2
       -> getcrc           10      2
       -> sen1             10      2
       -> fc16handl1       10      2
       -> sendexept1       10      2
       -> getcrc           10      2
       -> sen1             10      2
       -> sen1             10      2
       -> getcrc           10      2
       -> sen1             10      2
       -> sendexept1       10      2
     reinitu1               0      2
     rx1_isr                8      2
     sen1                   0      2
     sendexept1             2      2
       -> getcrc            2      2
       -> sen1              2      2
     sendstart1             0      2
     tch1_comp_isr         15      2
       -> reinitu1         15      2
       -> reinitu1         15      2
       -> rec_frm_fork1    15      2
       -> reinitu1         15      2
     tx1_isr                6      2


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     u1              148
     txf1              3
     initmb1         366
     rx1_isr         150
     ?Subroutine0     10
     sen1             40
     fc16handl1      242
     reinitu1         28
     sendexept1       66
     rec_frm_fork1   380
     tch1_comp_isr   170
     tx1_isr          90
     sendstart1       50
     _A_DDRB           1
     _A_PORTB          1
     _A_OCR2           1
     _A_TCNT2          1
     _A_TCCR2          1
     _A_TIFR           1
     _A_TIMSK          1
     _A_UBRR1H         1
     _A_UBRR1L         1
     _A_UCSR1B         1
     _A_UCSR1A         1
     _A_UDR1           1
     _A_UCSR1C         1
      Others          19

 
    13 bytes in segment ABSOLUTE
 1 592 bytes in segment CODE
     7 bytes in segment INITTAB
    12 bytes in segment INTVEC
   151 bytes in segment NEAR_Z
 
 1 604 bytes of CODE memory (+  7 bytes shared)
   151 bytes of DATA memory (+ 13 bytes shared)

Errors: none
Warnings: 2
