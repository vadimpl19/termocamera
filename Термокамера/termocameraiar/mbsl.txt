‘а ў­Ґ­ЁҐ д ©«®ў mbsl1.c Ё MBSL1.C.NEW
***** mbsl1.c
struct isr_cntx u1;
extern UINT getcrc(UCHAR *puchMsg, UINT usDataLen);
***** MBSL1.C.NEW
struct isr_cntx u1;
#ifdef mbslave0
extern struct isr_cntx u1;
#else 
extern struct isr_cntx uZ;
#endif
extern UINT getcrc(UCHAR *puchMsg, UINT usDataLen);
*****

***** mbsl1.c
    TCNT1CH=zero;
//    TIFR_Bit1=1; //сбросили флаг прерывания от таймера, если он был
      OCF1CH=1;
//    TIMSK_Bit1=1; //разрешили прерывания от таймера
    OCIE1CH=1;

***** MBSL1.C.NEW
    TCNT1CH=zero;

//      OCF1CH=1;
     TIFR=1<<OCF1CH; 
//    TIMSK_Bit1=1; //разрешили прерывания от таймера
    OCIE1CH=1; 

*****

***** mbsl1.c
    u1.state=rx;
    u1.rbuf[u1.l++]=UDR1;
//    u1.rbuf[u1.l++]=b;
    goto erx;     
***** MBSL1.C.NEW
    u1.state=rx;
//    if (u1.l>(128+8))goto error_rx;
    u1.rbuf[u1.l++]=UDR1;
    //    u1.rbuf[u1.l++]=b;
    goto erx;     
*****

***** mbsl1.c
  }
//   TCNT1CHCH=zero; u1.rbuf[u1.l++]=b;}
  // если же не уложились в интервал - сбрасываем кадр 
  u1.l=zero; //сбрасываем  кадр.
error_rx:
//  off3 ;redon3; 
***** MBSL1.C.NEW
  }
  // если же не уложились в интервал - сбрасываем кадр 
error_rx:  
  u1.l=zero; //сбрасываем  кадр.

//  off3 ;redon3; 
*****

***** mbsl1.c
erx: 
// off3  
};   
***** MBSL1.C.NEW
erx: 
// off3 
_NOP(); 
};   
*****

***** mbsl1.c
};
#define maxreg 64
// форк обработчика принятого кадра (в настоящее время просто выполняется на прерывании с открытыми прерываниями
void rec_frm_fork1(){
***** MBSL1.C.NEW
};
// форк обработчика принятого кадра (в настоящее время просто выполняется на прерывании с открытыми прерываниями
#define maxreg 64
void rec_frm_fork1(){
*****

***** mbsl1.c
      if(getcrc((UCHAR *)&u1.rbuf,u1.l)!=zero){reinitu1();return;};
      if((u1.rbuf[5]>maxreg)|(u1.rbuf[4]!=zero)){sendexept1(3); return;};   
      if (u1.rbuf[1]==3){//обработка фукнкции чтения холдинг-регистров
//      off4
//      gron4  
//      if (u1.rbuf[zero]==zero)goto end_isr; //broadcast
              // адрес регистра
          first=u1.rbuf[2]<<8;
***** MBSL1.C.NEW
      if(getcrc((UCHAR *)&u1.rbuf,u1.l)!=zero){reinitu1();return;};
      if (u1.rbuf[1]==3){//обработка фукнкции чтения холдинг-регистров
              // адрес регистра
              
          first=u1.rbuf[2]<<8;
*****

***** mbsl1.c
          // количество регистров
//        if((u1.rbuf[5]>127)|(u1.rbuf[4]!=zero)){sendexept1(3); goto end_isr;};
          if((u1.rbuf[5]>maxreg)|(u1.rbuf[4]!=zero)){sendexept1(3); return;};
***** MBSL1.C.NEW
          // количество регистров
          if((u1.rbuf[5]>maxreg)|(u1.rbuf[4]!=zero)){sendexept1(3); return;};
*****

***** mbsl1.c
          for (i=first;i<first+u1.rbuf[5];i++){
//             if ((b=getrg(i,&rg))!=zero){sendexept1(b); goto end_isr;};       
          if ((b=getrg(i,&rg))!=zero){sendexept1(b); return;};          
***** MBSL1.C.NEW
          for (i=first;i<first+u1.rbuf[5];i++){
          if ((b=getrg(i,&rg))!=zero){sendexept1(b); return;};          
*****

***** mbsl1.c
          sen1((char *)&u1.tbuf,u1.tbuf[2]+5);
//          goto end_isr;
          return;
***** MBSL1.C.NEW
          sen1((char *)&u1.tbuf,u1.tbuf[2]+5);
          return;
*****

***** mbsl1.c
        b=fc16handl1();
//        if (b!=zero) {sendexept1(b);goto end_isr;}
        if (b!=zero) {sendexept1(b);return;}
***** MBSL1.C.NEW
        b=fc16handl1();
        if (b!=zero) {sendexept1(b);return;}
*****

***** mbsl1.c
          sen1((char *)&u1.tbuf,8);
//          goto end_isr;
          return;
***** MBSL1.C.NEW
          sen1((char *)&u1.tbuf,8);
          return;
*****

***** mbsl1.c
     }
     sendexept1(5);//ILLEGAL FUNCTION другие функции не поддерживаются
***** MBSL1.C.NEW
     }
     if (u1.rbuf[1]==255){//функция установки адреса устройства
         if ((u1.rbuf[2]!=6)||(u1.rbuf[3]!=zero)) return;
         if( hrem[0x11]!=( ((UINT)(u1.rbuf[5]<<8))|u1.rbuf[4] ) )return;
         _SETADDR=u1.rbuf[6];
          u1.rbuf[zero]=u1.addr;
          {UINT crc;
             crc=getcrc((UCHAR *)&u1.rbuf,7);
             u1.rbuf[7]=crc >> 8;
             u1.rbuf[8]=crc & Cff;
          };
          sen1((char *)&u1.rbuf,9);
/*          
          u1.tbuf[zero]=u1.addr;
          u1.tbuf[1]=255;//fc
          u1.tbuf[2]=u1.rbuf[2]; 
          u1.tbuf[3]=u1.rbuf[3]; 
          u1.tbuf[4]=u1.rbuf[4]; 
          u1.tbuf[5]=u1.rbuf[5]; 
          u1.tbuf[6]=u1.rbuf[6]; 

          {UINT crc;
             crc=getcrc((UCHAR *)&u1.tbuf,7);
             u1.tbuf[7]=crc >> 8;
             u1.tbuf[8]=crc & Cff;
          };
          addh(1xaaaa);
          addh(u1.tbuf[1]);
          addh(u1.tbuf[2]);
          addh(u1.tbuf[3]);          
          addh(u1.tbuf[4]);          
          addh(u1.tbuf[5]);          
          addh(u1.tbuf[6]);          
          addh(u1.tbuf[7]);          
          addh(u1.tbuf[8]);          
          sen1((char *)&u1.tbuf,9);
*/          
          return;
     } 
     sendexept1(5);//ILLEGAL FUNCTION другие функции не поддерживаются
*****

***** mbsl1.c
__interrupt void tch1_comp_isr(){
//  gronw
  UCSR1B&=~(1<<RXCIE1);//запрещаем прерывания от приемника
***** MBSL1.C.NEW
__interrupt void tch1_comp_isr(){

  UCSR1B&=~(1<<RXCIE1);//запрещаем прерывания от приемника
*****

***** mbsl1.c
//gron4
      if ((u1.l<8)|(u1.addr!=u1.rbuf[zero])){reinitu1();goto end_isr;};
// redon4
     rec_frm_fork1(); 
***** MBSL1.C.NEW
//gron4
//      if ((u1.l<8)|(u1.addr!=u1.rbuf[zero])){reinitu1();goto end_isr;};
//      addh(1xaaab);
      if( (u1.l<8)|| !( (u1.addr==u1.rbuf[zero])||(u1.rbuf[zero]==zero) ) ){reinitu1();goto end_isr;};
// redon4
//     addh(1xaabb);
     rec_frm_fork1(); 
*****

***** mbsl1.c

//       delayloop(51); 
       goto end_isr;
***** MBSL1.C.NEW

       goto end_isr;
*****

***** mbsl1.c
end_isr:;
 
// offw
};
***** MBSL1.C.NEW
end_isr:;
 _NOP();
// off1
};
*****

***** mbsl1.c
    TCNT1CH=zero;
    OCF1CH=1; //сбросили флаг прерывания от таймера, если он был
    OCIE1CH=1; //разрешили прерывания от таймера
***** MBSL1.C.NEW
    TCNT1CH=zero;
//    OCF1CH=1; //сбросили флаг прерывания от таймера, если он был
    TIFR=1<<OCF1CH;
    OCIE1CH=1; //разрешили прерывания от таймера
*****

